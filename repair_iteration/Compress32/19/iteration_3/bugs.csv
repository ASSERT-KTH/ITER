bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers!=  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers!=  null)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers!=  null)  {  read++;  }	  if(headers!=    null)    {    if(headers.containsKey(key))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
2	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(key)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(key)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.containsKey(key)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null)    {    if(headers.containsKey(key))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
3	[BUG]  [BUGGY]  if(i.isEmpty())  {  if(headers!=  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEmpty())  {  if(headers!=  null)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEmpty())  {  if(headers!=  null)  {  read++;  }	  if(headers!=    null)    {    if(headers.containsKey(key))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
4	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(!headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(!headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null)    {    if(headers.containsKey(key))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
5	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(key))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(key))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.containsKey(key))  {  read++;  }	  if(headers!=    null)    {    if(headers.containsKey(key))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
6	[BUG]  [BUGGY]  read  =  i.nextToken();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  i.nextToken();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  i.nextToken();	  read    =    i.next();    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
7	[BUG]  [BUGGY]  read  =  i.getValue();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  i.getValue();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  i.getValue();	  read    =    i.next();    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
8	[BUG]  [BUGGY]  read  =  i.nextInt();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  i.nextInt();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  i.nextInt();	  read    =    i.next();    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
9	[BUG]  [BUGGY]  read  =  i.next()  +  1;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  i.next()  +  1;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  i.next()  +  1;	  read    =    i.next();    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
10	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NULL))  {  read++;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NULL))  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NULL))  {  read++;	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
11	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_KEY))  {  read++;  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_KEY))  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_KEY))  {  read++;	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
12	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_RESULT))  {  read++;  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_RESULT))  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_RESULT))  {  read++;	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
13	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_QUICK))  {  read++;  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_QUICK))  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_QUICK))  {  read++;	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
14	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
15	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NEW))  {  read++;  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NEW))  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NEW))  {  read++;	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
16	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMESPACE))  {  read++;  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMESPACE))  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMESPACE))  {  read++;	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
17	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
18	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
19	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
20	[BUG]  [BUGGY]  ((  ch  =  i.read())  >>  -1)?  read++  :  i.next();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())  >>  -1)?  read++  :  i.next();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())  >>  -1)?  read++  :  i.next();	  ((    ch    =    i.read())    >=    -1)?    read++    :    i.next();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
21	[BUG]  [BUGGY]  ((  read  =  i.read())  >=  -1)?  read++  :  i.next();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  read  =  i.read())  >=  -1)?  read++  :  i.next();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  read  =  i.read())  >=  -1)?  read++  :  i.next();	  ((    ch    =    i.read())    >=    -1)?    read++    :    i.next();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
22	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getMessage();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getMessage();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)?  read++  :  i.getMessage();	  ((    ch    =    i.read())    >=    -1)?    read++    :    i.next();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
23	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getCurrentSize();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getCurrentSize();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)?  read++  :  i.getCurrentSize();	  ((    ch    =    i.read())    >=    -1)?    read++    :    i.next();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
24	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  headers.put(i.getElement(),  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  headers.put(i.getElement(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  read++;  }  else  {  headers.put(i.getElement(),  headers);  }	  if(i.hasNext())    {    read++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
25	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  headers.put(i.getCurrentElement(),  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  headers.put(i.getCurrentElement(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  read++;  }  else  {  headers.put(i.getCurrentElement(),  headers);  }	  if(i.hasNext())    {    read++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
26	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(headers!=  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(headers!=  null)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  if(headers!=  null)  {  read++;  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
27	[BUG]  [BUGGY]  if(i.isEmpty())  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEmpty())  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEmpty())  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
28	[BUG]  [BUGGY]  if(ch  ==  'n')  {  if(headers!=  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n')  {  if(headers!=  null)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n')  {  if(headers!=  null)  {  read++;  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
29	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't')  {  if(headers!=  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't')  {  if(headers!=  null)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n'  ||  ch  ==  't')  {  if(headers!=  null)  {  read++;  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
30	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
31	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
32	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
33	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
34	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setRead(remainders);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setRead(remainders);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setRead(remainders);	  ((    TarArchiveEntry)i).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
35	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setRead(headers,  read);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setRead(headers,  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setRead(headers,  read);	  ((    TarArchiveEntry)i).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
36	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setRead(remainders,  read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setRead(remainders,  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setRead(remainders,  read);	  ((    TarArchiveEntry)i).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
37	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setRead(headers);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setRead(headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setRead(headers);	  ((    TarArchiveEntry)i).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
38	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setRead(remainingLen);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setRead(remainingLen);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setRead(remainingLen);	  ((    TarArchiveEntry)i).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
39	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setRead(remaining);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setRead(remaining);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setRead(remaining);	  ((    TarArchiveEntry)i).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
40	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  coll);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  coll);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  coll);	  while((    ch    =    i.read())!=    -1)    {    headers.put(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
41	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  col);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  col);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  col);	  while((    ch    =    i.read())!=    -1)    {    headers.put(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
42	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  read);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  read);	  while((    ch    =    i.read())!=    -1)    {    headers.put(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
43	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  parsePaxHeaders(i));  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  parsePaxHeaders(i));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  parsePaxHeaders(i));	  while((    ch    =    i.read())!=    -1)    {    headers.put(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
44	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  parsePaxHeaders(i),  headers);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  parsePaxHeaders(i),  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  parsePaxHeaders(i),  headers);	  while((    ch    =    i.read())!=    -1)    {    headers.put(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
45	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  len);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  len);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  len);	  while((    ch    =    i.read())!=    -1)    {    headers.put(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
46	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  ch!=  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  ch!=  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  ch!=  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    ch    ==    'n')    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
47	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  ch  ==  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  ch  ==  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  ch  ==  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    ch    ==    'n')    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
48	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  read  ==  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  read  ==  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  read  ==  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    ch    ==    'n')    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
49	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  ch  <  =  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  ch  <  =  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  ch  <  =  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    ch    ==    'n')    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
50	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  ch  >=  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  ch  >=  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  ch  >=  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    ch    ==    'n')    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
51	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size());  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size());  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size());    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
52	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size());  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size());  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size());    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
53	[BUG]  [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size());  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size());  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size());    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
54	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size());  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size());  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size());    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
55	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size());  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size());  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size());    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
56	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.get(ch));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size());    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
57	[BUG]  [BUGGY]  ||(i.hasNext()  <  len)&&  i.hasNext())  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  <  len)&&  i.hasNext())  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  <  len)&&  i.hasNext())  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  ||(i.hasNext()    &&    i.hasNext()))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
58	[BUG]  [BUGGY]  ||(i.hasNext()  <  len  &&  i.hasNext()))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  <  len  &&  i.hasNext()))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  <  len  &&  i.hasNext()))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  ||(i.hasNext()    &&    i.hasNext()))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
59	[BUG]  [BUGGY]  ||  i.hasNext())  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.hasNext())  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.hasNext())  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  ||(i.hasNext()    &&    i.hasNext()))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
60	[BUG]  [BUGGY]  ||(i.hasNext()  {  0))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  {  0))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  {  0))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  ||(i.hasNext()    &&    i.hasNext()))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
61	[BUG]  [BUGGY]  ||(i.hasNext()  &&  ch.equals(headers.get(i.next()))))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  ch.equals(headers.get(i.next()))))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  ch.equals(headers.get(i.next()))))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  ||(i.hasNext()    &&    i.hasNext()))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
62	[BUG]  [BUGGY]  ||(i.hasNext()  &&  ch!=  'n'))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  ch!=  'n'))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  ch!=  'n'))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  ||(i.hasNext()    &&    i.hasNext()))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
63	[BUG]  [BUGGY]  headers.put(i.nextToken(),  parsePaxHeaders(i.getParent()));  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.nextToken(),  parsePaxHeaders(i.getParent()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.nextToken(),  parsePaxHeaders(i.getParent()));	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getParent()));    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
64	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getNext()));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getNext()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getNext()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getParent()));    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
65	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.getToken(),  parsePaxHeaders(i.getParent()));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.getToken(),  parsePaxHeaders(i.getParent()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.getToken(),  parsePaxHeaders(i.getParent()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getParent()));    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
66	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getParent()));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getParent()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getParent()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getParent()));    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
67	[BUG]  [BUGGY]  headers.put(i.getToken(),  parsePaxHeaders(i.getParent()));  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.getToken(),  parsePaxHeaders(i.getParent()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.getToken(),  parsePaxHeaders(i.getParent()));	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getParent()));    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
68	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(ch,  parsePaxHeaders(i.getParent()));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(ch,  parsePaxHeaders(i.getParent()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(ch,  parsePaxHeaders(i.getParent()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getParent()));    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
69	[BUG]  [BUGGY]  ||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
70	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
71	[BUG]  [BUGGY]  ||  parseString(Feature.QUOTE_FIELD_NAMES))  {  read++;  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  parseString(Feature.QUOTE_FIELD_NAMES))  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  parseString(Feature.QUOTE_FIELD_NAMES))  {  read++;	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
72	[BUG]  [BUGGY]  ||  headers.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  headers.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  headers.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
73	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES);	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
74	[BUG]  [BUGGY]  ((  ch  =  i.read())  ==  -1)?  read++  :  i.getMessage();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())  ==  -1)?  read++  :  i.getMessage();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())  ==  -1)?  read++  :  i.getMessage();	  ((    ch    =    i.read())    ==    -1)?    read++    :    i.next();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
75	[BUG]  [BUGGY]  ((  read  =  i.read())  ==  -1)?  read++  :  i.next();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  read  =  i.read())  ==  -1)?  read++  :  i.next();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  read  =  i.read())  ==  -1)?  read++  :  i.next();	  ((    ch    =    i.read())    ==    -1)?    read++    :    i.next();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
76	[BUG]  [BUGGY]  ((  ch  =  i.read())  ==  -1)?  read++  :  i.getCurrentSize();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())  ==  -1)?  read++  :  i.getCurrentSize();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())  ==  -1)?  read++  :  i.getCurrentSize();	  ((    ch    =    i.read())    ==    -1)?    read++    :    i.next();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
77	[BUG]  [BUGGY]  ((  ch  =  i.read())  ==  -1)?  read++  :  i.getCurrentName();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())  ==  -1)?  read++  :  i.getCurrentName();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())  ==  -1)?  read++  :  i.getCurrentName();	  ((    ch    =    i.read())    ==    -1)?    read++    :    i.next();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
78	[BUG]  [BUGGY]  if(i.isEmpty())  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEmpty())  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEmpty())  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
79	[BUG]  [BUGGY]  if(i.read()  >  0)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()  >  0)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()  >  0)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
80	[BUG]  [BUGGY]  if(i.read()  >  -1)  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()  >  -1)  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()  >  -1)  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
81	[BUG]  [BUGGY]  if(i.isEmpty())  {  if(headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEmpty())  {  if(headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEmpty())  {  if(headers.containsKey(ch))  {  read++;  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
82	[BUG]  [BUGGY]  if(i.read()  >  -1)  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()  >  -1)  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()  >  -1)  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
83	[BUG]  [BUGGY]  if(i.isEmpty())  {  if(i.read()  >  -1)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEmpty())  {  if(i.read()  >  -1)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEmpty())  {  if(i.read()  >  -1)  {  read++;  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
84	[BUG]  [BUGGY]  read  +=  i.next();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  i.next();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  i.next();	  read    +=    i.hasMoreElements();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
85	[BUG]  [BUGGY]  read  +=  i.getMoreElements();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  i.getMoreElements();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  i.getMoreElements();	  read    +=    i.hasMoreElements();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
86	[BUG]  [BUGGY]  read  +=  headers.hasMoreElements();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  headers.hasMoreElements();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  headers.hasMoreElements();	  read    +=    i.hasMoreElements();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
87	[BUG]  [BUGGY]  read  +=  i.read();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  i.read();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  i.read();	  read    +=    i.hasMoreElements();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
88	[BUG]  [BUGGY]  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
89	[BUG]  [BUGGY]  ||  headers.contains(ch))  {  read++;  }  else  if(ch  ==  '-')  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  headers.contains(ch))  {  read++;  }  else  if(ch  ==  '-')  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  headers.contains(ch))  {  read++;  }  else  if(ch  ==  '-')  {  headers.put(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
90	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers  ==  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers  ==  null)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers  ==  null)  {  read++;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
91	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
92	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
93	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers!=  null)read++;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers!=  null)read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers!=  null)read++;  }	  if(headers!=    null)    {    if(headers.contains(ch))    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
94	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null)    {    if(headers.contains(ch))    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
95	[BUG]  [BUGGY]  if(i.isEmpty())  {  if(headers!=  null)read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEmpty())  {  if(headers!=  null)read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEmpty())  {  if(headers!=  null)read++;  }	  if(headers!=    null)    {    if(headers.contains(ch))    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
96	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.contains(ch))  read++;  }	  if(headers!=    null)    {    if(headers.contains(ch))    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
97	[BUG]  [BUGGY]  if(i.isEmpty())  {  if(headers!=  null)read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEmpty())  {  if(headers!=  null)read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEmpty())  {  if(headers!=  null)read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null)    {    if(headers.contains(ch))    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
98	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(headers,  read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(headers,  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(headers,  read);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
99	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(remainders);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(remainders);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(remainders);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
100	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setHeaders(headers);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setHeaders(headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setHeaders(headers);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
101	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(read);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(read);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
102	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(remainings);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(remainings);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(remainings);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
103	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)headers.next()).setMoreElements(ch);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)headers.next()).setMoreElements(ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)headers.next()).setMoreElements(ch);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
104	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(ch);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(ch);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
105	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeader    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
106	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeader    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
107	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeader  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeader  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeader	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeader    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
108	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeader    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
109	[BUG]  [BUGGY]  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getCurrentToken()));    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
110	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getCurrentToken()));    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
111	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.getCurrentToken(),  parsePaxHeaders(i.getCurrentToken()));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.getCurrentToken(),  parsePaxHeaders(i.getCurrentToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.getCurrentToken(),  parsePaxHeaders(i.getCurrentToken()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getCurrentToken()));    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
112	[BUG]  [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken())  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken())  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken())	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getCurrentToken()));    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
113	[BUG]  [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getCurrentToken()));    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
114	[BUG]  [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getCurrentToken()));    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
115	[BUG]  [BUGGY]  ||(i.hasNext()  &&  ch.hasNext()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  ch.hasNext()))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  ch.hasNext()))  {  read++;  }	  ||(i.hasNext()    &&    i.hasNext()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
116	[BUG]  [BUGGY]  ||(i.hasNext()  &&  ch.charAt(i.next())!=  '-'))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  ch.charAt(i.next())!=  '-'))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  ch.charAt(i.next())!=  '-'))  {  read++;  }	  ||(i.hasNext()    &&    i.hasNext()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
117	[BUG]  [BUGGY]  ||(i.hasNext()  &&!remainders.contains(ch)))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&!remainders.contains(ch)))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&!remainders.contains(ch)))  {  read++;  }	  ||(i.hasNext()    &&    i.hasNext()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
118	[BUG]  [BUGGY]  ||(i.hasNext()  &&  ch.next()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  ch.next()))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  ch.next()))  {  read++;  }	  ||(i.hasNext()    &&    i.hasNext()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
119	[BUG]  [BUGGY]  ||(i.hasNext()  &&  ch.charAt(i.next())!=''))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  ch.charAt(i.next())!=''))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  ch.charAt(i.next())!=''))  {  read++;  }	  ||(i.hasNext()    &&    i.hasNext()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
120	[BUG]  [BUGGY]  ||(i.hasNext()  &&  ch.endsWith( ".java ")))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  ch.endsWith( ".java ")))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  ch.endsWith( ".java ")))  {  read++;  }	  ||(i.hasNext()    &&    i.hasNext()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
121	[BUG]  [BUGGY]  if(headers  ==  null)  {  if(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers  ==  null)  {  if(headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers  ==  null)  {  if(headers.contains(ch))  {  read++;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
122	[BUG]  [BUGGY]  if(headers  ==  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers  ==  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers  ==  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
123	[BUG]  [BUGGY]  if(headers!=  null)  {  while(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  while(headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  while(headers.contains(ch))  {  read++;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
124	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!headers.containsKey(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!headers.containsKey(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!headers.containsKey(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(i.getKey()))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
125	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey()  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey()	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(i.getKey()))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
126	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.containsKey(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.containsKey(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.containsKey(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(i.getKey()))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
127	[BUG]  [BUGGY]  if(headers.containsKey(i.getKey()))  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(i.getKey()))  {  read++;  }  else  {  headers.put(i.get  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.containsKey(i.getKey()))  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(i.getKey()))  {  read++;  }  else  {  headers.put(i.get  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.containsKey(i.getKey()))  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(i.getKey()))  {  read++;  }  else  {  headers.put(i.get	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(i.getKey()))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
128	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(i.getKey()))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
129	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  read,  len);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  read,  len);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  read,  len);	  ((    TarArchiveEntry)i).setHeaders(headers,    read);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
130	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  read,  restLen);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  read,  restLen);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  read,  restLen);	  ((    TarArchiveEntry)i).setHeaders(headers,    read);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
131	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  read,  markLimit);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  read,  markLimit);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  read,  markLimit);	  ((    TarArchiveEntry)i).setHeaders(headers,    read);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
132	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  read,  ch);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  read,  ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  read,  ch);	  ((    TarArchiveEntry)i).setHeaders(headers,    read);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
133	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  ch);  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  ch);	  ((    TarArchiveEntry)i).setHeaders(headers,    read);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
134	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  len,  read);  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  len,  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  len,  read);	  ((    TarArchiveEntry)i).setHeaders(headers,    read);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
135	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  0);  [CE]  illegal  start  of  type  [FE]                                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  0);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  0);	  ((    TarArchiveEntry)i).setHeaders(headers,    read);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
136	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).addHeader(remainders,  read);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i.next()).addHeader(remainders,  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i.next()).addHeader(remainders,  read);	  ((    TarArchiveEntry)i.next()).addHeader(headers,    read);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
137	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).addHeader(headers,  read,  restLen);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i.next()).addHeader(headers,  read,  restLen);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i.next()).addHeader(headers,  read,  restLen);	  ((    TarArchiveEntry)i.next()).addHeader(headers,    read);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
138	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).addHeader(headers,  read,  len);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i.next()).addHeader(headers,  read,  len);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i.next()).addHeader(headers,  read,  len);	  ((    TarArchiveEntry)i.next()).addHeader(headers,    read);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
139	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).addHeader(headers,  read,  ch);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i.next()).addHeader(headers,  read,  ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i.next()).addHeader(headers,  read,  ch);	  ((    TarArchiveEntry)i.next()).addHeader(headers,    read);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
140	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).addHeader(headers,  ch);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i.next()).addHeader(headers,  ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i.next()).addHeader(headers,  ch);	  ((    TarArchiveEntry)i.next()).addHeader(headers,    read);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
141	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).addHeader(headers,  ch,  read);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i.next()).addHeader(headers,  ch,  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i.next()).addHeader(headers,  ch,  read);	  ((    TarArchiveEntry)i.next()).addHeader(headers,    read);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
142	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).addHeader(headers,  read,  remainderLen);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i.next()).addHeader(headers,  read,  remainderLen);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i.next()).addHeader(headers,  read,  remainderLen);	  ((    TarArchiveEntry)i.next()).addHeader(headers,    read);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
143	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValu  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValu  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValu	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
144	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
145	[BUG]  [BUGGY]  if(i.hasNext())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
146	[BUG]  [BUGGY]  if(i.hasNext())  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
147	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue())  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue())  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue())	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
148	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.get  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.get  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.get	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
149	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  if(!hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  if(!hasHitEOF)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  if(!hasHitEOF)  {  read++;  }	  if(!hasHitEOF)    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
150	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }	  if(!hasHitEOF)    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
151	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers	  if(!hasHitEOF)    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
152	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers	  if(!hasHitEOF)    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
153	[BUG]  [BUGGY]  reader++;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  reader++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	reader++;	  if(i.hasNext())    {    reader++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
154	[BUG]  [BUGGY]  readers.put(i.next(),  headers);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  readers.put(i.next(),  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	readers.put(i.next(),  headers);	  if(i.hasNext())    {    reader++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
155	[BUG]  [BUGGY]  Reader  reader++;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Reader  reader++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Reader  reader++;	  if(i.hasNext())    {    reader++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
156	[BUG]  [BUGGY]  Reader  reader  =  headers.getReader(i.next());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Reader  reader  =  headers.getReader(i.next());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Reader  reader  =  headers.getReader(i.next());	  if(i.hasNext())    {    reader++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
157	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch)&&!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch)&&!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.containsKey(ch)&&!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
158	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
159	[BUG]  [BUGGY]  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
160	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers  ==  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers  ==  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers  ==  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
161	[BUG]  [BUGGY]  if(headers.containsKey(ch))  {  if(i.hasNext())  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.containsKey(ch))  {  if(i.hasNext())  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.containsKey(ch))  {  if(i.hasNext())  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
162	[BUG]  [BUGGY]  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.next().getKeyword(),  headers.get(i.next()).toString());	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next()).toString());    }    	non-compiled	[CE]  illegal  start  of  type	194	None	replace
163	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next()).toString());    }    	non-compiled	[CE]  illegal  start  of  type	194	None	replace
164	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.getKeyword(),  headers.get(i.next()).toString());  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.getKeyword(),  headers.get(i.next()).toString());  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.getKeyword(),  headers.get(i.next()).toString());  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next()).toString());    }    	non-compiled	[CE]  illegal  start  of  type	194	None	replace
165	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString()  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString()	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next()).toString());    }    	non-compiled	[CE]  illegal  start  of  type	194	None	replace
166	[BUG]  [BUGGY]  while((  ch  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())  ==  -1)  {  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())  ==  -1)  {	  while((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
167	[BUG]  [BUGGY]  while((  read  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  read  =  i.read())!=  -1)  {  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  read  =  i.read())!=  -1)  {	  while((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
168	[BUG]  [BUGGY]  whil((  ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  whil((  ch  =  i.read())!=  -1)  {  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	whil((  ch  =  i.read())!=  -1)  {	  while((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
169	[BUG]  [BUGGY]  while((  ch  =  i.read())  >=  -1)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())  >=  -1)  {  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())  >=  -1)  {	  while((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
170	[BUG]  [BUGGY]  while((  ch  =  i.read())  >>  -1)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())  >>  -1)  {  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())  >>  -1)  {	  while((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
171	[BUG]  [BUGGY]  headers.put(i.getKey(),  parsePaxHeaders(i.nextToken()));  return  headers;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.getKey(),  parsePaxHeaders(i.nextToken()));  return  headers;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.getKey(),  parsePaxHeaders(i.nextToken()));  return  headers;	  headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
172	[BUG]  [BUGGY]  headers.put(i.getKey(),  parsePaxHeaders(i.nextToken()));  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.getKey(),  parsePaxHeaders(i.nextToken()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.getKey(),  parsePaxHeaders(i.nextToken()));	  headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
173	[BUG]  [BUGGY]  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers;	  headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
174	[BUG]  [BUGGY]  headers.put(ch,  parsePaxHeaders(i.nextToken()));  return  headers;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(ch,  parsePaxHeaders(i.nextToken()));  return  headers;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(ch,  parsePaxHeaders(i.nextToken()));  return  headers;	  headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
175	[BUG]  [BUGGY]  headers.put(i.getCurrentToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.getCurrentToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.getCurrentToken(),  parsePaxHeaders(i.nextToken()));  return  headers;	  headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
176	[BUG]  [BUGGY]  readers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  readers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	readers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;	  if(i.hasMoreTokens())    {    reader++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
177	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  Reader  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  Reader  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  Reader  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }	  if(i.hasMoreTokens())    {    reader++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
178	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers;  }	  if(i.hasMoreTokens())    {    reader++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
179	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(ch,  parsePaxHeaders(i.nextToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(ch,  parsePaxHeaders(i.nextToken()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(ch,  parsePaxHeaders(i.nextToken()));  return  headers;  }	  if(i.hasMoreTokens())    {    reader++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
180	[BUG]  [BUGGY]  while((  read  =  i.read())!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  read  =  i.read())!=  -1)  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  read  =  i.read())!=  -1)  {  read++;	  while((    ch    =    i.read())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
181	[BUG]  [BUGGY]  while((  ch  =  i.read())  ==  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())  ==  -1)  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())  ==  -1)  {  read++;	  while((    ch    =    i.read())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
182	[BUG]  [BUGGY]  whil((  ch  =  i.read())!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  whil((  ch  =  i.read())!=  -1)  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	whil((  ch  =  i.read())!=  -1)  {  read++;	  while((    ch    =    i.read())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
183	[BUG]  [BUGGY]  While((  ch  =  i.read())!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  While((  ch  =  i.read())!=  -1)  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	While((  ch  =  i.read())!=  -1)  {  read++;	  while((    ch    =    i.read())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
184	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!remainders.containsKey(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!remainders.containsKey(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!remainders.containsKey(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.containsKey(ch))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
185	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.containsKey(ch))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
186	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.containsKey(ch))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
187	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.containsKey(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.containsKey(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.containsKey(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.containsKey(ch))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
188	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!remainders.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!remainders.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!remainders.containsKey(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.containsKey(ch))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
189	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NA  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NA	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
190	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NA);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NA);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NA);	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
191	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
192	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NA,  read))  {  read++;  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NA,  read))  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NA,  read))  {  read++;	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
193	[BUG]  [BUGGY]  ||!i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||!i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||!i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
194	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NA,  true))  {  read++;  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NA,  true))  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NA,  true))  {  read++;	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
195	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    length;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	196	None	replace
196	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    length;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	196	None	replace
197	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    length;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	196	None	replace
198	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    length;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	196	None	replace
199	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    length;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	196	None	replace
200	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  ch.hasNext())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  ch.hasNext())  {  read++;  }	  if(i.hasNext()    ||    i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
201	[BUG]  [BUGGY]  ReadByteArrayOutputStream  coll  =  new  ReadByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ReadByteArrayOutputStream  coll  =  new  ReadByteArrayOutputStream();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ReadByteArrayOutputStream  coll  =  new  ReadByteArrayOutputStream();	  if(i.hasNext()    ||    i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
202	[BUG]  [BUGGY]  if(i.hasNext()  ||  i.next())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  i.next())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  i.next())  {  read++;  }	  if(i.hasNext()    ||    i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
203	[BUG]  [BUGGY]  if(i.hasNext()  ||!i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||!i.hasNext())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||!i.hasNext())  {  read++;  }	  if(i.hasNext()    ||    i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
204	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||!i.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  ||!i.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  ||!i.hasMoreElements())  {  read++;  }	  if(!i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	176	None	replace
205	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  if(!i.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  read++;  }  else  if(!i.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  read++;  }  else  if(!i.hasMoreElements())  {  read++;  }	  if(!i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	176	None	replace
206	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  read++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  read++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements())  {  read++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	176	None	replace
207	[BUG]  [BUGGY]  if(i.hasNext())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
208	[BUG]  [BUGGY]  if(i.hasNext())  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
209	[BUG]  [BUGGY]  if(i.hasNext())  {  while(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  while(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
210	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
211	[BUG]  [BUGGY]  if(i.hasNext())  {  if(!i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(!i.hasNext())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(!i.hasNext())  {  read++;  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
212	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  headers);  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
213	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
214	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
215	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
216	[BUG]  [BUGGY]  if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
217	[BUG]  [BUGGY]  if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)||!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)||!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)||!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
218	[BUG]  [BUGGY]  if(zipEncoding!=  null  &&!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(zipEncoding!=  null  &&!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(zipEncoding!=  null  &&!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
219	[BUG]  [BUGGY]  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)||!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)||!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)||!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
220	[BUG]  [BUGGY]  if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)||!zipEncoding.equals(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)||!zipEncoding.equals(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)||!zipEncoding.equals(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
221	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
222	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
223	[BUG]  [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
224	[BUG]  [BUGGY]  if(!i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
225	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
226	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
227	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.get(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.get(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.get(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
228	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
229	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
230	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
231	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  read++;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
232	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
233	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	190	None	replace
234	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	190	None	replace
235	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers  ==  null  ||  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers  ==  null  ||  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers  ==  null  ||  headers.contains(ch))  {  read++;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	190	None	replace
236	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE)&&  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE)&&  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE)&&  headers.contains(ch))  {  read++;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	190	None	replace
237	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE)||  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE)||  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE)||  headers.contains(ch))  {  read++;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	190	None	replace
238	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  while(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  while(headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  while(headers.contains(ch))  {  read++;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	190	None	replace
239	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }	  if(i.hasNext())    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
240	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers  ==  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers  ==  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers  ==  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
241	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers  ==  null  ||  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers  ==  null  ||  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers  ==  null  ||  headers.contains(ch))  {  read++;  }	  if(i.hasNext())    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
242	[BUG]  [BUGGY]  if(i.hasMoreElements()  &&  i.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  &&  i.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  &&  i.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements()    ||    i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
243	[BUG]  [BUGGY]  if(!i.hasMoreElements()  &&  i.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!i.hasMoreElements()  &&  i.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.hasMoreElements()  &&  i.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements()    ||    i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
244	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||  ch.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  ||  ch.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  ||  ch.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements()    ||    i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
245	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!headers.contains(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!headers.contains(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!headers.contains(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(i.getKey()))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
246	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey()  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey()	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(i.getKey()))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
247	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.contains(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.contains(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.contains(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(i.getKey()))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
248	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(i.getKey()))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
249	[BUG]  [BUGGY]  Reader  reader  =  headers.get(i.next());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Reader  reader  =  headers.get(i.next());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Reader  reader  =  headers.get(i.next());	  if(!i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	212	None	replace
250	[BUG]  [BUGGY]  ReadNow.writeString(headers,  i.next());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ReadNow.writeString(headers,  i.next());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ReadNow.writeString(headers,  i.next());	  if(!i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	212	None	replace
251	[BUG]  [BUGGY]  ReadNow.write(remainders,  0,  len);  read++;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ReadNow.write(remainders,  0,  len);  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ReadNow.write(remainders,  0,  len);  read++;	  if(!i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	212	None	replace
252	[BUG]  [BUGGY]  ReadNow.write(remainders,  0,  len);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ReadNow.write(remainders,  0,  len);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ReadNow.write(remainders,  0,  len);	  if(!i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	212	None	replace
253	[BUG]  [BUGGY]  InputStream  is  =  headers.getInputStream(i.getVersion());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.getInputStream(i.getVersion());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.getInputStream(i.getVersion());	  InputStream    is    =    headers.getInputStream(i.inputStream());    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
254	[BUG]  [BUGGY]  InputStream  is  =  headers.getInputStream(i.inputStream(),  read);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.getInputStream(i.inputStream(),  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.getInputStream(i.inputStream(),  read);	  InputStream    is    =    headers.getInputStream(i.inputStream());    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
255	[BUG]  [BUGGY]  InputStream  is  =  headers.getInputStream(i.getCharset());  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.getInputStream(i.getCharset());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.getInputStream(i.getCharset());	  InputStream    is    =    headers.getInputStream(i.inputStream());    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
256	[BUG]  [BUGGY]  InputStream  is  =  headers.getInputStream(i.getEncoding());  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.getInputStream(i.getEncoding());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.getInputStream(i.getEncoding());	  InputStream    is    =    headers.getInputStream(i.inputStream());    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
257	[BUG]  [BUGGY]  InputStream  is  =  headers.getInputStream(i.getAverageCharset());  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.getInputStream(i.getAverageCharset());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.getInputStream(i.getAverageCharset());	  InputStream    is    =    headers.getInputStream(i.inputStream());    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
258	[BUG]  [BUGGY]  InputStream  is  =  headers.getInputStream(i.getRawClass());  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.getInputStream(i.getRawClass());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.getInputStream(i.getRawClass());	  InputStream    is    =    headers.getInputStream(i.inputStream());    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
259	[BUG]  [BUGGY]  InputStream  is  =  i.getInputStream(headers.inputStream());  [CE]  illegal  start  of  type  [FE]                                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  i.getInputStream(headers.inputStream());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  i.getInputStream(headers.inputStream());	  InputStream    is    =    headers.getInputStream(i.inputStream());    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
260	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.get(i.getKey())!=  null)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.get(i.getKey())!=  null)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.get(i.getKey())!=  null)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    headers.get(i.getKey())!=    null)    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
261	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKey())!=  null)  {  read++;  }  else  {  headers.put(i.getKey()  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKey())!=  null)  {  read++;  }  else  {  headers.put(i.getKey()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKey())!=  null)  {  read++;  }  else  {  headers.put(i.getKey()	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    headers.get(i.getKey())!=    null)    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
262	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKey())!=  null)  {  read++;  }  else  {  headers.put(i.getKey()  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKey())!=  null)  {  read++;  }  else  {  headers.put(i.getKey()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKey())!=  null)  {  read++;  }  else  {  headers.put(i.getKey()	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    headers.get(i.getKey())!=    null)    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
263	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKey())!=  null)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKey())!=  null)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKey())!=  null)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    headers.get(i.getKey())!=    null)    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
264	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.containsKey(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
265	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
266	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.containsKey(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
267	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
268	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.containsKey(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
269	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers  ==  null  ||  headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers  ==  null  ||  headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers  ==  null  ||  headers.containsKey(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
270	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
271	[BUG]  [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
272	[BUG]  [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
273	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.get(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
274	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.get(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
275	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.get(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
276	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.get(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
277	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.get(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
278	[BUG]  [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.get(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
279	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parse  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parse  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parse	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parse    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
280	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parse  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parse  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parse	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parse    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
281	[BUG]  [BUGGY]  headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null    ||    headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
282	[BUG]  [BUGGY]  headers!=  null  &&  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers!=  null  &&  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers!=  null  &&  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null    ||    headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
283	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null    ||    headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
284	[BUG]  [BUGGY]  headers  ==  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers  ==  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers  ==  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null    ||    headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
285	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null  &&  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null  &&  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null    ||    headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
286	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r')  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r')  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch!=  'n'  ||  ch  ==  'r')  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null    ||    headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
287	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
288	[BUG]  [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
289	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
290	[BUG]  [BUGGY]  if(ch.hasNext()  ||  ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch.hasNext()  ||  ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch.hasNext()  ||  ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	210	None	replace
291	[BUG]  [BUGGY]  ||  ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	210	None	replace
292	[BUG]  [BUGGY]  (i.hasNext()  ||  ch  ==  'n'  ||  ch  ==  'r'))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  (i.hasNext()  ||  ch  ==  'n'  ||  ch  ==  'r'))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	(i.hasNext()  ||  ch  ==  'n'  ||  ch  ==  'r'))  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	210	None	replace
293	[BUG]  [BUGGY]  (i.hasNext()  &&  ch  ==  'n'  ||  ch  ==  'r'))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  (i.hasNext()  &&  ch  ==  'n'  ||  ch  ==  'r'))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	(i.hasNext()  &&  ch  ==  'n'  ||  ch  ==  'r'))  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	210	None	replace
294	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch!=  'n'  ||  ch  ==  'r')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  ch!=  'n'  ||  ch  ==  'r')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  ch!=  'n'  ||  ch  ==  'r')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	210	None	replace
295	[BUG]  [BUGGY]  while(i.hasNext()  &&  ch  ==  'n'  ||  ch  ==  'r')  {  read++;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(i.hasNext()  &&  ch  ==  'n'  ||  ch  ==  'r')  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while(i.hasNext()  &&  ch  ==  'n'  ||  ch  ==  'r')  {  read++;	  if(i.hasNext()    ||    ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	210	None	replace
296	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
297	[BUG]  [BUGGY]  if(headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.containsKey(ch))  {  read++;  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
298	[BUG]  [BUGGY]  if(i.hasNext())  {  while(headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  while(headers.containsKey(ch))  {  read++;  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
299	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch)&&!headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch)&&!headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.containsKey(ch)&&!headers.containsKey(ch))  {  read++;  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
300	[BUG]  [BUGGY]  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
301	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
302	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
303	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
304	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
305	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
306	[BUG]  [BUGGY]  ||!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
307	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
308	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
309	[BUG]  [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
310	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
311	[BUG]  [BUGGY]  if(i.isEmpty())  {  if(headers  ==  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEmpty())  {  if(headers  ==  null)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEmpty())  {  if(headers  ==  null)  {  read++;  }	  if(headers    ==    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
312	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.contains(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers    ==    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
313	[BUG]  [BUGGY]  ((  read  =  i.read())!=  -1)?  read++  :  i.next();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  read  =  i.read())!=  -1)?  read++  :  i.next();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  read  =  i.read())!=  -1)?  read++  :  i.next();	  ((    ch    =    i.read())!=    -1)?    read++    :    i.next();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
314	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getCurrentName();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getCurrentName();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)?  read++  :  i.getCurrentName();	  ((    ch    =    i.read())!=    -1)?    read++    :    i.next();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
315	[BUG]  [BUGGY]  if(i.hasNext()  <  len)  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  <  len)  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  <  len)  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  if(i.hasNext()    ||    i.hasNext())    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
316	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
317	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
318	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
319	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NA);  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NA);  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NA);  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
320	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
321	[BUG]  [BUGGY]  if(i.hasNext())  {  if(isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
322	[BUG]  [BUGGY]  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }	  if(i.hasMoreTokens())    {    while(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
323	[BUG]  [BUGGY]  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));	  if(i.hasMoreTokens())    {    while(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
324	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  while(i.hasMoreTokens())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  while(i.hasMoreTokens())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  while(i.hasMoreTokens())  {  read++;  }	  if(i.hasMoreTokens())    {    while(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
325	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  while(!i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  while(!i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  while(!i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }	  if(i.hasMoreTokens())    {    while(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
326	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken())  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken())  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken())	  if(i.hasMoreTokens())    {    while(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
327	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
328	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
329	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey())  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey())  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey())	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
330	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.get  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.get  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.get	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
331	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
332	[BUG]  [BUGGY]  ||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
333	[BUG]  [BUGGY]  ||  headers.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  headers.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  headers.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
334	[BUG]  [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
335	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.get(ch)-  1);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.get(ch)-  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.get(ch)-  1);  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
336	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.size()  >  read)  {  read++;  }  else  {  headers.put(0,  headers.get(ch)-  1);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.size()  >  read)  {  read++;  }  else  {  headers.put(0,  headers.get(ch)-  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.size()  >  read)  {  read++;  }  else  {  headers.put(0,  headers.get(ch)-  1);  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
337	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read  <  headers.size())  {  read++;  }  else  {  headers.put(0,  headers.get(ch)-  1);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read  <  headers.size())  {  read++;  }  else  {  headers.put(0,  headers.get(ch)-  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read  <  headers.size())  {  read++;  }  else  {  headers.put(0,  headers.get(ch)-  1);  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
338	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.hasNext())    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
339	[BUG]  [BUGGY]  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.hasNext())    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
340	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.hasNext())    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
341	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers  ==  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers  ==  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers  ==  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.hasNext())    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
342	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.contains(ch)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.hasNext())    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
343	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
344	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
345	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
346	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValu  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValu  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValu	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
347	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue())  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue())  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue())	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
348	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.get(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.get(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.get(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	186	None	replace
349	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	186	None	replace
350	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	186	None	replace
351	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	186	None	replace
352	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	186	None	replace
353	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
354	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
355	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
356	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
357	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
358	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
359	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
360	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||!i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||!i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||!i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
361	[BUG]  [BUGGY]  headers.put(i.getCurrentToken(),  parsePaxHeaders(i.nextToken()));  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.getCurrentToken(),  parsePaxHeaders(i.nextToken()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.getCurrentToken(),  parsePaxHeaders(i.nextToken()));	  headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
362	[BUG]  [BUGGY]  headers.put(i.nextToken(),  parsePaxHeaders(i.getMessage()));  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.nextToken(),  parsePaxHeaders(i.getMessage()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.nextToken(),  parsePaxHeaders(i.getMessage()));	  headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
363	[BUG]  [BUGGY]  headers.put(i.nextToken(),  parsePaxHeaders(i.getSourceName()));  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.nextToken(),  parsePaxHeaders(i.getSourceName()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.nextToken(),  parsePaxHeaders(i.getSourceName()));	  headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
364	[BUG]  [BUGGY]  headers.put(i.getSourceName(),  parsePaxHeaders(i.nextToken()));  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.getSourceName(),  parsePaxHeaders(i.nextToken()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.getSourceName(),  parsePaxHeaders(i.nextToken()));	  headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
365	[BUG]  [BUGGY]  headers.put(i.getText(),  parsePaxHeaders(i.nextToken()));  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.getText(),  parsePaxHeaders(i.nextToken()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.getText(),  parsePaxHeaders(i.nextToken()));	  headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
366	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
367	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
368	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
369	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
370	[BUG]  [BUGGY]  if(i.hasNext())  {  if(!hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(!hasHitEOF)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(!hasHitEOF)  {  read++;  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
371	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.get(ch)-  1);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.get(ch)-  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.get(ch)-  1);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
372	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
373	[BUG]  [BUGGY]  readers.put(i.nextElement(),  headers);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  readers.put(i.nextElement(),  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	readers.put(i.nextElement(),  headers);	  if(i.hasMoreElements())    {    reader++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
374	[BUG]  [BUGGY]  read  =  i.nextElement();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  i.nextElement();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  i.nextElement();	  if(i.hasMoreElements())    {    reader++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
375	[BUG]  [BUGGY]  Reader  <  K,  V>  reader  =  headers.get(i.nextElement());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Reader  <  K,  V>  reader  =  headers.get(i.nextElement());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Reader  <  K,  V>  reader  =  headers.get(i.nextElement());	  if(i.hasMoreElements())    {    reader++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
376	[BUG]  [BUGGY]  read  =  i.hasMoreElements();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  i.hasMoreElements();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  i.hasMoreElements();	  if(i.hasMoreElements())    {    reader++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
377	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
378	[BUG]  [BUGGY]  InputStream  is  =  headers.get(i.size()  -  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.get(i.size()  -  1);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.get(i.size()  -  1);	  InputStream    is    =    headers.get(headers.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
379	[BUG]  [BUGGY]  InputStream  is  =  headers.get(i.size());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.get(i.size());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.get(i.size());	  InputStream    is    =    headers.get(headers.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
380	[BUG]  [BUGGY]  InputStream  is  =  headers.get(headers.size());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.get(headers.size());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.get(headers.size());	  InputStream    is    =    headers.get(headers.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
381	[BUG]  [BUGGY]  InputStream  is  =  headers.get(i.headers.size()  -  1);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.get(i.headers.size()  -  1);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.get(i.headers.size()  -  1);	  InputStream    is    =    headers.get(headers.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
382	[BUG]  [BUGGY]  InputStream  is  =  headers.get(i.headers.size());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.get(i.headers.size());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.get(i.headers.size());	  InputStream    is    =    headers.get(headers.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
383	[BUG]  [BUGGY]  InputStream  is  =  headers.get(i.recordSize());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.get(i.recordSize());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.get(i.recordSize());	  InputStream    is    =    headers.get(headers.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
384	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
385	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getVal  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getVal  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getVal	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
386	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValu  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValu  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValu	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
387	[BUG]  [BUGGY]  if(i.hasMoreElements()  &&  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  &&  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  &&  headers.contains(ch))  {  read++;  }	  if(i.hasMoreElements()    ||    headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
388	[BUG]  [BUGGY]  if(headers.contains(ch)||  i.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.contains(ch)||  i.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.contains(ch)||  i.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements()    ||    headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
389	[BUG]  [BUGGY]  if(headers.contains(ch)||  headers.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.contains(ch)||  headers.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.contains(ch)||  headers.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements()    ||    headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
390	[BUG]  [BUGGY]  if(headers.contains(ch)||  i.hasMoreElements()  ||  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.contains(ch)||  i.hasMoreElements()  ||  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.contains(ch)||  i.hasMoreElements()  ||  headers.contains(ch))  {  read++;  }	  if(i.hasMoreElements()    ||    headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
391	[BUG]  [BUGGY]  if(!headers.contains(ch)||  headers.hasMoreElements()  ||  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!headers.contains(ch)||  headers.hasMoreElements()  ||  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!headers.contains(ch)||  headers.hasMoreElements()  ||  headers.contains(ch))  {  read++;  }	  if(i.hasMoreElements()    ||    headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
392	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
393	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
394	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
395	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
396	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||!i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||!i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||!i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
397	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
398	[BUG]  [BUGGY]  if(i.hasNext())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
399	[BUG]  [BUGGY]  ||!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
400	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
401	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
402	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
403	[BUG]  [BUGGY]  if(i.hasMoreTokens()  ||  i.hasMoreTokens())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens()  ||  i.hasMoreTokens())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens()  ||  i.hasMoreTokens())  {  read++;  }	  if(i.hasMoreTokens())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
404	[BUG]  [BUGGY]  if(i.hasMoreTokens()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.hasMoreTokens())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
405	[BUG]  [BUGGY]  if(i.hasMoreTokens()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }	  if(i.hasMoreTokens())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
406	[BUG]  [BUGGY]  if(!i.hasMoreTokens())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!i.hasMoreTokens())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.hasMoreTokens())  {  read++;  }	  if(i.hasMoreTokens())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
407	[BUG]  [BUGGY]  if(i.hasMoreTokens()  ||!i.hasMoreTokens())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens()  ||!i.hasMoreTokens())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens()  ||!i.hasMoreTokens())  {  read++;  }	  if(i.hasMoreTokens())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
408	[BUG]  [BUGGY]  if(i.hasMoreElements()  &&  headers.size()  ==  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  &&  headers.size()  ==  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  &&  headers.size()  ==  0)  {  read++;  }	  if(i.hasMoreElements()    ||    headers.size()    ==    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
409	[BUG]  [BUGGY]  if(headers.size()  ==  0  ||  i.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.size()  ==  0  ||  i.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.size()  ==  0  ||  i.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements()    ||    headers.size()    ==    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
410	[BUG]  [BUGGY]  if(headers.size()  ==  0  ||  headers.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.size()  ==  0  ||  headers.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.size()  ==  0  ||  headers.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements()    ||    headers.size()    ==    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
411	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||  headers.size()!=  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  ||  headers.size()!=  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  ||  headers.size()!=  0)  {  read++;  }	  if(i.hasMoreElements()    ||    headers.size()    ==    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
412	[BUG]  [BUGGY]  ||(i.hasNext()  ==  len)&&  i.next()  ==  headers.length)  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  ==  len)&&  i.next()  ==  headers.length)  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  ==  len)&&  i.next()  ==  headers.length)  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  ||(i.hasNext()    &&    i.next()    ==    headers.length))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
413	[BUG]  [BUGGY]  ||(i.hasNext()!=  len)&&  i.next()  ==  headers.length)  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()!=  len)&&  i.next()  ==  headers.length)  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()!=  len)&&  i.next()  ==  headers.length)  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  ||(i.hasNext()    &&    i.next()    ==    headers.length))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
414	[BUG]  [BUGGY]  ||(i.hasNext()  >>  len)&&  i.next()  ==  headers.length)  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  >>  len)&&  i.next()  ==  headers.length)  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  >>  len)&&  i.next()  ==  headers.length)  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  ||(i.hasNext()    &&    i.next()    ==    headers.length))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
415	[BUG]  [BUGGY]  ||(i.hasNext()!=  headers.length))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()!=  headers.length))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()!=  headers.length))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  ||(i.hasNext()    &&    i.next()    ==    headers.length))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
416	[BUG]  [BUGGY]  ||(i.hasNext()  [Delete]  headers.length))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  [Delete]  headers.length))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  [Delete]  headers.length))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  ||(i.hasNext()    &&    i.next()    ==    headers.length))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
417	[BUG]  [BUGGY]  ||(i.hasNext()  ==  headers.length))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  ==  headers.length))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  ==  headers.length))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  ||(i.hasNext()    &&    i.next()    ==    headers.length))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
418	[BUG]  [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;	  ||(i.hasMoreTokens()    &&    i.hasMoreTokens()))    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
419	[BUG]  [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.n  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.n  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.n	  ||(i.hasMoreTokens()    &&    i.hasMoreTokens()))    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
420	[BUG]  [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.	  ||(i.hasMoreTokens()    &&    i.hasMoreTokens()))    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
421	[BUG]  [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  header  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  header  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  header	  ||(i.hasMoreTokens()    &&    i.hasMoreTokens()))    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
422	[BUG]  [BUGGY]  if(i.hasNext())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
423	[BUG]  [BUGGY]  ||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
424	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
425	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
426	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
427	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  }	  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
428	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }	  if(!hasHitEOF)    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
429	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getParent()));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getParent()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getParent()));  }	  if(!hasHitEOF)    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
430	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(ch,  parsePaxHeaders(i.nextToken()));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(ch,  parsePaxHeaders(i.nextToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(ch,  parsePaxHeaders(i.nextToken()));  }	  if(!hasHitEOF)    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
431	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
432	[BUG]  [BUGGY]  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
433	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch)&&!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch)&&!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.containsKey(ch)&&!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
434	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers  ==  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers  ==  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers  ==  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
435	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
436	[BUG]  [BUGGY]  headers.put(i.nextToken(),  parsePaxHeaders(i.getRead()));  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.nextToken(),  parsePaxHeaders(i.getRead()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.nextToken(),  parsePaxHeaders(i.getRead()));	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getRead()));    }    	non-compiled	[CE]  illegal  start  of  type	202	None	replace
437	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getRead()));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getRead()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getRead()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getRead()));    }    	non-compiled	[CE]  illegal  start  of  type	202	None	replace
438	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.getToken(),  parsePaxHeaders(i.getRead()));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.getToken(),  parsePaxHeaders(i.getRead()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.getToken(),  parsePaxHeaders(i.getRead()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getRead()));    }    	non-compiled	[CE]  illegal  start  of  type	202	None	replace
439	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getRead()));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getRead()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getRead()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getRead()));    }    	non-compiled	[CE]  illegal  start  of  type	202	None	replace
440	[BUG]  [BUGGY]  headers.put(i.getToken(),  parsePaxHeaders(i.getRead()));  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.getToken(),  parsePaxHeaders(i.getRead()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.getToken(),  parsePaxHeaders(i.getRead()));	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getRead()));    }    	non-compiled	[CE]  illegal  start  of  type	202	None	replace
441	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.getToken(),  parsePaxHeaders(i.getRead()));  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.getToken(),  parsePaxHeaders(i.getRead()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.getToken(),  parsePaxHeaders(i.getRead()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getRead()));    }    	non-compiled	[CE]  illegal  start  of  type	202	None	replace
442	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	203	None	replace
443	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	203	None	replace
444	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	203	None	replace
445	[BUG]  [BUGGY]  read  =  headers.read();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  headers.read();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  headers.read();	  read    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
446	[BUG]  [BUGGY]  read  =  i.read(headers);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  i.read(headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  i.read(headers);	  read    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
447	[BUG]  [BUGGY]  read  =  i.read(ch);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  i.read(ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  i.read(ch);	  read    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
448	[BUG]  [BUGGY]  read  =  headers.read(i);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  headers.read(i);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  headers.read(i);	  read    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
449	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
450	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
451	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.get(ch)  ==  read++)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.get(ch)  ==  read++)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.get(ch)  ==  read++)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
452	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_FIRST))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_FIRST))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_FIRST))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_FIRST))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
453	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_FIRST)||  i.isEnabled(Feature.QUOTE_FIELD_FIRST))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_FIRST)||  i.isEnabled(Feature.QUOTE_FIELD_FIRST))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_FIRST)||  i.isEnabled(Feature.QUOTE_FIELD_FIRST))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_FIRST))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
454	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_FIRST)||!i.isEnabled(Feature.QUOTE_FIELD_FIRST))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_FIRST)||!i.isEnabled(Feature.QUOTE_FIELD_FIRST))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_FIRST)||!i.isEnabled(Feature.QUOTE_FIELD_FIRST))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_FIRST))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
455	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_FIRST)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_FIRST)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_FIRST)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_FIRST))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
456	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_FIRST))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_FIRST))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_FIRST))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_FIRST))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
457	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_FIRST)&&  i.isEnabled(Feature.QUOTE_FIELD_FIRST))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_FIRST)&&  i.isEnabled(Feature.QUOTE_FIELD_FIRST))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_FIRST)&&  i.isEnabled(Feature.QUOTE_FIELD_FIRST))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_FIRST))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
458	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }	  if(i.hasNextToken())    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	198	None	replace
459	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers	  if(i.hasNextToken())    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	198	None	replace
460	[BUG]  [BUGGY]  if(i.hasNextToken())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNextToken())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNextToken())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers	  if(i.hasNextToken())    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	198	None	replace
461	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return	  if(i.hasNextToken())    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	198	None	replace
462	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    while(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
463	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }	  if(headers!=    null)    {    while(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
464	[BUG]  [BUGGY]  if(ch!=  'n')  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch!=  'n')  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch!=  'n')  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }	  if(headers!=    null)    {    while(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
465	[BUG]  [BUGGY]  if(i.hasNext())  {  while(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  while(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    while(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
466	[BUG]  [BUGGY]  if(ch!=  'n')  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch!=  'n')  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch!=  'n')  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    while(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
467	[BUG]  [BUGGY]  if(i.read()  ==  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()  ==  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()  ==  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	188	None	replace
468	[BUG]  [BUGGY]  if(i.isEmpty())  {  if(i.read()  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEmpty())  {  if(i.read()  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEmpty())  {  if(i.read()  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	188	None	replace
469	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.read()  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.read()  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.read()  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	188	None	replace
470	[BUG]  [BUGGY]  if(i.isEmpty())  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEmpty())  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEmpty())  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	188	None	replace
471	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.read()  >  -1)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.read()  >  -1)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.read()  >  -1)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	188	None	replace
472	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.read()  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.read()  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.read()  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	188	None	replace
473	[BUG]  [BUGGY]  if(i.hasNext())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
474	[BUG]  [BUGGY]  if(i.hasNext())  {  while(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  while(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
475	[BUG]  [BUGGY]  if(i.hasNext())  {  while(!i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(!i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  while(!i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
476	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
477	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
478	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
479	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
480	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
481	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty()))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty()))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty()))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES    ||    ch.isEmpty()))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
482	[BUG]  [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty()))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty()))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty()))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES    ||    ch.isEmpty()))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
483	[BUG]  [BUGGY]  if(!i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty()))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty()))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty()))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES    ||    ch.isEmpty()))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
484	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch.isEmpty())  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch.isEmpty())  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch.isEmpty())  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES    ||    ch.isEmpty()))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
485	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty()))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty()))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty()))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES    ||    ch.isEmpty()))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
486	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty())&&  headers.size()  >  0)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty())&&  headers.size()  >  0)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty())&&  headers.size()  >  0)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES    ||    ch.isEmpty()))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
487	[BUG]  [BUGGY]  if(i.hasNext())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
488	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
489	[BUG]  [BUGGY]  if(i.hasNext())  {  headers.put(i.nextElement(),  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  headers.put(i.nextElement(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  headers.put(i.nextElement(),  headers);  }	  if(i.hasNext())    {    headers.put(i.nextElement(),    headers);    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
490	[BUG]  [BUGGY]  if(i.hasNext())  {  headers.put(i.nextElement(),  read);  }  else  {  headers.put(i.nextElement(),  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  headers.put(i.nextElement(),  read);  }  else  {  headers.put(i.nextElement(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  headers.put(i.nextElement(),  read);  }  else  {  headers.put(i.nextElement(),  headers);  }	  if(i.hasNext())    {    headers.put(i.nextElement(),    headers);    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
491	[BUG]  [BUGGY]  if(i.hasNext())  {  headers.put(i.nextElement(),  len);  }  else  {  headers.put(i.nextElement(),  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  headers.put(i.nextElement(),  len);  }  else  {  headers.put(i.nextElement(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  headers.put(i.nextElement(),  len);  }  else  {  headers.put(i.nextElement(),  headers);  }	  if(i.hasNext())    {    headers.put(i.nextElement(),    headers);    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
492	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
493	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
494	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
495	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
496	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
497	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
498	[BUG]  [BUGGY]  if(i.hasNext())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
499	[BUG]  [BUGGY]  headers.put(i.getCurrentElement(),  headers);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.getCurrentElement(),  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.getCurrentElement(),  headers);	  if(i.hasMoreElements())    {    read++;    }    else    {    headers.put(i.getCurrentElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
500	[BUG]  [BUGGY]  Headers.put(i.getCurrentElement(),  headers);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(i.getCurrentElement(),  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(i.getCurrentElement(),  headers);	  if(i.hasMoreElements())    {    read++;    }    else    {    headers.put(i.getCurrentElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
501	[BUG]  [BUGGY]  ||  headers.contains(i.getCurrentElement()))  {  read++;  }  else  {  headers.put(i.getCurrentElement(),  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  headers.contains(i.getCurrentElement()))  {  read++;  }  else  {  headers.put(i.getCurrentElement(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  headers.contains(i.getCurrentElement()))  {  read++;  }  else  {  headers.put(i.getCurrentElement(),  headers);  }	  if(i.hasMoreElements())    {    read++;    }    else    {    headers.put(i.getCurrentElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
502	[BUG]  [BUGGY]  ||  headers.contains(i.getCurrentElement()))  {  read++;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  headers.contains(i.getCurrentElement()))  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  headers.contains(i.getCurrentElement()))  {  read++;	  if(i.hasMoreElements())    {    read++;    }    else    {    headers.put(i.getCurrentElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
503	[BUG]  [BUGGY]  ((  ch  =  i.read())  >>  -1))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())  >>  -1))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())  >>  -1))  {  read++;  }	  ((    ch    =    i.read())!=    -1))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
504	[BUG]  [BUGGY]  ((  ch  =  i.read())  >=  -1))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())  >=  -1))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())  >=  -1))  {  read++;  }	  ((    ch    =    i.read())!=    -1))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
505	[BUG]  [BUGGY]  ((  ch  =  i.read())  ==  -1))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())  ==  -1))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())  ==  -1))  {  read++;  }	  ((    ch    =    i.read())!=    -1))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
506	[BUG]  [BUGGY]  ((  read  =  i.read())!=  -1))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  read  =  i.read())!=  -1))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  read  =  i.read())!=  -1))  {  read++;  }	  ((    ch    =    i.read())!=    -1))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
507	[BUG]  [BUGGY]  lungul(i.read())!=  -1)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  lungul(i.read())!=  -1)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	lungul(i.read())!=  -1)  {  read++;  }	  ((    ch    =    i.read())!=    -1))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
508	[BUG]  [BUGGY]  (7  *  i.read())!=  -1)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  (7  *  i.read())!=  -1)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	(7  *  i.read())!=  -1)  {  read++;  }	  ((    ch    =    i.read())!=    -1))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
509	[BUG]  [BUGGY]  ||  headers.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  headers.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  headers.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
510	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read  <  headers.size())  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read  <  headers.size())  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read  <  headers.size())  {  read++;  }  else  {  headers.put(ch,  headers);  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
511	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(ch).length()!=  0)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(ch).length()!=  0)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(ch).length()!=  0)  {  read++;  }  else  {  headers.put(ch,  headers);  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
512	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(ch).length()  ==  0)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(ch).length()  ==  0)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(ch).length()  ==  0)  {  read++;  }  else  {  headers.put(ch,  headers);  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
513	[BUG]  [BUGGY]  int  read  =  headers.read();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  int  read  =  headers.read();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	int  read  =  headers.read();	  int    read    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
514	[BUG]  [BUGGY]  int  read  =  i.read(headers);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  int  read  =  i.read(headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	int  read  =  i.read(headers);	  int    read    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
515	[BUG]  [BUGGY]  int  read  =  headers.read(i);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  int  read  =  headers.read(i);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	int  read  =  headers.read(i);	  int    read    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
516	[BUG]  [BUGGY]  int  read  =  i.read(ch);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  int  read  =  i.read(ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	int  read  =  i.read(ch);	  int    read    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
517	[BUG]  [BUGGY]  char  read  =  i.read();  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  char  read  =  i.read();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	char  read  =  i.read();	  int    read    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
518	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }	  if(headers.contains(ch)||    headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
519	[BUG]  [BUGGY]  if(headers.contains(ch)&&  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.contains(ch)&&  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.contains(ch)&&  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.contains(ch)||    headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
520	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch)&&  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch)&&  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.contains(ch)&&  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.contains(ch)||    headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
521	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch)||  headers.contains(ch))  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch)||  headers.contains(ch))  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.contains(ch)||  headers.contains(ch))  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.contains(ch)||    headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
522	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  returned  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  returned  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  returned  headers;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    returned    headers;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
523	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  returned  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  returned  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  returned  headers;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    returned    headers;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
524	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
525	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
526	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
527	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
528	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
529	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.get(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.get(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.get(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
530	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch)&&!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch)&&!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch)&&!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
531	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.get(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
532	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.get(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
533	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.get(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
534	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.get(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
535	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.get(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
536	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.get(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
537	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
538	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
539	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE	  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
540	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
541	[BUG]  [BUGGY]  if(i.hasMoreElements()  &&  hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  &&  hasHitEOF)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  &&  hasHitEOF)  {  read++;  }	  if(i.hasMoreElements()    ||    hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
542	[BUG]  [BUGGY]  (i.hasMoreElements()  ||  hasHitEOF))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  (i.hasMoreElements()  ||  hasHitEOF))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	(i.hasMoreElements()  ||  hasHitEOF))  {  read++;  }	  if(i.hasMoreElements()    ||    hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
543	[BUG]  [BUGGY]  (i.hasMoreElements()  &&  hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  (i.hasMoreElements()  &&  hasHitEOF)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	(i.hasMoreElements()  &&  hasHitEOF)  {  read++;  }	  if(i.hasMoreElements()    ||    hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
544	[BUG]  [BUGGY]  if(!i.hasMoreElements()  ||  hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!i.hasMoreElements()  ||  hasHitEOF)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.hasMoreElements()  ||  hasHitEOF)  {  read++;  }	  if(i.hasMoreElements()    ||    hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
545	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.contains(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
546	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.contains(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
547	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
548	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
549	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers  ==  null  ||  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers  ==  null  ||  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers  ==  null  ||  headers.contains(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
550	[BUG]  [BUGGY]  if(headers.contains(ch)||  headers.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.contains(ch)||  headers.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.contains(ch)||  headers.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
551	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
552	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
553	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
554	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
555	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
556	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||!i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||!i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||!i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
557	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
558	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseStr  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseStr  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseStr	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseStr    	non-compiled	[CE]  illegal  start  of  type	209	None	replace
559	[BUG]  [BUGGY]  if(i.hasKey())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasKey())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasKey())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseStr    	non-compiled	[CE]  illegal  start  of  type	209	None	replace
560	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  if(i.hasNextToken())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  if(i.hasNextToken())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  if(i.hasNextToken())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }	  if(i.hasMoreTokens()    ||    i.hasNextToken())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	200	None	replace
561	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens()  ||  i.hasNextToken())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens()  ||  i.hasNextToken())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.hasMoreTokens()  ||  i.hasNextToken())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }	  if(i.hasMoreTokens()    ||    i.hasNextToken())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	200	None	replace
562	[BUG]  [BUGGY]  if(i.hasNextToken())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNextToken())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNextToken())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }	  if(i.hasMoreTokens()    ||    i.hasNextToken())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	200	None	replace
563	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens()  ||  i.hasNextToken())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.n  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens()  ||  i.hasNextToken())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.n  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.hasMoreTokens()  ||  i.hasNextToken())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.n	  if(i.hasMoreTokens()    ||    i.hasNextToken())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	200	None	replace
564	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
565	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
566	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
567	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
568	[BUG]  [BUGGY]  if(i.hasMoreElements()  &&(ch  ==  '-'  ||  i.hasMoreElements()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  &&(ch  ==  '-'  ||  i.hasMoreElements()))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  &&(ch  ==  '-'  ||  i.hasMoreElements()))  {  read++;  }	  if(i.hasMoreElements()    ||    (ch    ==    '-'    &&    i.hasMoreElements()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
569	[BUG]  [BUGGY]  if(i.hasMoreElements()  &&  (ch  ==  '-'  &&  i.hasMoreElements()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  &&  (ch  ==  '-'  &&  i.hasMoreElements()))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  &&  (ch  ==  '-'  &&  i.hasMoreElements()))  {  read++;  }	  if(i.hasMoreElements()    ||    (ch    ==    '-'    &&    i.hasMoreElements()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
570	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||  (ch  ==  '-'  &&  i.nextElement()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  ||  (ch  ==  '-'  &&  i.nextElement()))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  ||  (ch  ==  '-'  &&  i.nextElement()))  {  read++;  }	  if(i.hasMoreElements()    ||    (ch    ==    '-'    &&    i.hasMoreElements()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
571	[BUG]  [BUGGY]  (i.hasMoreElements()  ||  ch  ==  '-'  &&  i.hasMoreElements()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  (i.hasMoreElements()  ||  ch  ==  '-'  &&  i.hasMoreElements()))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	(i.hasMoreElements()  ||  ch  ==  '-'  &&  i.hasMoreElements()))  {  read++;  }	  if(i.hasMoreElements()    ||    (ch    ==    '-'    &&    i.hasMoreElements()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
572	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).setMoreElements(remainders);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i.next()).setMoreElements(remainders);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i.next()).setMoreElements(remainders);	  ((    TarArchiveEntry)i.next()).setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
573	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).setMoreElements(headers,  read);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i.next()).setMoreElements(headers,  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i.next()).setMoreElements(headers,  read);	  ((    TarArchiveEntry)i.next()).setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
574	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).setMoreElements(read);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i.next()).setMoreElements(read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i.next()).setMoreElements(read);	  ((    TarArchiveEntry)i.next()).setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
575	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).setMoreElements(read,  headers);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i.next()).setMoreElements(read,  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i.next()).setMoreElements(read,  headers);	  ((    TarArchiveEntry)i.next()).setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
576	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).setHeaders(headers);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i.next()).setHeaders(headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i.next()).setHeaders(headers);	  ((    TarArchiveEntry)i.next()).setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
577	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).setMoreElements(remainings);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i.next()).setMoreElements(remainings);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i.next()).setMoreElements(remainings);	  ((    TarArchiveEntry)i.next()).setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
578	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).setMoreElements(remainders,  len);  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i.next()).setMoreElements(remainders,  len);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i.next()).setMoreElements(remainders,  len);	  ((    TarArchiveEntry)i.next()).setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
579	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
580	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(remainders);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(remainders);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(remainders);	  ((    TarArchiveEntry)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
581	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(remainders,  len);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(remainders,  len);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(remainders,  len);	  ((    TarArchiveEntry)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
582	[BUG]  [BUGGY]  (TarArchiveEntry)i).setHeaders(headers,  read);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  (TarArchiveEntry)i).setHeaders(headers,  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	(TarArchiveEntry)i).setHeaders(headers,  read);	  ((    TarArchiveEntry)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
583	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
584	[BUG]  [BUGGY]  ch  =  i.read(remainders);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ch  =  i.read(remainders);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ch  =  i.read(remainders);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
585	[BUG]  [BUGGY]  ch  =  i.read(headers);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ch  =  i.read(headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ch  =  i.read(headers);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
586	[BUG]  [BUGGY]  ch  =  headers.read();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ch  =  headers.read();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ch  =  headers.read();	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
587	[BUG]  [BUGGY]  ch  =  i.readFully();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ch  =  i.readFully();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ch  =  i.readFully();	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
588	[BUG]  [BUGGY]  ch  =  i.in.read();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ch  =  i.in.read();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ch  =  i.in.read();	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
589	[BUG]  [BUGGY]  ch  =  i.readInt();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ch  =  i.readInt();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ch  =  i.readInt();	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
590	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!remainders.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!remainders.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!remainders.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
591	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
592	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
593	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
594	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next(),    headers.get(i.next()));    }    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
595	[BUG]  [BUGGY]  headers.put(i.next(),  headers.get(i.next()));  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.next(),  headers.get(i.next()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.next(),  headers.get(i.next()));	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next(),    headers.get(i.next()));    }    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
596	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next())  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next())  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next())	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next(),    headers.get(i.next()));    }    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
597	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next(),    headers.get(i.next()));    }    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
598	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next(),    headers.get(i.next()));    }    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
599	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  [CE]  illegal  start  of  type  [FE]                                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next(),    headers.get(i.next()));    }    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
600	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
601	[BUG]  [BUGGY]  InputStream  is  =  i.readInt();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  i.readInt();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  i.readInt();	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
602	[BUG]  [BUGGY]  InputStream  is  =  headers.readUTF();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.readUTF();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.readUTF();	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
603	[BUG]  [BUGGY]  InputStream  is  =  headers.readFully(i);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.readFully(i);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.readFully(i);	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
604	[BUG]  [BUGGY]  InputStream  is  =  headers.readFully(ch);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.readFully(ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.readFully(ch);	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
605	[BUG]  [BUGGY]  InputStream  is  =  headers.readFully();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.readFully();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.readFully();	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
606	[BUG]  [BUGGY]  InputStream  is  =  headers!=  null?  headers.readInt()  :  i.inputStream();  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers!=  null?  headers.readInt()  :  i.inputStream();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers!=  null?  headers.readInt()  :  i.inputStream();	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
607	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(key)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(key)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.containsKey(key)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    if(headers.containsKey(key))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
608	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(!headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(!headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    if(headers.containsKey(key))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
609	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(key)&&  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(key)&&  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.containsKey(key)&&  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    if(headers.containsKey(key))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
610	[BUG]  [BUGGY]  ||  headers.containsKey(keyword))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  headers.containsKey(keyword))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  headers.containsKey(keyword))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(keyword))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
611	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers!=  null  ||  headers.containsKey(keyword))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers!=  null  ||  headers.containsKey(keyword))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers!=  null  ||  headers.containsKey(keyword))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(keyword))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
612	[BUG]  [BUGGY]  if(headers.containsKey(keyword))  {  if(i.hasNext())  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.containsKey(keyword))  {  if(i.hasNext())  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.containsKey(keyword))  {  if(i.hasNext())  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(keyword))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
613	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
614	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
615	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.get(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.get(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.get(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
616	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
617	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  if(!hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  if(!hasHitEOF)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  if(!hasHitEOF)  {  read++;  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
618	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
619	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  if(!hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  if(!hasHitEOF)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements())  {  if(!hasHitEOF)  {  read++;  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
620	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
621	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
622	[BUG]  [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
623	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
624	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
625	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.hasNext())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.hasNext())  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
626	[BUG]  [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.hasNext())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.hasNext())  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
627	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.hasNext())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.hasNext())  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
628	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainingLen.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainingLen.hasNext())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainingLen.hasNext())  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
629	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!remainingLen.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!remainingLen.hasNext())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!remainingLen.hasNext())  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
630	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
631	[BUG]  [BUGGY]  Headers.put(i.getKey(),  i.next());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(i.getKey(),  i.next());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(i.getKey(),  i.next());	  Headers.put(i.next(),    headers);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
632	[BUG]  [BUGGY]  Headers.put(i.next(),  headers,  read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(i.next(),  headers,  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(i.next(),  headers,  read);	  Headers.put(i.next(),    headers);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
633	[BUG]  [BUGGY]  Headers.put(headers.next(),  i);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(headers.next(),  i);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(headers.next(),  i);	  Headers.put(i.next(),    headers);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
634	[BUG]  [BUGGY]  Headers.put(i.getKey(),  headers);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(i.getKey(),  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(i.getKey(),  headers);	  Headers.put(i.next(),    headers);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
635	[BUG]  [BUGGY]  Headers.put(i,  headers.next());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(i,  headers.next());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(i,  headers.next());	  Headers.put(i.next(),    headers);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
636	[BUG]  [BUGGY]  Headers.put(ch,  i.next());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(ch,  i.next());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(ch,  i.next());	  Headers.put(i.next(),    headers);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
637	[BUG]  [BUGGY]  Headers.put(headers.get(i.next()),  ch);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(headers.get(i.next()),  ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(headers.get(i.next()),  ch);	  Headers.put(i.next(),    headers);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
638	[BUG]  [BUGGY]  ||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
639	[BUG]  [BUGGY]  ||  headers.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  headers.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  headers.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
640	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES,  headers.length))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES,  headers.length))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES,  headers.length))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
641	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getValue(),  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getValue(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getValue(),  headers);  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
642	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD    	non-compiled	[CE]  illegal  start  of  type	207	None	replace
643	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD    	non-compiled	[CE]  illegal  start  of  type	207	None	replace
644	[BUG]  [BUGGY]  ||(i.hasMoreTokens()  &&!i.hasMoreTokens()))  {  read++;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasMoreTokens()  &&!i.hasMoreTokens()))  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasMoreTokens()  &&!i.hasMoreTokens()))  {  read++;	  ||(i.hasMoreTokens()    &&    i.hasMoreTokens()))    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken())    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
645	[BUG]  [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()  +  1))  {  read++;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()  +  1))  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasMoreTokens()  &&  i.hasMoreTokens()  +  1))  {  read++;	  ||(i.hasMoreTokens()    &&    i.hasMoreTokens()))    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken())    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
646	[BUG]  [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens())||  i.hasMoreTokens())  {  read++;  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens())||  i.hasMoreTokens())  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasMoreTokens()  &&  i.hasMoreTokens())||  i.hasMoreTokens())  {  read++;	  ||(i.hasMoreTokens()    &&    i.hasMoreTokens()))    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken())    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
647	[BUG]  [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextTo  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextTo  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextTo	  ||(i.hasMoreTokens()    &&    i.hasMoreTokens()))    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken())    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
648	[BUG]  [BUGGY]  if(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.contains(ch))  {  read++;  }	  if(i.hasNext())    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
649	[BUG]  [BUGGY]  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }	  if(i.hasNext())    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
650	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  SMALL_BUFFER_SIZE);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  SMALL_BUFFER_SIZE);	  ((    TarArchiveEntry)i).setHeaders(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
651	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  len);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  len);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  len);	  ((    TarArchiveEntry)i).setHeaders(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
652	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  cache);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  cache);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  cache);	  ((    TarArchiveEntry)i).setHeaders(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
653	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  cached);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  cached);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  cached);	  ((    TarArchiveEntry)i).setHeaders(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
654	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
655	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
656	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
657	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
658	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
659	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers;  }	  if(i.hasMoreTokens())    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
660	[BUG]  [BUGGY]  Headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;	  if(i.hasMoreTokens())    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
661	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getSourceName()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getSourceName()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getSourceName()));  return  headers;  }	  if(i.hasMoreTokens())    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
662	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
663	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
664	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
665	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
666	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
667	[BUG]  [BUGGY]  ||  i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }	  if(i.hasNext())    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	199	None	replace
668	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  header  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  header  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  header	  if(i.hasNext())    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	199	None	replace
669	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	193	None	replace
670	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	193	None	replace
671	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	193	None	replace
672	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	193	None	replace
673	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	193	None	replace
674	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	193	None	replace
675	[BUG]  [BUGGY]  headers.get(i.next(),  headers);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.get(i.next(),  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.get(i.next(),  headers);	  if(i.hasNext())    {    read++;    }    else    {    headers.get(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
676	[BUG]  [BUGGY]  Headers.get(i.next(),  headers);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.get(i.next(),  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.get(i.next(),  headers);	  if(i.hasNext())    {    read++;    }    else    {    headers.get(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
677	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  headers.get(i.next(),  len);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  headers.get(i.next(),  len);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  read++;  }  else  {  headers.get(i.next(),  len);  }	  if(i.hasNext())    {    read++;    }    else    {    headers.get(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
678	[BUG]  [BUGGY]  headers.get(i.next(),  len);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.get(i.next(),  len);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.get(i.next(),  len);	  if(i.hasNext())    {    read++;    }    else    {    headers.get(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
679	[BUG]  [BUGGY]  headers.get(i.next(),  ch);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.get(i.next(),  ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.get(i.next(),  ch);	  if(i.hasNext())    {    read++;    }    else    {    headers.get(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
680	[BUG]  [BUGGY]  readers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  readers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	readers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));	  if(i.hasMoreTokens())    {    reader++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
681	[BUG]  [BUGGY]  Reader  <  K,  V>  reader  =  parsePaxHeaders(i.nextToken());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Reader  <  K,  V>  reader  =  parsePaxHeaders(i.nextToken());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Reader  <  K,  V>  reader  =  parsePaxHeaders(i.nextToken());	  if(i.hasMoreTokens())    {    reader++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
682	[BUG]  [BUGGY]  Reader  <  K,  V>  reader  =  headers.get(i.nextToken(),  parsePaxHeaders(i.nextToken()));  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Reader  <  K,  V>  reader  =  headers.get(i.nextToken(),  parsePaxHeaders(i.nextToken()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Reader  <  K,  V>  reader  =  headers.get(i.nextToken(),  parsePaxHeaders(i.nextToken()));	  if(i.hasMoreTokens())    {    reader++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
683	[BUG]  [BUGGY]  readers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  readers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	readers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));	  if(i.hasMoreTokens())    {    reader++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
684	[BUG]  [BUGGY]  if(i.hasMoreElements()  &&(ch  ==  '-'  ||  coll.hasMoreElements()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  &&(ch  ==  '-'  ||  coll.hasMoreElements()))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  &&(ch  ==  '-'  ||  coll.hasMoreElements()))  {  read++;  }	  if(i.hasMoreElements()    ||    (ch    ==    '-'    &&    coll.hasMoreElements()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
685	[BUG]  [BUGGY]  if(i.hasMoreElements()  &&  (ch  ==  '-'  &&  coll.hasMoreElements()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  &&  (ch  ==  '-'  &&  coll.hasMoreElements()))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  &&  (ch  ==  '-'  &&  coll.hasMoreElements()))  {  read++;  }	  if(i.hasMoreElements()    ||    (ch    ==    '-'    &&    coll.hasMoreElements()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
686	[BUG]  [BUGGY]  ||(ch  ==  '-'  &&  coll.hasMoreElements()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(ch  ==  '-'  &&  coll.hasMoreElements()))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(ch  ==  '-'  &&  coll.hasMoreElements()))  {  read++;  }	  if(i.hasMoreElements()    ||    (ch    ==    '-'    &&    coll.hasMoreElements()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
687	[BUG]  [BUGGY]  ((  read  =  i.read())!=  -1)?  read++  :  i.next());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  read  =  i.read())!=  -1)?  read++  :  i.next());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  read  =  i.read())!=  -1)?  read++  :  i.next());	  ((    ch    =    i.read())!=    -1)?    read++    :    i.next());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
688	[BUG]  [BUGGY]  ((  ch  =  i.read())  ==  -1)?  read++  :  i.next());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())  ==  -1)?  read++  :  i.next());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())  ==  -1)?  read++  :  i.next());	  ((    ch    =    i.read())!=    -1)?    read++    :    i.next());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
689	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getMessage());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getMessage());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)?  read++  :  i.getMessage());	  ((    ch    =    i.read())!=    -1)?    read++    :    i.next());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
690	[BUG]  [BUGGY]  ((  ch  =  i.read())  >>  -1)?  read++  :  i.next());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())  >>  -1)?  read++  :  i.next());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())  >>  -1)?  read++  :  i.next());	  ((    ch    =    i.read())!=    -1)?    read++    :    i.next());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
691	[BUG]  [BUGGY]  ((  ch  =  i.read())  >=  -1)?  read++  :  i.next());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())  >=  -1)?  read++  :  i.next());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())  >=  -1)?  read++  :  i.next());	  ((    ch    =    i.read())!=    -1)?    read++    :    i.next());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
692	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getCurrentName());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getCurrentName());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)?  read++  :  i.getCurrentName());	  ((    ch    =    i.read())!=    -1)?    read++    :    i.next());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
693	[BUG]  [BUGGY]  if(i.isEmpty())  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEmpty())  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEmpty())  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
694	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_    	non-compiled	[CE]  illegal  start  of  type	208	None	replace
695	[BUG]  [BUGGY]  headers.put(i.getKey(),  i.nextElement());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.getKey(),  i.nextElement());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.getKey(),  i.nextElement());	  headers.put(i.nextElement(),    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
696	[BUG]  [BUGGY]  headers.put(ch,  i.nextElement());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(ch,  i.nextElement());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(ch,  i.nextElement());	  headers.put(i.nextElement(),    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
697	[BUG]  [BUGGY]  headers.put(i.nextElement(),  read);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.nextElement(),  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.nextElement(),  read);	  headers.put(i.nextElement(),    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
698	[BUG]  [BUGGY]  headers.put(i.getSourceName(),  i.nextElement());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.getSourceName(),  i.nextElement());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.getSourceName(),  i.nextElement());	  headers.put(i.nextElement(),    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
699	[BUG]  [BUGGY]  headers.put(i.getCurrentName(),  i.nextElement());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.getCurrentName(),  i.nextElement());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.getCurrentName(),  i.nextElement());	  headers.put(i.nextElement(),    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
700	[BUG]  [BUGGY]  headers.put(i,  i.nextElement());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i,  i.nextElement());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i,  i.nextElement());	  headers.put(i.nextElement(),    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
701	[BUG]  [BUGGY]  headers.put(i.getKey(),  i);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.getKey(),  i);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.getKey(),  i);	  headers.put(i.nextElement(),    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
702	[BUG]  [BUGGY]  ||!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	204	None	replace
703	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	204	None	replace
704	[BUG]  [BUGGY]  if(ch.hasNext()  ||  ch  ==  'n'  ||  ch  ==  't')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch.hasNext()  ||  ch  ==  'n'  ||  ch  ==  't')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch.hasNext()  ||  ch  ==  'n'  ||  ch  ==  't')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n'    ||    ch    ==    't')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	211	None	replace
705	[BUG]  [BUGGY]  ||  ch  ==  'n'  ||  ch  ==  't')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  ch  ==  'n'  ||  ch  ==  't')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  ch  ==  'n'  ||  ch  ==  't')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n'    ||    ch    ==    't')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	211	None	replace
706	[BUG]  [BUGGY]  (i.hasNext()  ||  ch  ==  'n'  ||  ch  ==  't'))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  (i.hasNext()  ||  ch  ==  'n'  ||  ch  ==  't'))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	(i.hasNext()  ||  ch  ==  'n'  ||  ch  ==  't'))  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n'    ||    ch    ==    't')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	211	None	replace
707	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch!=  'n'  ||  ch  ==  't')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  ch!=  'n'  ||  ch  ==  't')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  ch!=  'n'  ||  ch  ==  't')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n'    ||    ch    ==    't')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	211	None	replace
708	[BUG]  [BUGGY]  while(i.hasNext()  &&  ch  ==  'n'  ||  ch  ==  't')  {  read++;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(i.hasNext()  &&  ch  ==  'n'  ||  ch  ==  't')  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while(i.hasNext()  &&  ch  ==  'n'  ||  ch  ==  't')  {  read++;	  if(i.hasNext()    ||    ch    ==    'n'    ||    ch    ==    't')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	211	None	replace
709	[BUG]  [BUGGY]  while(i.hasNext()  &&  ch  ==  'n'  ||  ch  ==  't')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(i.hasNext()  &&  ch  ==  'n'  ||  ch  ==  't')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while(i.hasNext()  &&  ch  ==  'n'  ||  ch  ==  't')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n'    ||    ch    ==    't')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	211	None	replace
710	[BUG]  [BUGGY]  if(headers  ==  null)  {  if(headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers  ==  null)  {  if(headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers  ==  null)  {  if(headers.containsKey(ch))  {  read++;  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
711	[BUG]  [BUGGY]  if(headers  ==  null)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers  ==  null)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers  ==  null)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
712	[BUG]  [BUGGY]  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
713	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
714	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
715	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(hasHitEOF)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(hasHitEOF)  {  read++;  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
716	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
717	[BUG]  [BUGGY]  if(i.hasNext()  <  len  ||  ch  ==  'n')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  <  len  ||  ch  ==  'n')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  <  len  ||  ch  ==  'n')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	213	None	replace
718	[BUG]  [BUGGY]  if(i.hasNext()  {  read  ||  ch  ==  'n')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  {  read  ||  ch  ==  'n')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  {  read  ||  ch  ==  'n')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	213	None	replace
719	[BUG]  [BUGGY]  (i.hasNext()  &&  ch  ==  'n'))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  (i.hasNext()  &&  ch  ==  'n'))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	(i.hasNext()  &&  ch  ==  'n'))  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	213	None	replace
720	[BUG]  [BUGGY]  (i.hasNext()  ||  ch  ==  'n'))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  (i.hasNext()  ||  ch  ==  'n'))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	(i.hasNext()  ||  ch  ==  'n'))  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	213	None	replace
721	[BUG]  [BUGGY]  read  +=  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  headers.size()  -  1;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  headers.size()  -  1;	  read    +=    headers.size();    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
722	[BUG]  [BUGGY]  read  +=  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  headers.size()  -  2;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  headers.size()  -  2;	  read    +=    headers.size();    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
723	[BUG]  [BUGGY]  read  +=  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  headers.size()  +  1;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  headers.size()  +  1;	  read    +=    headers.size();    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
724	[BUG]  [BUGGY]  read  +=  headers.size()  /  2;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  headers.size()  /  2;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  headers.size()  /  2;	  read    +=    headers.size();    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
725	[BUG]  [BUGGY]  read  +=  headers.size()  -  4;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  headers.size()  -  4;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  headers.size()  -  4;	  read    +=    headers.size();    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
726	[BUG]  [BUGGY]  if(i.hasNext())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
727	[BUG]  [BUGGY]  if(i.hasNext())  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
728	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey())  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey())  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey())	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
729	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
730	[BUG]  [BUGGY]  int  read  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  int  read  =  headers.size()  -  1;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	int  read  =  headers.size()  -  1;	  int    read    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
731	[BUG]  [BUGGY]  int  read  =  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  int  read  =  headers.size()  -  2;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	int  read  =  headers.size()  -  2;	  int    read    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
732	[BUG]  [BUGGY]  int  read  =  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  int  read  =  headers.size()  +  1;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	int  read  =  headers.size()  +  1;	  int    read    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
733	[BUG]  [BUGGY]  int  read  =  headers.size()  -  4;  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  int  read  =  headers.size()  -  4;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	int  read  =  headers.size()  -  4;	  int    read    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
734	[BUG]  [BUGGY]  int  read  =  headers.size()  +  len;  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  int  read  =  headers.size()  +  len;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	int  read  =  headers.size()  +  len;	  int    read    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
735	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
736	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
737	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
738	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
739	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.SHORT_QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.SHORT_QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.SHORT_QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
740	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null)    {    while(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
741	[BUG]  [BUGGY]  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null)    {    while(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
742	[BUG]  [BUGGY]  if(i.hasNext())  {  while(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  while(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null)    {    while(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
743	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  }	  if(headers!=    null)    {    while(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
744	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }	  if(headers!=    null)    {    while(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
745	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.hasMoreElements())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
746	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  if(!i.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  if(!i.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements())  {  if(!i.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
747	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE	  if(i.hasMoreElements())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
748	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE	  if(i.hasMoreElements())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
749	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
750	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValu    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
751	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
752	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
753	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
754	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
755	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
756	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers;  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getCurrentToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	156	None	replace
757	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.getCurrentToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.getCurrentToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.getCurrentToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers;  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getCurrentToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	156	None	replace
758	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getCurrentToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	156	None	replace
759	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES    ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
760	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES    ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
761	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES    ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
762	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	189	None	replace
763	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	189	None	replace
764	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers  ==  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers  ==  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers  ==  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	189	None	replace
765	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.hasMoreElements()  ||  i.hasMoreElements())  {  read++;  }  else  {  headers.put(i.nextElement(),  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.hasMoreElements()  ||  i.hasMoreElements())  {  read++;  }  else  {  headers.put(i.nextElement(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.hasMoreElements()  ||  i.hasMoreElements())  {  read++;  }  else  {  headers.put(i.nextElement(),  headers);  }	  if(i.hasMoreElements()    ||    i.hasMoreElements())    {    read++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
766	[BUG]  [BUGGY]  if(i.hasMoreElements()  &&  i.hasMoreElements())  {  read++;  }  else  {  headers.put(i.nextElement(),  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  &&  i.hasMoreElements())  {  read++;  }  else  {  headers.put(i.nextElement(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  &&  i.hasMoreElements())  {  read++;  }  else  {  headers.put(i.nextElement(),  headers);  }	  if(i.hasMoreElements()    ||    i.hasMoreElements())    {    read++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
767	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||!i.hasMoreElements())  {  read++;  }  else  {  headers.put(i.nextElement(),  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  ||!i.hasMoreElements())  {  read++;  }  else  {  headers.put(i.nextElement(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  ||!i.hasMoreElements())  {  read++;  }  else  {  headers.put(i.nextElement(),  headers);  }	  if(i.hasMoreElements()    ||    i.hasMoreElements())    {    read++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
768	[BUG]  [BUGGY]  headers.put(i.next().getKeyword(),  headers.get(i.next().getKeyword()));  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.next().getKeyword(),  headers.get(i.next().getKeyword()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.next().getKeyword(),  headers.get(i.next().getKeyword()));	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next().getKeyword()));    }    	non-compiled	[CE]  illegal  start  of  type	192	None	replace
769	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword()  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword()	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next().getKeyword()));    }    	non-compiled	[CE]  illegal  start  of  type	192	None	replace
770	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next().getKeyword()));    }    	non-compiled	[CE]  illegal  start  of  type	192	None	replace
771	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().get  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().get  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().get	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next().getKeyword()));    }    	non-compiled	[CE]  illegal  start  of  type	192	None	replace
772	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next().getKeyword()));    }    	non-compiled	[CE]  illegal  start  of  type	192	None	replace
773	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!remainders.contains(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!remainders.contains(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!remainders.contains(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
774	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
775	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.contains(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.contains(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.contains(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
776	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.contains(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.contains(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.contains(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
777	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!remainders.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!remainders.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!remainders.contains(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
778	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1    	non-compiled	[CE]  illegal  start  of  type	185	None	replace
779	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1    	non-compiled	[CE]  illegal  start  of  type	185	None	replace
780	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
781	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
782	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
783	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
784	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
785	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
786	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
787	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
788	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
789	[BUG]  [BUGGY]  ||  i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));	  ||(i.hasMoreTokens()    &&    i.hasMoreTokens()))    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
790	[BUG]  [BUGGY]  InputStream  is  =  headers.readInputStream();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.readInputStream();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.readInputStream();	  InputStream    is    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
791	[BUG]  [BUGGY]  InputStream  is  =  i.readFully();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  i.readFully();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  i.readFully();	  InputStream    is    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
792	[BUG]  [BUGGY]  InputStream  is  =  i.readInputStream(ch);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  i.readInputStream(ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  i.readInputStream(ch);	  InputStream    is    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
793	[BUG]  [BUGGY]  InputStream  is  =  i.readInputStream(remainders);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  i.readInputStream(remainders);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  i.readInputStream(remainders);	  InputStream    is    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
794	[BUG]  [BUGGY]  InputStream  is  =  i.readInputStream(headers);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  i.readInputStream(headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  i.readInputStream(headers);	  InputStream    is    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
795	[BUG]  [BUGGY]  InputStream  is  =  i.getInputStream();  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  i.getInputStream();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  i.getInputStream();	  InputStream    is    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
796	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  read!=  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  read!=  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  read!=  0)  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    read!=    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
797	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read  ==  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read  ==  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read  ==  0)  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    read!=    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
798	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read  >=  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read  >=  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read  >=  0)  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    read!=    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
799	[BUG]  [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    read!=    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
800	[BUG]  [BUGGY]  read  =  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    read!=    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
801	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeader  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeader  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeader	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeader    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
802	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeader  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeader  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeader	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeader    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
803	[BUG]  [BUGGY]  Reader  reader  =  headers.get(i.nextElement());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Reader  reader  =  headers.get(i.nextElement());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Reader  reader  =  headers.get(i.nextElement());	  if(i.hasNext())    {    reader++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	178	None	replace
804	[BUG]  [BUGGY]  Reader  reader  =  headers.getReader(i.nextElement());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Reader  reader  =  headers.getReader(i.nextElement());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Reader  reader  =  headers.getReader(i.nextElement());	  if(i.hasNext())    {    reader++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	178	None	replace
805	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
806	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
807	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||!i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||!i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||!i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
808	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
809	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
810	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&!i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&!i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&!i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
811	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch)&&  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch)&&  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.containsKey(ch)&&  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(ch)||    headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
812	[BUG]  [BUGGY]  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(ch)||    headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
813	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.get(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.get(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.get(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(ch)||    headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
814	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch)||  headers.get(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch)||  headers.get(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.containsKey(ch)||  headers.get(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(ch)||    headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
815	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers!=    null    ||    headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
816	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }	  if(i.hasNext())    {    if(headers!=    null    ||    headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
817	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  returned  headers;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  returned  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  returned  headers;  }	  if(i.hasNext())    {    if(headers!=    null    ||    headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
818	[BUG]  [BUGGY]  Headers.put(i.getKey(),  i.nextElement());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(i.getKey(),  i.nextElement());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(i.getKey(),  i.nextElement());	  Headers.put(i.nextElement(),    headers);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
819	[BUG]  [BUGGY]  Headers.put(i.nextElement(),  headers,  read);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(i.nextElement(),  headers,  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(i.nextElement(),  headers,  read);	  Headers.put(i.nextElement(),    headers);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
820	[BUG]  [BUGGY]  Headers.put(headers.nextElement(),  i);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(headers.nextElement(),  i);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(headers.nextElement(),  i);	  Headers.put(i.nextElement(),    headers);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
821	[BUG]  [BUGGY]  Headers.put(i.getSourceName(),  headers);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(i.getSourceName(),  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(i.getSourceName(),  headers);	  Headers.put(i.nextElement(),    headers);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
822	[BUG]  [BUGGY]  Headers.put(i.getKey(),  i.nextElement(),  headers);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(i.getKey(),  i.nextElement(),  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(i.getKey(),  i.nextElement(),  headers);	  Headers.put(i.nextElement(),    headers);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
823	[BUG]  [BUGGY]  Headers.put(i.getCurrentName(),  headers);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(i.getCurrentName(),  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(i.getCurrentName(),  headers);	  Headers.put(i.nextElement(),    headers);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
824	[BUG]  [BUGGY]  Headers.put(ch,  i.nextElement());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(ch,  i.nextElement());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(ch,  i.nextElement());	  Headers.put(i.nextElement(),    headers);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
825	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
826	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
827	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
828	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
829	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
830	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
831	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey()  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey()	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
832	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||!i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||!i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||!i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
833	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
834	[BUG]  [BUGGY]  i.setMoreElements(headers,  read);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setMoreElements(headers,  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	i.setMoreElements(headers,  read);	  i.setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
835	[BUG]  [BUGGY]  i.setMoreElements(remainders);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setMoreElements(remainders);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	i.setMoreElements(remainders);	  i.setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
836	[BUG]  [BUGGY]  i.setMoreElements(remainings);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setMoreElements(remainings);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	i.setMoreElements(remainings);	  i.setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
837	[BUG]  [BUGGY]  i.removeChild(headers);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.removeChild(headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	i.removeChild(headers);	  i.setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
838	[BUG]  [BUGGY]  i.setMoreElements(read);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setMoreElements(read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	i.setMoreElements(read);	  i.setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
839	[BUG]  [BUGGY]  ReadNow.write(headers,  i.next(),  read);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ReadNow.write(headers,  i.next(),  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ReadNow.write(headers,  i.next(),  read);	  ReadNow.write(headers,    i.next());    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
840	[BUG]  [BUGGY]  ReadNow.write(remainders,  i.next());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ReadNow.write(remainders,  i.next());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ReadNow.write(remainders,  i.next());	  ReadNow.write(headers,    i.next());    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
841	[BUG]  [BUGGY]  ReadNow.write(headers,  read,  i.next());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ReadNow.write(headers,  read,  i.next());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ReadNow.write(headers,  read,  i.next());	  ReadNow.write(headers,    i.next());    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
842	[BUG]  [BUGGY]  ReadNow.write(headers,  i.next(),  restLen);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ReadNow.write(headers,  i.next(),  restLen);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ReadNow.write(headers,  i.next(),  restLen);	  ReadNow.write(headers,    i.next());    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
843	[BUG]  [BUGGY]  ReadNow.write(headers,  i.getValue());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ReadNow.write(headers,  i.getValue());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ReadNow.write(headers,  i.getValue());	  ReadNow.write(headers,    i.next());    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
844	[BUG]  [BUGGY]  ReadNow.write(headers,  i.next()  +  read);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ReadNow.write(headers,  i.next()  +  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ReadNow.write(headers,  i.next()  +  read);	  ReadNow.write(headers,    i.next());    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
845	[BUG]  [BUGGY]  int  len  =  headers.read();  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  int  len  =  headers.read();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	int  len  =  headers.read();	  int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
846	[BUG]  [BUGGY]  int  len  =  i.read(ch);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  int  len  =  i.read(ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	int  len  =  i.read(ch);	  int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
847	[BUG]  [BUGGY]  int  len  =  i.read(remainders);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  int  len  =  i.read(remainders);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	int  len  =  i.read(remainders);	  int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
848	[BUG]  [BUGGY]  char  len  =  i.read();  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  char  len  =  i.read();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	char  len  =  i.read();	  int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
849	[BUG]  [BUGGY]  byte  len  =  i.read();  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  byte  len  =  i.read();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	byte  len  =  i.read();	  int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
850	[BUG]  [BUGGY]  headers.put(i.getKey(),  i.next());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.getKey(),  i.next());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.getKey(),  i.next());	  headers.put(i.next(),    headers);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
851	[BUG]  [BUGGY]  headers.put(ch,  i.next());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(ch,  i.next());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(ch,  i.next());	  headers.put(i.next(),    headers);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
852	[BUG]  [BUGGY]  headers.put(i.next(),  read);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.next(),  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.next(),  read);	  headers.put(i.next(),    headers);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
853	[BUG]  [BUGGY]  headers.put(i.getKey(),  ch);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.getKey(),  ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.getKey(),  ch);	  headers.put(i.next(),    headers);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
854	[BUG]  [BUGGY]  headers.put(i.next(),  len);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.next(),  len);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.next(),  len);	  headers.put(i.next(),    headers);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
855	[BUG]  [BUGGY]  headers.put(i,  i.next());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i,  i.next());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i,  i.next());	  headers.put(i.next(),    headers);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
856	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
857	[BUG]  [BUGGY]  headers.put(i.next().getKeyword(),  headers.get(i.next().getValue()));  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.next().getKeyword(),  headers.get(i.next().getValue()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.next().getKeyword(),  headers.get(i.next().getValue()));	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next().getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	191	None	replace
858	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.getKeyword(),  headers.get(i.next().getValue()));  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.getKeyword(),  headers.get(i.next().getValue()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.getKeyword(),  headers.get(i.next().getValue()));  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next().getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	191	None	replace
859	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getValu  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getValu  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getValu	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next().getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	191	None	replace
860	[BUG]  [BUGGY]  (TarArchiveEntry  <  K,  V>)i.next()).reset();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  (TarArchiveEntry  <  K,  V>)i.next()).reset();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	(TarArchiveEntry  <  K,  V>)i.next()).reset();	  ((    TarArchiveEntry    <    K,    V>)i.next()).reset();    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
861	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).parsePaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).parsePaxHeaders(headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).parsePaxHeaders(headers);	  ((    TarArchiveEntry    <    K,    V>)i.next()).reset();    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
862	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setCurrentLength(read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setCurrentLength(read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setCurrentLength(read);	  ((    TarArchiveEntry    <    K,    V>)i.next()).reset();    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
863	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setCurrentLength(len);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setCurrentLength(len);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setCurrentLength(len);	  ((    TarArchiveEntry    <    K,    V>)i.next()).reset();    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
864	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
865	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
866	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
867	[BUG]  [BUGGY]  if(i.hasNext())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
868	[BUG]  [BUGGY]  if(i.hasNext())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  }	  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
869	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  }	  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
870	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
871	[BUG]  [BUGGY]  ||  headers.contains(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  headers.contains(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  headers.contains(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.get(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
872	[BUG]  [BUGGY]  if(i.isEmpty())  {  if(headers!=  null)  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEmpty())  {  if(headers!=  null)  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEmpty())  {  if(headers!=  null)  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.get(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
873	[BUG]  [BUGGY]  headers.put(i.nextToken(),  parsePaxHeaders(i.getKey()));  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.nextToken(),  parsePaxHeaders(i.getKey()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.nextToken(),  parsePaxHeaders(i.getKey()));	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	201	None	replace
874	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getKey()));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getKey()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getKey()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	201	None	replace
875	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	201	None	replace
876	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.getToken(),  parsePaxHeaders(i.getKey()));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.getToken(),  parsePaxHeaders(i.getKey()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.getToken(),  parsePaxHeaders(i.getKey()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	201	None	replace
877	[BUG]  [BUGGY]  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	201	None	replace
878	[BUG]  [BUGGY]  if(i.hasMoreElements()  &&(ch  ==  'n'  ||  i.hasMoreElements()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  &&(ch  ==  'n'  ||  i.hasMoreElements()))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  &&(ch  ==  'n'  ||  i.hasMoreElements()))  {  read++;  }	  if(i.hasMoreElements()    ||    (ch    ==    'n'    &&    i.hasMoreElements()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
879	[BUG]  [BUGGY]  if(i.hasMoreElements()  &&  (ch  ==  'n'  &&  i.hasMoreElements()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  &&  (ch  ==  'n'  &&  i.hasMoreElements()))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  &&  (ch  ==  'n'  &&  i.hasMoreElements()))  {  read++;  }	  if(i.hasMoreElements()    ||    (ch    ==    'n'    &&    i.hasMoreElements()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
880	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(remainders);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(remainders);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setRead(remainders);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
881	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(ch);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setRead(ch);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
882	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(headers);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setRead(headers);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
883	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(remaining);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(remaining);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setRead(remaining);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
884	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(remainingLen);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(remainingLen);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setRead(remainingLen);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
885	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(remainders,  read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(remainders,  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setRead(remainders,  read);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
886	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
887	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
888	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
889	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
890	[BUG]  [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
891	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
892	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
893	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
894	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
895	[BUG]  [BUGGY]  headers.put(ch,  read);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(ch,  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(ch,  read);	  headers.put(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
896	[BUG]  [BUGGY]  headers.put(ch,  i);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(ch,  i);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(ch,  i);	  headers.put(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
897	[BUG]  [BUGGY]  headers.put(ch,  coll);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(ch,  coll);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(ch,  coll);	  headers.put(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
898	[BUG]  [BUGGY]  headers.put(keyword,  i);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(keyword,  i);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(keyword,  i);	  headers.put(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
899	[BUG]  [BUGGY]  headers.put(ch,  len);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(ch,  len);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(ch,  len);	  headers.put(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
900	[BUG]  [BUGGY]  headers.put(i,  headers);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i,  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i,  headers);	  headers.put(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
901	[BUG]  [BUGGY]  headers.put(ch,  currEntry);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(ch,  currEntry);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(ch,  currEntry);	  headers.put(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
902	[BUG]  [BUGGY]  read  =  parsePaxHeaders(i.getCurrentToken());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  parsePaxHeaders(i.getCurrentToken());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  parsePaxHeaders(i.getCurrentToken());	  read    =    parsePaxHeaders(i.nextToken());    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
903	[BUG]  [BUGGY]  read  =  parsePaxHeaders(i,  i.nextToken());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  parsePaxHeaders(i,  i.nextToken());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  parsePaxHeaders(i,  i.nextToken());	  read    =    parsePaxHeaders(i.nextToken());    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
904	[BUG]  [BUGGY]  read  =  parsePaxHeaders(i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  parsePaxHeaders(i.getCharacterEncoding());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  parsePaxHeaders(i.getCharacterEncoding());	  read    =    parsePaxHeaders(i.nextToken());    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
905	[BUG]  [BUGGY]  read  =  parsePaxHeaders(i.nextToken(),  headers);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  parsePaxHeaders(i.nextToken(),  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  parsePaxHeaders(i.nextToken(),  headers);	  read    =    parsePaxHeaders(i.nextToken());    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
906	[BUG]  [BUGGY]  read  =  parsePaxHeaders(i.getMessage());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  parsePaxHeaders(i.getMessage());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  parsePaxHeaders(i.getMessage());	  read    =    parsePaxHeaders(i.nextToken());    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
907	[BUG]  [BUGGY]  read  =  parsePaxHeaders(i.getSource());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  parsePaxHeaders(i.getSource());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  parsePaxHeaders(i.getSource());	  read    =    parsePaxHeaders(i.nextToken());    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
908	[BUG]  [BUGGY]  read  =  parsePaxHeaders(i.nextToken(),  len);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  parsePaxHeaders(i.nextToken(),  len);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  parsePaxHeaders(i.nextToken(),  len);	  read    =    parsePaxHeaders(i.nextToken());    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
909	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch)&&  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch)&&  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.contains(ch)&&  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.contains(ch)||    headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
910	[BUG]  [BUGGY]  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.contains(ch)||    headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
911	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.get(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.get(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.get(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.contains(ch)||    headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
912	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch)||  headers.get(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch)||  headers.get(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.contains(ch)||  headers.get(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.contains(ch)||    headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
913	[BUG]  [BUGGY]  if(i.hasMoreElements()  &&  headers.size()  >  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  &&  headers.size()  >  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  &&  headers.size()  >  0)  {  read++;  }	  if(i.hasMoreElements()    ||    headers.size()    >    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	175	None	replace
914	[BUG]  [BUGGY]  if(headers.size()  >  0  ||  headers.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.size()  >  0  ||  headers.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.size()  >  0  ||  headers.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements()    ||    headers.size()    >    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	175	None	replace
915	[BUG]  [BUGGY]  if(headers.size()  >  0  ||  i.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.size()  >  0  ||  i.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.size()  >  0  ||  i.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements()    ||    headers.size()    >    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	175	None	replace
916	[BUG]  [BUGGY]  if(i.hasChronology())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasChronology())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasChronology())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeader    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
917	[BUG]  [BUGGY]  if(i.getKey()  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.getKey()  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.getKey()  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeader    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
918	[BUG]  [BUGGY]  ch  =  i.read(headers,  read);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ch  =  i.read(headers,  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ch  =  i.read(headers,  read);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
919	[BUG]  [BUGGY]  ch  =  i.read()  +  headers.length;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ch  =  i.read()  +  headers.length;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ch  =  i.read()  +  headers.length;	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
920	[BUG]  [BUGGY]  ch  =  i.read()  +  1;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ch  =  i.read()  +  1;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ch  =  i.read()  +  1;	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
921	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
922	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SIZE))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SIZE))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SIZE))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
923	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.get(ch)  ==  read++)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.get(ch)  ==  read++)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.get(ch)  ==  read++)  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
924	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
925	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
926	[BUG]  [BUGGY]  if(i!=  null)  {  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i!=  null)  {  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i!=  null)  {  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
927	[BUG]  [BUGGY]  if(i!=  null)  {  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i!=  null)  {  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i!=  null)  {  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
928	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
929	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
930	[BUG]  [BUGGY]  if(i.hasNext())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }	  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
931	[BUG]  [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }	  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
932	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.read()  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.read()  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.read()  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	188	None	replace
933	[BUG]  [BUGGY]  if(i.read()!=  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()!=  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()!=  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	188	None	replace
934	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.read()  >  -1)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.read()  >  -1)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.read()  >  -1)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	188	None	replace
935	[BUG]  [BUGGY]  if(i.isEmpty())  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEmpty())  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEmpty())  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	188	None	replace
936	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.read()  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.read()  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.read()  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	188	None	replace
937	[BUG]  [BUGGY]  ||(i.hasNext()  &&  i.next()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  i.next()))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  i.next()))  {  read++;  }	  ||(i.hasNext()    &&    i.hasNext()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
938	[BUG]  [BUGGY]  ||(i.hasNext()  &&  ch.charAt(i.next())!=  '/'))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  ch.charAt(i.next())!=  '/'))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  ch.charAt(i.next())!=  '/'))  {  read++;  }	  ||(i.hasNext()    &&    i.hasNext()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
939	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.get(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.get(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.get(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }	  if(i.hasMoreTokens())    {    reader++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
940	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getToken()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getToken()));  return  headers;  }	  if(i.hasMoreTokens())    {    reader++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
941	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.contains(ch))  {  read++;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	190	None	replace
942	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SIZE))  {  if(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SIZE))  {  if(headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SIZE))  {  if(headers.contains(ch))  {  read++;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	190	None	replace
943	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers!=  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers!=  null)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers!=  null)  {  read++;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	190	None	replace
944	[BUG]  [BUGGY]  if(!hasHitEOF)  {  while(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  while(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  while(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
945	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  headers);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
946	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  Read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  Read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  Read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
947	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  reader++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  reader++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  reader++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
948	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(!hasHitEOF)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(!hasHitEOF)  {  read++;  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
949	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch)||  headers.get(ch)!=  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch)||  headers.get(ch)!=  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.containsKey(ch)||  headers.get(ch)!=  0)  {  read++;  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
950	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch)||  headers.get(ch)!=  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch)||  headers.get(ch)!=  null)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.containsKey(ch)||  headers.get(ch)!=  null)  {  read++;  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
951	[BUG]  [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read  <  =  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read  <  =  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read  <  =  0)  {  read++;  }	  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
952	[BUG]  [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  -1)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  -1)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  -1)  {  read++;  }	  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
953	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
954	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
955	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NA),  headers)  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NA),  headers)  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NA),  headers)  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
956	[BUG]  [BUGGY]  if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().get  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().get  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().get	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next().getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	191	None	replace
957	[BUG]  [BUGGY]  if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getVal  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getVal  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getVal	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next().getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	191	None	replace
958	[BUG]  [BUGGY]  if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getValu  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getValu  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getValu	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next().getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	191	None	replace
959	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next().getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	191	None	replace
960	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next().getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	191	None	replace
961	[BUG]  [BUGGY]  if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getValue  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getValue  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getValue	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next().getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	191	None	replace
962	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch  <  'n'  ||  ch  >  'r')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  ch  <  'n'  ||  ch  >  'r')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  ch  <  'n'  ||  ch  >  'r')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	210	None	replace
963	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch  >=  'n'  ||  ch  ==  'r')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  ch  >=  'n'  ||  ch  ==  'r')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  ch  >=  'n'  ||  ch  ==  'r')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	210	None	replace
964	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch  ==  'e'  ||  ch  ==  'E')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  ch  ==  'e'  ||  ch  ==  'E')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  ch  ==  'e'  ||  ch  ==  'E')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	210	None	replace
965	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
966	[BUG]  [BUGGY]  headers.put(ch,  new  String(len));  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(ch,  new  String(len));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(ch,  new  String(len));	  headers.put(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
967	[BUG]  [BUGGY]  headers.put(len,  headers);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(len,  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(len,  headers);	  headers.put(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
968	[BUG]  [BUGGY]  read  =  parsePaxHeaders(i.getKey());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  parsePaxHeaders(i.getKey());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  parsePaxHeaders(i.getKey());	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	201	None	replace
969	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getValue()));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getValue()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getValue()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	201	None	replace
970	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.get(i.nextToken(),  parsePaxHeaders(i.getKey()));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.get(i.nextToken(),  parsePaxHeaders(i.getKey()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  read++;  }  else  {  headers.get(i.nextToken(),  parsePaxHeaders(i.getKey()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	201	None	replace
971	[BUG]  [BUGGY]  read  +=  parsePaxHeaders(i.getKey());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  parsePaxHeaders(i.getKey());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  parsePaxHeaders(i.getKey());	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	201	None	replace
972	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null)  {  read++;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
973	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
974	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKey())  ==  null)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKey())  ==  null)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKey())  ==  null)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    headers.get(i.getKey())!=    null)    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
975	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getValue())!=  null)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getValue())!=  null)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getValue())!=  null)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    headers.get(i.getKey())!=    null)    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
976	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.get(i.getKey())!=  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.get(i.getKey())!=  null)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.get(i.getKey())!=  null)  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    headers.get(i.getKey())!=    null)    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
977	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.hasMoreElements())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
978	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getCurrentToken()));    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
979	[BUG]  [BUGGY]  read  +=  parsePaxHeaders(i.getCurrentToken());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  parsePaxHeaders(i.getCurrentToken());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  parsePaxHeaders(i.getCurrentToken());	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getCurrentToken()));    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
980	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.currentToken()));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.currentToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.currentToken()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getCurrentToken()));    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
981	[BUG]  [BUGGY]  read  =  parsePaxHeaders(i.getRead());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  parsePaxHeaders(i.getRead());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  parsePaxHeaders(i.getRead());	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getRead()));    }    	non-compiled	[CE]  illegal  start  of  type	202	None	replace
982	[BUG]  [BUGGY]  read  +=  parsePaxHeaders(i.getRead());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  parsePaxHeaders(i.getRead());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  parsePaxHeaders(i.getRead());	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getRead()));    }    	non-compiled	[CE]  illegal  start  of  type	202	None	replace
983	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getWrite()));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getWrite()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getWrite()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getRead()));    }    	non-compiled	[CE]  illegal  start  of  type	202	None	replace
984	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.containsKey(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.containsKey(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.containsKey(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.containsKey(ch))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
985	[BUG]  [BUGGY]  i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||!remainders.containsKey(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||!remainders.containsKey(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||!remainders.containsKey(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.containsKey(ch))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
986	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(key)||  headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(key)||  headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.containsKey(key)||  headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    if(headers.containsKey(key))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
987	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null)  {  read++;  }	  if(headers!=    null)    {    if(headers.containsKey(key))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
988	[BUG]  [BUGGY]  if(i!=  null)  {  if(headers!=  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i!=  null)  {  if(headers!=  null)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i!=  null)  {  if(headers!=  null)  {  read++;  }	  if(headers!=    null)    {    if(headers.containsKey(key))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
989	[BUG]  [BUGGY]  While((  ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  While((  ch  =  i.read())!=  -1)  {  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	While((  ch  =  i.read())!=  -1)  {	  while((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
990	[BUG]  [BUGGY]  read  =  headers.indexOf(ch);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  headers.indexOf(ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  headers.indexOf(ch);	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
991	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch)||  headers.size()  ==  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch)||  headers.size()  ==  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.contains(ch)||  headers.size()  ==  0)  {  read++;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
992	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch)&&  headers.size()  >  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch)&&  headers.size()  >  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.contains(ch)&&  headers.size()  >  0)  {  read++;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
993	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch)||  headers.get(ch)!=  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch)||  headers.get(ch)!=  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.contains(ch)||  headers.get(ch)!=  0)  {  read++;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
994	[BUG]  [BUGGY]  if(i.hasNext())  {  while(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  while(headers.contains(ch))  {  read++;  }	  if(i.hasNext())    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
995	[BUG]  [BUGGY]  if(i.hasNext())  {  while(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  while(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.hasNext())    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
996	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).headers.reset();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).headers.reset();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).headers.reset();	  ((    TarArchiveEntry    <    K,    V>)i.next()).reset();    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
997	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).parsePaxHeaders(i);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).parsePaxHeaders(i);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).parsePaxHeaders(i);	  ((    TarArchiveEntry    <    K,    V>)i.next()).reset();    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
998	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)||(ch  ==  '-'  &&  coll.hasMoreElements()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)||(ch  ==  '-'  &&  coll.hasMoreElements()))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)||(ch  ==  '-'  &&  coll.hasMoreElements()))  {  read++;  }	  if(i.hasMoreElements()    ||    (ch    ==    '-'    &&    coll.hasMoreElements()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
999	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||  (ch  ==  '+'  &&  coll.hasMoreElements()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  ||  (ch  ==  '+'  &&  coll.hasMoreElements()))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  ||  (ch  ==  '+'  &&  coll.hasMoreElements()))  {  read++;  }	  if(i.hasMoreElements()    ||    (ch    ==    '-'    &&    coll.hasMoreElements()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
1000	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers!=  null  ||  headers.get(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers!=  null  ||  headers.get(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers!=  null  ||  headers.get(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers!=    null    ||    headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
1001	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers!=  null  ||  headers.get(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers!=  null  ||  headers.get(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers!=  null  ||  headers.get(ch))  {  read++;  }	  if(i.hasNext())    {    if(headers!=    null    ||    headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
1002	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers!=  null  ||  headers.contains(ch))  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers!=  null  ||  headers.contains(ch))  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers!=  null  ||  headers.contains(ch))  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers!=    null    ||    headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
1003	[BUG]  [BUGGY]  read  +=  i.hasMoreTokens();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  i.hasMoreTokens();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  i.hasMoreTokens();	  if(i.hasMoreTokens())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
1004	[BUG]  [BUGGY]  read  =  i.hasMoreTokens();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  i.hasMoreTokens();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  i.hasMoreTokens();	  if(i.hasMoreTokens())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
1005	[BUG]  [BUGGY]  if(i.hasMoreTokens()  ||  headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens()  ||  headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens()  ||  headers.containsKey(ch))  {  read++;  }	  if(i.hasMoreTokens())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
1006	[BUG]  [BUGGY]  read  =  i.hasNext()  &&  ch  ==  'n')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  i.hasNext()  &&  ch  ==  'n')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  i.hasNext()  &&  ch  ==  'n')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	213	None	replace
1007	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch  ==  'e')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  ch  ==  'e')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  ch  ==  'e')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	213	None	replace
1008	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch!=  'n')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  ch!=  'n')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  ch!=  'n')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	213	None	replace
1009	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch  ==  ',')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  ch  ==  ',')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  ch  ==  ',')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	213	None	replace
1010	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
1011	[BUG]  [BUGGY]  i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||!remainders.contains(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||!remainders.contains(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||!remainders.contains(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
1012	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
1013	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
1014	[BUG]  [BUGGY]  ||(i.hasNext()  &&  i.next()!=  headers.length))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  i.next()!=  headers.length))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  i.next()!=  headers.length))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  ||(i.hasNext()    &&    i.next()    ==    headers.length))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
1015	[BUG]  [BUGGY]  ||(i.hasNext()  &&  i.next()  ==  headers.length))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  i.next()  ==  headers.length))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  i.next()  ==  headers.length))  {  read++;  }	  ||(i.hasNext()    &&    i.next()    ==    headers.length))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
1016	[BUG]  [BUGGY]  ||(i.hasNext()  &&  i.next()  ==  headers.length  +  1))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  i.next()  ==  headers.length  +  1))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  i.next()  ==  headers.length  +  1))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  ||(i.hasNext()    &&    i.next()    ==    headers.length))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
1017	[BUG]  [BUGGY]  ||(i.hasNext()  &&  i.next()  <  headers.length))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  i.next()  <  headers.length))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  i.next()  <  headers.length))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  ||(i.hasNext()    &&    i.next()    ==    headers.length))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
1018	[BUG]  [BUGGY]  ||(i.hasNext()  &&  i.next()  ==  headers.length))  {  read++;  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  i.next()  ==  headers.length))  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  i.next()  ==  headers.length))  {  read++;	  ||(i.hasNext()    &&    i.next()    ==    headers.length))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
1019	[BUG]  [BUGGY]  ||(i.hasNext()  &&  i.next()  >=  headers.length))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  i.next()  >=  headers.length))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  i.next()  >=  headers.length))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  ||(i.hasNext()    &&    i.next()    ==    headers.length))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
1020	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
1021	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_FOR))  {  read++;  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_FOR))  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_FOR))  {  read++;	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
1022	[BUG]  [BUGGY]  read  =  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(ch);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(ch);	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	204	None	replace
1023	[BUG]  [BUGGY]  read  +=  isEnabled(Feature.QUOTE_FIELD_NAMES);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  isEnabled(Feature.QUOTE_FIELD_NAMES);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  isEnabled(Feature.QUOTE_FIELD_NAMES);	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	204	None	replace
1024	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.hasNext())  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
1025	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.hasNext())  {  read++;  }	  if(i.hasNext())    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
1026	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
1027	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
1028	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
1029	[BUG]  [BUGGY]  if(i.hasChildren())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasChildren())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasChildren())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
1030	[BUG]  [BUGGY]  read  =  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKey(),  headers);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKey(),  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKey(),  headers);	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
1031	[BUG]  [BUGGY]  if(i.hasChildren())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasChildren())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasChildren())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
1032	[BUG]  [BUGGY]  read  =  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKey());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKey());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKey());	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
1033	[BUG]  [BUGGY]  if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next(),    headers.get(i.next()));    }    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
1034	[BUG]  [BUGGY]  if(ch  ==  '>')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  '>')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  '>')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next(),    headers.get(i.next()));    }    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
1035	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  read;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  read;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  read;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next(),    headers.get(i.next()));    }    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
1036	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next()  -  1,  headers.get(i.next()));  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next()  -  1,  headers.get(i.next()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next()  -  1,  headers.get(i.next()));  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next(),    headers.get(i.next()));    }    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
1037	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
1038	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
1039	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_KEY)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_KEY)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_KEY)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
1040	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.reset();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.reset();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)?  read++  :  i.reset();	  ((    ch    =    i.read())    >=    -1)?    read++    :    i.next();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
1041	[BUG]  [BUGGY]  if(i!=  null)  {  if(!hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i!=  null)  {  if(!hasHitEOF)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i!=  null)  {  if(!hasHitEOF)  {  read++;  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	203	None	replace
1042	[BUG]  [BUGGY]  if(i.hasChildren())  {  if(!hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasChildren())  {  if(!hasHitEOF)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasChildren())  {  if(!hasHitEOF)  {  read++;  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	203	None	replace
1043	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  reader++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  reader++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  reader++;  }  else  {  headers.put(ch,  headers);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	203	None	replace
1044	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  Read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  Read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  Read++;  }  else  {  headers.put(ch,  headers);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	203	None	replace
1045	[BUG]  [BUGGY]  i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
1046	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
1047	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	189	None	replace
1048	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	189	None	replace
1049	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	189	None	replace
1050	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	189	None	replace
1051	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	189	None	replace
1052	[BUG]  [BUGGY]  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));	  headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
1053	[BUG]  [BUGGY]  headers.put(i.getKey(),  parsePaxHeaders(i.getToken()));  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.getKey(),  parsePaxHeaders(i.getToken()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.getKey(),  parsePaxHeaders(i.getToken()));	  headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
1054	[BUG]  [BUGGY]  headers.put(i.getKey(),  parsePaxHeaders(i.getCurrentToken()));  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.getKey(),  parsePaxHeaders(i.getCurrentToken()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.getKey(),  parsePaxHeaders(i.getCurrentToken()));	  headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
1055	[BUG]  [BUGGY]  headers.put(ch,  parsePaxHeaders(i.nextToken()));  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(ch,  parsePaxHeaders(i.nextToken()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(ch,  parsePaxHeaders(i.nextToken()));	  headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
1056	[BUG]  [BUGGY]  Reader  reader  =  headers.read(i.nextElement());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Reader  reader  =  headers.read(i.nextElement());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Reader  reader  =  headers.read(i.nextElement());	  if(i.hasNext())    {    reader++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	178	None	replace
1057	[BUG]  [BUGGY]  read  +=  i.nextElement();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  i.nextElement();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  i.nextElement();	  if(i.hasNext())    {    reader++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	178	None	replace
1058	[BUG]  [BUGGY]  Reader  reader  =  headers.get(i.nextElement(),  len);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Reader  reader  =  headers.get(i.nextElement(),  len);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Reader  reader  =  headers.get(i.nextElement(),  len);	  if(i.hasNext())    {    reader++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	178	None	replace
1059	[BUG]  [BUGGY]  Reader  reader  =  headers.read(i.nextElement(),  len);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Reader  reader  =  headers.read(i.nextElement(),  len);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Reader  reader  =  headers.read(i.nextElement(),  len);	  if(i.hasNext())    {    reader++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	178	None	replace
1060	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch  <  'n'  ||  ch  >  't')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  ch  <  'n'  ||  ch  >  't')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  ch  <  'n'  ||  ch  >  't')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n'    ||    ch    ==    't')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	211	None	replace
1061	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch  >=  'n'  ||  ch  ==  't')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  ch  >=  'n'  ||  ch  ==  't')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  ch  >=  'n'  ||  ch  ==  't')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n'    ||    ch    ==    't')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	211	None	replace
1062	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch  ==  'n'  ||  ch!=  't')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  ch  ==  'n'  ||  ch!=  't')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  ch  ==  'n'  ||  ch!=  't')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n'    ||    ch    ==    't')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	211	None	replace
1063	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken())  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken())  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken())	  if(i.hasNextToken())    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	198	None	replace
1064	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_FIRST)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_FIRST)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_FIRST)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_FIRST))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
1065	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_FIRST)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_FIRST)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_FIRST)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_FIRST))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
1066	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey()  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey()	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(i.getKey()))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
1067	[BUG]  [BUGGY]  Reader  reader  =  parsePaxHeaders(i.nextToken());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Reader  reader  =  parsePaxHeaders(i.nextToken());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Reader  reader  =  parsePaxHeaders(i.nextToken());	  if(i.hasMoreTokens())    {    reader++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
1068	[BUG]  [BUGGY]  Reader  reader  =  headers.get(i.nextToken());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Reader  reader  =  headers.get(i.nextToken());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Reader  reader  =  headers.get(i.nextToken());	  if(i.hasMoreTokens())    {    reader++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
1069	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getCurrentSize());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getCurrentSize());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)?  read++  :  i.getCurrentSize());	  ((    ch    =    i.read())!=    -1)?    read++    :    i.next());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
1070	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getHeaderLength());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getHeaderLength());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)?  read++  :  i.getHeaderLength());	  ((    ch    =    i.read())!=    -1)?    read++    :    i.next());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
1071	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getHeaderSize());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getHeaderSize());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)?  read++  :  i.getHeaderSize());	  ((    ch    =    i.read())!=    -1)?    read++    :    i.next());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
1072	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.reset());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.reset());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)?  read++  :  i.reset());	  ((    ch    =    i.read())!=    -1)?    read++    :    i.next());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
1073	[BUG]  [BUGGY]  read  =  parsePaxHeaders(i.getText());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  parsePaxHeaders(i.getText());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  parsePaxHeaders(i.getText());	  read    =    parsePaxHeaders(i.nextToken());    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
1074	[BUG]  [BUGGY]  read  =  parsePaxHeaders(i,  headers.nextToken());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  parsePaxHeaders(i,  headers.nextToken());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  parsePaxHeaders(i,  headers.nextToken());	  read    =    parsePaxHeaders(i.nextToken());    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
1075	[BUG]  [BUGGY]  read  =  parsePaxHeaders(i.getAscii());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  parsePaxHeaders(i.getAscii());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  parsePaxHeaders(i.getAscii());	  read    =    parsePaxHeaders(i.nextToken());    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
1076	[BUG]  [BUGGY]  read  =  parsePaxHeaders(i.getSourceName());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  parsePaxHeaders(i.getSourceName());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  parsePaxHeaders(i.getSourceName());	  read    =    parsePaxHeaders(i.nextToken());    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
1077	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers!=  null)read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers!=  null)read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers!=  null)read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null)    {    if(headers.contains(ch))    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
1078	[BUG]  [BUGGY]  if(headers!=  null)  {  while(headers.contains(ch))  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  while(headers.contains(ch))  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  while(headers.contains(ch))  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null)    {    if(headers.contains(ch))    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
1079	[BUG]  [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
1080	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
1081	[BUG]  [BUGGY]  if(i.hasChildren())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasChildren())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasChildren())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
1082	[BUG]  [BUGGY]  if(zipEncoding  ==  null  ||!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(zipEncoding  ==  null  ||!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(zipEncoding  ==  null  ||!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
1083	[BUG]  [BUGGY]  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.hasNext())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.hasNext())  {  read++;  }	  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
1084	[BUG]  [BUGGY]  if(i.hasNextToken())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNextToken())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNextToken())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }	  if(i.hasMoreTokens()    ||    i.hasNextToken())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	200	None	replace
1085	[BUG]  [BUGGY]  if(i.hasNextToken()  ||  i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNextToken()  ||  i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNextToken()  ||  i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }	  if(i.hasMoreTokens()    ||    i.hasNextToken())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	200	None	replace
1086	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(len);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(len);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setRead(len);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
1087	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(remainderLen);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(remainderLen);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setRead(remainderLen);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
1088	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(read  +  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(read  +  1);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setRead(read  +  1);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
1089	[BUG]  [BUGGY]  if(i.hasNext()  &&  i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  &&  i.hasNext())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  &&  i.hasNext())  {  read++;  }	  if(i.hasNext()    ||    i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
1090	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
1091	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
1092	[BUG]  [BUGGY]  if(headers.size()  ==  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.size()  ==  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.size()  ==  0)  {  read++;  }	  if(i.hasMoreElements()    ||    headers.size()    ==    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
1093	[BUG]  [BUGGY]  if(headers.hasMoreElements()  ||  headers.size()  ==  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.hasMoreElements()  ||  headers.size()  ==  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.hasMoreElements()  ||  headers.size()  ==  0)  {  read++;  }	  if(i.hasMoreElements()    ||    headers.size()    ==    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
1094	[BUG]  [BUGGY]  if(i.hasNext()  ||  headers.size()  ==  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  headers.size()  ==  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  headers.size()  ==  0)  {  read++;  }	  if(i.hasMoreElements()    ||    headers.size()    ==    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
1095	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_KEY)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_KEY)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_KEY)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
1096	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_KEY)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_KEY)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_KEY)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
1097	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&!i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&!i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&!i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
1098	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  length);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  length);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  length);	  ((    TarArchiveEntry)i).setHeaders(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
1099	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  restLen);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  restLen);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  restLen);	  ((    TarArchiveEntry)i).setHeaders(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
1100	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  parsePaxHeaders(i));  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  parsePaxHeaders(i));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  parsePaxHeaders(i));	  ((    TarArchiveEntry)i).setHeaders(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
1101	[BUG]  [BUGGY]  ||(i.hasNext()  &&  ch.hasNext()))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  ch.hasNext()))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  ch.hasNext()))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  ||(i.hasNext()    &&    i.hasNext()))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
1102	[BUG]  [BUGGY]  ||(i.hasNext()  &&!remainders.contains(ch)))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&!remainders.contains(ch)))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&!remainders.contains(ch)))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  ||(i.hasNext()    &&    i.hasNext()))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
1103	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_SIZE)||  i.isEnabled(Feature.QUOTE_SIZE))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_SIZE)||  i.isEnabled(Feature.QUOTE_SIZE))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_SIZE)||  i.isEnabled(Feature.QUOTE_SIZE))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
1104	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_BUFFER_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_BUFFER_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_BUFFER_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
1105	[BUG]  [BUGGY]  if(headers.hasMoreElements()  ||  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.hasMoreElements()  ||  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.hasMoreElements()  ||  headers.contains(ch))  {  read++;  }	  if(i.hasMoreElements()    ||    headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
1106	[BUG]  [BUGGY]  if(headers.size()  ==  0  ||  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.size()  ==  0  ||  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.size()  ==  0  ||  headers.contains(ch))  {  read++;  }	  if(i.hasMoreElements()    ||    headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
1107	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValu  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValu  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValu	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
1108	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  headers.get(i.nextElement(),  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  headers.get(i.nextElement(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  read++;  }  else  {  headers.get(i.nextElement(),  headers);  }	  if(i.hasNext())    {    read++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
1109	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
1110	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
1111	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
1112	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
1113	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
1114	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
1115	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
1116	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
1117	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  reader++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  reader++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  reader++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
1118	[BUG]  [BUGGY]  if(i.hasNext())  {  while(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  while(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
1119	[BUG]  [BUGGY]  if(i.hasNext())  {  while(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  while(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
1120	[BUG]  [BUGGY]  if(i.hasNext())  {  while(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  while(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
1121	[BUG]  [BUGGY]  headers  =  parsePaxHeaders(i);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers  =  parsePaxHeaders(i);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers  =  parsePaxHeaders(i);	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
1122	[BUG]  [BUGGY]  if(i.hasNext())  {  while(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  while(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
1123	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers!=  null)  {  while(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers!=  null)  {  while(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers!=  null)  {  while(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null)    {    while(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
1124	[BUG]  [BUGGY]  if(i.hasNext())  {  while(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  while(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }	  if(headers!=    null)    {    while(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
1125	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.hasNext())  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
1126	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
1127	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.hasNext())  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
1128	[BUG]  [BUGGY]  if(i.hasNext())  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
1129	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch  ==  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch  ==  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch  ==  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    ch    ==    'n')    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
1130	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&  ch  ==  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&  ch  ==  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&  ch  ==  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    ch    ==    'n')    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
1131	[BUG]  [BUGGY]  InputStream  is  =  headers.get(i.read  -  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.get(i.read  -  1);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.get(i.read  -  1);	  InputStream    is    =    headers.get(headers.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
1132	[BUG]  [BUGGY]  Reader  reader  =  headers.read(i.next());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Reader  reader  =  headers.read(i.next());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Reader  reader  =  headers.read(i.next());	  if(i.hasNext())    {    reader++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
1133	[BUG]  [BUGGY]  read  +=  i.hasNext();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  i.hasNext();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  i.hasNext();	  if(i.hasNext())    {    reader++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
1134	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getVal  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getVal  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getVal	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
1135	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  reader++;  }  else  {  headers.put(i.getCurrentElement(),  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  reader++;  }  else  {  headers.put(i.getCurrentElement(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements())  {  reader++;  }  else  {  headers.put(i.getCurrentElement(),  headers);  }	  if(i.hasMoreElements())    {    read++;    }    else    {    headers.put(i.getCurrentElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
1136	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  read++;  }  else  {  headers.get(i.getCurrentElement(),  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  read++;  }  else  {  headers.get(i.getCurrentElement(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements())  {  read++;  }  else  {  headers.get(i.getCurrentElement(),  headers);  }	  if(i.hasMoreElements())    {    read++;    }    else    {    headers.put(i.getCurrentElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
1137	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
1138	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getHeaderLength();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getHeaderLength();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)?  read++  :  i.getHeaderLength();	  ((    ch    =    i.read())!=    -1)?    read++    :    i.next();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
1139	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getHeaderSize();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getHeaderSize();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)?  read++  :  i.getHeaderSize();	  ((    ch    =    i.read())!=    -1)?    read++    :    i.next();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
1140	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
1141	[BUG]  [BUGGY]  Headers.put(headers.get(ch),  i);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(headers.get(ch),  i);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(headers.get(ch),  i);	  Headers.put(i.next(),    headers);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
1142	[BUG]  [BUGGY]  Headers.put(i.next(),  read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(i.next(),  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(i.next(),  read);	  Headers.put(i.next(),    headers);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
1143	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
1144	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
1145	[BUG]  [BUGGY]  if(i.hasNext())  {  while(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  while(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
1146	[BUG]  [BUGGY]  if(i.hasNext())  {  while(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  while(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
1147	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
1148	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size());  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size());  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size());    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
1149	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size());  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size());  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size());    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
1150	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.get(ch));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size());    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
1151	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size());  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size());  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size());    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
1152	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
1153	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SIZE))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SIZE))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SIZE))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
1154	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
1155	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
1156	[BUG]  [BUGGY]  InputStream  is  =  headers.readObject();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.readObject();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.readObject();	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
1157	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
1158	[BUG]  [BUGGY]  if(i!=  null)  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i!=  null)  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i!=  null)  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
1159	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    length;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	196	None	replace
1160	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    length;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	196	None	replace
1161	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    length;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	196	None	replace
1162	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    length;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	196	None	replace
1163	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    length;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	196	None	replace
1164	[BUG]  [BUGGY]  i.reset();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.reset();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	i.reset();	  if(!i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	212	None	replace
1165	[BUG]  [BUGGY]  if(i.hasNext())  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
1166	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||  i.nextElement())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  ||  i.nextElement())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  ||  i.nextElement())  {  read++;  }	  if(i.hasMoreElements()    ||    i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
1167	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getLastChild()));  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getLastChild()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getLastChild()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getParent()));    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
1168	[BUG]  [BUGGY]  read  =  parsePaxHeaders(i.getParent());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  parsePaxHeaders(i.getParent());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  parsePaxHeaders(i.getParent());	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getParent()));    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
1169	[BUG]  [BUGGY]  headers.put(i.nextToken(),  parsePaxHeaders(i.getNext()));  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.nextToken(),  parsePaxHeaders(i.getNext()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.nextToken(),  parsePaxHeaders(i.getNext()));	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getParent()));    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
1170	[BUG]  [BUGGY]  if(i.isEmpty())  {  if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEmpty())  {  if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEmpty())  {  if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
1171	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
1172	[BUG]  [BUGGY]  if(i.isEmpty())  {  if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEmpty())  {  if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEmpty())  {  if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
1173	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePa  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePa  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePa	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePa    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
1174	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseP  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseP  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseP	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePa    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
1175	[BUG]  [BUGGY]  i.setEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.hasNext())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	i.setEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.hasNext())  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
1176	[BUG]  [BUGGY]  read  +=  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.hasNext())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.hasNext())  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
1177	[BUG]  [BUGGY]  i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.hasNext())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.hasNext())  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
1178	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.size()  >  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.size()  >  0)  {  read++;  }	  if(i.hasMoreElements()    ||    headers.size()    >    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	175	None	replace
1179	[BUG]  [BUGGY]  if(headers.hasMoreElements()  ||  headers.size()  >  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.hasMoreElements()  ||  headers.size()  >  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.hasMoreElements()  ||  headers.size()  >  0)  {  read++;  }	  if(i.hasMoreElements()    ||    headers.size()    >    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	175	None	replace
1180	[BUG]  [BUGGY]  read  =  i.read(0);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  i.read(0);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  i.read(0);	  read    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
1181	[BUG]  [BUGGY]  read  =  i.read(remainders);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  i.read(remainders);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  i.read(remainders);	  read    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
1182	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  reader++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  reader++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  reader++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
1183	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }	  if(!hasHitEOF)    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
1184	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers	  if(!hasHitEOF)    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
1185	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.n  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.n  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.n	  if(!hasHitEOF)    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
1186	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.	  if(!hasHitEOF)    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
1187	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValu    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
1188	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeader  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeader  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeader	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValu    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
1189	[BUG]  [BUGGY]  headers.put(i.getSourceName(),  i);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.getSourceName(),  i);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.getSourceName(),  i);	  headers.put(i.nextElement(),    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
1190	[BUG]  [BUGGY]  headers.put(i.getValue(),  ch);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.getValue(),  ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.getValue(),  ch);	  headers.put(i.nextElement(),    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
1191	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
1192	[BUG]  [BUGGY]  i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
1193	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
1194	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).setMoreElements(remainders,  read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i.next()).setMoreElements(remainders,  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i.next()).setMoreElements(remainders,  read);	  ((    TarArchiveEntry)i.next()).setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
1195	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  reader++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  reader++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  reader++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
1196	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parsePaxHeaders(i.getKey()));  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
1197	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  read++;  }	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
1198	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  read++;  }	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
1199	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
1200	[BUG]  [BUGGY]  if(i.isEmpty())  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEmpty())  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEmpty())  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
1201	[BUG]  [BUGGY]  if(i.isEmpty())  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEmpty())  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEmpty())  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
1202	[BUG]  [BUGGY]  if(i.hasNext())  {  int  len  =  i.next();  if(len  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  int  len  =  i.next();  if(len  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  int  len  =  i.next();  if(len  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
1203	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
1204	[BUG]  [BUGGY]  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
1205	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(remainders,  read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(remainders,  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(remainders,  read);	  ((    TarArchiveEntry)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
1206	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(read);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(read);	  ((    TarArchiveEntry)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
1207	[BUG]  [BUGGY]  read  +=  i.getCharacterElements();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  i.getCharacterElements();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  i.getCharacterElements();	  read    +=    i.hasMoreElements();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
1208	[BUG]  [BUGGY]  read  +=  i.getCharacterEncoding();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  i.getCharacterEncoding();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  i.getCharacterEncoding();	  read    +=    i.hasMoreElements();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
1209	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setRead(bodyBuf,  read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setRead(bodyBuf,  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setRead(bodyBuf,  read);	  ((    TarArchiveEntry)i).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
1210	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setRead(ch);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setRead(ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setRead(ch);	  ((    TarArchiveEntry)i).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
1211	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
1212	[BUG]  [BUGGY]  if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getKeyword  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getKeyword  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getKeyword	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next().getKeyword()));    }    	non-compiled	[CE]  illegal  start  of  type	192	None	replace
1213	[BUG]  [BUGGY]  if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getKey  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getKey  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getKey	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next().getKeyword()));    }    	non-compiled	[CE]  illegal  start  of  type	192	None	replace
1214	[BUG]  [BUGGY]  if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next().getKeyword()));    }    	non-compiled	[CE]  illegal  start  of  type	192	None	replace
1215	[BUG]  [BUGGY]  While((  ch  =  i.read())!=  -1)  {  headers.put(ch,  headers);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  While((  ch  =  i.read())!=  -1)  {  headers.put(ch,  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	While((  ch  =  i.read())!=  -1)  {  headers.put(ch,  headers);	  while((    ch    =    i.read())!=    -1)    {    headers.put(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
1216	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(key)||  headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(key)||  headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.containsKey(key)||  headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null)    {    if(headers.containsKey(key))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
1217	[BUG]  [BUGGY]  if(i.isEmpty())  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEmpty())  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEmpty())  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null)    {    if(headers.containsKey(key))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
1218	[BUG]  [BUGGY]  headers  =  parsePaxHeaders(i,  ch);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers  =  parsePaxHeaders(i,  ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers  =  parsePaxHeaders(i,  ch);	  if(headers!=    null)    {    if(headers.containsKey(key))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
1219	[BUG]  [BUGGY]  headers.put(keyword,  i.next());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(keyword,  i.next());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(keyword,  i.next());	  headers.put(i.next(),    headers);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
1220	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NA))  {  read++;  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
1221	[BUG]  [BUGGY]  InputStream  is  =  headers.getInputStream(i.getResourceName());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.getInputStream(i.getResourceName());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.getInputStream(i.getResourceName());	  InputStream    is    =    headers.getInputStream(i.inputStream());    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
1222	[BUG]  [BUGGY]  InputStream  is  =  headers.getInputStream(i.getRead());  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.getInputStream(i.getRead());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.getInputStream(i.getRead());	  InputStream    is    =    headers.getInputStream(i.inputStream());    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
1223	[BUG]  [BUGGY]  InputStream  is  =  headers.getInputStream(ch.inputStream());  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.getInputStream(ch.inputStream());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.getInputStream(ch.inputStream());	  InputStream    is    =    headers.getInputStream(i.inputStream());    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
1224	[BUG]  [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }	  ||(i.hasMoreTokens()    &&    i.hasMoreTokens()))    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken())    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
1225	[BUG]  [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken	  ||(i.hasMoreTokens()    &&    i.hasMoreTokens()))    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken())    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
1226	[BUG]  [BUGGY]  i.setMoreElements(headers);  read++;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setMoreElements(headers);  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	i.setMoreElements(headers);  read++;	  if(!i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	176	None	replace
1227	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.hasNext())  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(ch)||    headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
1228	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.hasNext())  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }	  if(i.hasNext())    {    if(headers.containsKey(ch)||    headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
1229	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	186	None	replace
1230	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	186	None	replace
1231	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	186	None	replace
1232	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	186	None	replace
1233	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	186	None	replace
1234	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	186	None	replace
1235	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
1236	[BUG]  [BUGGY]  int  read  =  i.read(headers,  0,  read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  int  read  =  i.read(headers,  0,  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	int  read  =  i.read(headers,  0,  read);	  int    read    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
1237	[BUG]  [BUGGY]  Integer  read  =  i.read();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Integer  read  =  i.read();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Integer  read  =  i.read();	  int    read    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
1238	[BUG]  [BUGGY]  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
1239	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch)||  headers.get(ch)!=  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch)||  headers.get(ch)!=  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.containsKey(ch)||  headers.get(ch)!=  0)  {  read++;  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
1240	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch)&&  headers.size()  >  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch)&&  headers.size()  >  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.containsKey(ch)&&  headers.size()  >  0)  {  read++;  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
1241	[BUG]  [BUGGY]  InputStream  is  =  i.readInputStream(true);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  i.readInputStream(true);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  i.readInputStream(true);	  InputStream    is    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
1242	[BUG]  [BUGGY]  InputStream  is  =  i.readOutputStream();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  i.readOutputStream();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  i.readOutputStream();	  InputStream    is    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
1243	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!read  >  0)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!read  >  0)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!read  >  0)  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
1244	[BUG]  [BUGGY]  read  +=  headers.get(ch);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  headers.get(ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  headers.get(ch);	  read    +=    headers.size();    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
1245	[BUG]  [BUGGY]  read  +=  headers.indexOf(ch);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  headers.indexOf(ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  headers.indexOf(ch);	  read    +=    headers.size();    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
1246	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
1247	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
1248	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
1249	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read  <  =  0)  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read  <  =  0)  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read  <  =  0)  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
1250	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.hasNext())  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.hasNext())  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.hasNext())  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
1251	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken()  -  parsePaxHeaders(i.nextToken()));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken()  -  parsePaxHeaders(i.nextToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken()  -  parsePaxHeaders(i.nextToken()));  }	  if(i.hasMoreTokens())    {    while(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
1252	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }	  if(i.hasMoreTokens())    {    while(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
1253	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));	  if(i.hasMoreTokens())    {    while(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
1254	[BUG]  [BUGGY]  if(i.isEmpty())  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEmpty())  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEmpty())  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    while(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
1255	[BUG]  [BUGGY]  if(i.isEmpty())  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEmpty())  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEmpty())  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }	  if(headers!=    null)    {    while(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
1256	[BUG]  [BUGGY]  int  read  =  headers.size()  /  2;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  int  read  =  headers.size()  /  2;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	int  read  =  headers.size()  /  2;	  int    read    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
1257	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty()))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty()))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty()))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES    ||    ch.isEmpty()))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
1258	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch!=  null))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch!=  null))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch!=  null))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES    ||    ch.isEmpty()))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
1259	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch  ==  null))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch  ==  null))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch  ==  null))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES    ||    ch.isEmpty()))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
1260	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty()))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty()))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty()))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES    ||    ch.isEmpty()))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
1261	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty())&&  headers.size()  >  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty())&&  headers.size()  >  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty())&&  headers.size()  >  0)  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES    ||    ch.isEmpty()))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
1262	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty())&&  headers.get(0,  headers.size()  -  1)!=  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty())&&  headers.get(0,  headers.size()  -  1)!=  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty())&&  headers.get(0,  headers.size()  -  1)!=  0)  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES    ||    ch.isEmpty()))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
1263	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  if(!isEOF)  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  if(!isEOF)  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  if(!isEOF)  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }	  if(!hasHitEOF)    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
1264	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  if(!hitEOF)  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  if(!hitEOF)  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  if(!hitEOF)  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }	  if(!hasHitEOF)    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
1265	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getToken()));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getToken()));  }	  if(!hasHitEOF)    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
1266	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }	  if(!hasHitEOF)    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
1267	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.nextToken()  -  parsePaxHeaders(i.nextToken()));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.nextToken()  -  parsePaxHeaders(i.nextToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.nextToken()  -  parsePaxHeaders(i.nextToken()));  }	  if(!hasHitEOF)    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
1268	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES    ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
1269	[BUG]  [BUGGY]  if(i.hasChronology())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasChronology())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasChronology())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES    ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
1270	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(i.getKey()))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
1271	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey()  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey()	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(i.getKey()))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
1272	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
1273	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
1274	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
1275	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
1276	[BUG]  [BUGGY]  read  +=  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    read!=    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
1277	[BUG]  [BUGGY]  i.setEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	i.setEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    read!=    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
1278	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE	  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
1279	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString	  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
1280	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString	  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
1281	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.get(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1282	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.get(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1283	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.get(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1284	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.get(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1285	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.get(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1286	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString()  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString()	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next()).toString());    }    	non-compiled	[CE]  illegal  start  of  type	194	None	replace
1287	[BUG]  [BUGGY]  if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString()  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString()	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next()).toString());    }    	non-compiled	[CE]  illegal  start  of  type	194	None	replace
1288	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString());  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString());  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString());  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next()).toString());    }    	non-compiled	[CE]  illegal  start  of  type	194	None	replace
1289	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next()).toString());    }    	non-compiled	[CE]  illegal  start  of  type	194	None	replace
1290	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }	  if(i.hasNext())    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	199	None	replace
1291	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
1292	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreTokens())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.hasMoreTokens())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.hasMoreTokens())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }	  if(i.hasMoreTokens())    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
1293	[BUG]  [BUGGY]  if(i.hasNextToken())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNextToken())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNextToken())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }	  if(i.hasMoreTokens())    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
1294	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getParent()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getParent()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getParent()));  return  headers;  }	  if(i.hasMoreTokens())    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
1295	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME,  read))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME,  read))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME,  read))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
1296	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE	  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
1297	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE	  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
1298	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
1299	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature	  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
1300	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).addHeader(headers,  0);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i.next()).addHeader(headers,  0);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i.next()).addHeader(headers,  0);	  ((    TarArchiveEntry)i.next()).addHeader(headers,    read);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
1301	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).addHeader(headers,  read,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i.next()).addHeader(headers,  read,  hasHitEOF);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i.next()).addHeader(headers,  read,  hasHitEOF);	  ((    TarArchiveEntry)i.next()).addHeader(headers,    read);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
1302	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
1303	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	193	None	replace
1304	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.hasNext())  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.hasNext())  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.hasNext())  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	193	None	replace
1305	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.contains(ch))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.contains(ch))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.contains(ch))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	193	None	replace
1306	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  headers.get(i.next()  -  1,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  headers.get(i.next()  -  1,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  read++;  }  else  {  headers.get(i.next()  -  1,  headers);  }	  if(i.hasNext())    {    read++;    }    else    {    headers.get(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
1307	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
1308	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
1309	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
1310	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
1311	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
1312	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
1313	[BUG]  [BUGGY]  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null    ||    headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
1314	[BUG]  [BUGGY]  if(headers!=  null)  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  headers.put(ch,  headers);  }	  if(headers!=    null    ||    headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
1315	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.containsKey(ch)&&!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null  ||  headers.containsKey(ch)&&!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null  ||  headers.containsKey(ch)&&!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null    ||    headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
1316	[BUG]  [BUGGY]  if(headers!=  null)  {  headers.put(ch,  headers);  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  headers.put(ch,  headers);  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  headers.put(ch,  headers);  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null    ||    headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
1317	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  if(headers.containsKey(keyword))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  if(headers.containsKey(keyword))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.hasNext())  {  if(headers.containsKey(keyword))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(keyword))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
1318	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(keyword)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(keyword)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.containsKey(keyword)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(keyword))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
1319	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(keyword)&&!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(keyword)&&!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.containsKey(keyword)&&!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(keyword))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
1320	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(keyword,  read))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(keyword,  read))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.containsKey(keyword,  read))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(keyword))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
1321	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  if(headers.containsKey(keyword))  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  if(headers.containsKey(keyword))  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.hasNext())  {  if(headers.containsKey(keyword))  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(keyword))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
1322	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.hasNext())  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.contains(ch)||    headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
1323	[BUG]  [BUGGY]  read  =  headers.next();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  headers.next();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  headers.next();	  read    =    i.next();    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
1324	[BUG]  [BUGGY]  read  =  i.next()  +  len;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  i.next()  +  len;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  i.next()  +  len;	  read    =    i.next();    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
1325	[BUG]  [BUGGY]  read  =  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(0,  headers.size()  -  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(0,  headers.size()  -  1);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(0,  headers.size()  -  1);	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
1326	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
1327	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_KEY)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_KEY)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_KEY)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
1328	[BUG]  [BUGGY]  i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
1329	[BUG]  [BUGGY]  headers.put(i.getText(),  parsePaxHeaders(i.getText()));  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.getText(),  parsePaxHeaders(i.getText()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.getText(),  parsePaxHeaders(i.getText()));	  headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
1330	[BUG]  [BUGGY]  Headers.put(i.getElement(),  headers);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(i.getElement(),  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(i.getElement(),  headers);	  Headers.put(i.nextElement(),    headers);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
1331	[BUG]  [BUGGY]  Headers.put(i.getSource(),  headers);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(i.getSource(),  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(i.getSource(),  headers);	  Headers.put(i.nextElement(),    headers);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
1332	[BUG]  [BUGGY]  Headers.put(i.getAscii(),  headers);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(i.getAscii(),  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(i.getAscii(),  headers);	  Headers.put(i.nextElement(),    headers);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
1333	[BUG]  [BUGGY]  read  =  headers.indexOf(ch)+  1;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  headers.indexOf(ch)+  1;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  headers.indexOf(ch)+  1;	  if(i.hasNext())    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
1334	[BUG]  [BUGGY]  read  +=  headers.indexOf(ch)+  1;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  headers.indexOf(ch)+  1;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  headers.indexOf(ch)+  1;	  if(i.hasNext())    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
1335	[BUG]  [BUGGY]  read  +=  headers.indexOf(ch)-  1;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  headers.indexOf(ch)-  1;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  headers.indexOf(ch)-  1;	  if(i.hasNext())    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
1336	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NA),  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NA),  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NA),  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
1337	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
1338	[BUG]  [BUGGY]  ((  read  =  i.read())  >>  -1))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  read  =  i.read())  >>  -1))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  read  =  i.read())  >>  -1))  {  read++;  }	  ((    ch    =    i.read())!=    -1))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
1339	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)&&(i.hasNext()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)&&(i.hasNext()))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)&&(i.hasNext()))  {  read++;  }	  ((    ch    =    i.read())!=    -1))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
1340	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
1341	[BUG]  [BUGGY]  if(headers.containsKey(ch)||  headers.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.containsKey(ch)||  headers.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.containsKey(ch)||  headers.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
1342	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
1343	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
1344	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SIZE))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SIZE))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SIZE))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
1345	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
1346	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
1347	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(len);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(len);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(len);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
1348	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(contents);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(contents);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(contents);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
1349	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parsePaxHeaders(i.getKey()));  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
1350	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
1351	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_KEY)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_KEY)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_KEY)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
1352	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  read,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  read,  hasHitEOF);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  read,  hasHitEOF);	  ((    TarArchiveEntry)i).setHeaders(headers,    read);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
1353	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.get(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
1354	[BUG]  [BUGGY]  if(i.hasNext())  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
1355	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(ch,  headers);  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
1356	[BUG]  [BUGGY]  if(i.hasNext()  ||  hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  hasHitEOF)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  hasHitEOF)  {  read++;  }	  if(i.hasMoreElements()    ||    hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
1357	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
1358	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
1359	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
1360	[BUG]  [BUGGY]  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
1361	[BUG]  [BUGGY]  if(i.hasNext())  {  while(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  returned  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  returned  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  while(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  returned  headers;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    returned    headers;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
1362	[BUG]  [BUGGY]  int  len  =  i.read(headers);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  int  len  =  i.read(headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	int  len  =  i.read(headers);	  int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
1363	[BUG]  [BUGGY]  int  len  =  i.read(CH);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  int  len  =  i.read(CH);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	int  len  =  i.read(CH);	  int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
1364	[BUG]  [BUGGY]  int  len  =  i.read()  +  read;  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  int  len  =  i.read()  +  read;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	int  len  =  i.read()  +  read;	  int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
1365	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.get(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
1366	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.contains(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.get(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
1367	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
1368	[BUG]  [BUGGY]  if(i.hasNext())  {  while(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  while(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
1369	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
1370	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
1371	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
1372	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
1373	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
1374	[BUG]  [BUGGY]  if(i.getKey()  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.getKey()  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.getKey()  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
1375	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
1376	[BUG]  [BUGGY]  if(i.read()!=  -1)  {  if(headers!=  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()!=  -1)  {  if(headers!=  null)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()!=  -1)  {  if(headers!=  null)  {  read++;  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
1377	[BUG]  [BUGGY]  if(i.read()  >  -1)  {  if(headers!=  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()  >  -1)  {  if(headers!=  null)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()  >  -1)  {  if(headers!=  null)  {  read++;  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
1378	[BUG]  [BUGGY]  if(i.read()!=  -1)  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()!=  -1)  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()!=  -1)  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
1379	[BUG]  [BUGGY]  ReadNow.write(headers,  i.read());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ReadNow.write(headers,  i.read());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ReadNow.write(headers,  i.read());	  ReadNow.write(headers,    i.next());    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
1380	[BUG]  [BUGGY]  ReadNow.write(headers,  i.remainder());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ReadNow.write(headers,  i.remainder());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ReadNow.write(headers,  i.remainder());	  ReadNow.write(headers,    i.next());    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
1381	[BUG]  [BUGGY]  if(!hasHitEOF  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
1382	[BUG]  [BUGGY]  if(!hasHitEOF)  {  while(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  while(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  while(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
1383	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.get(ch)-  1);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.get(ch)-  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.get(ch)-  1);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
1384	[BUG]  [BUGGY]  if(i.hasNextToken())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNextToken())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNextToken())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers;  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getCurrentToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	156	None	replace
1385	[BUG]  [BUGGY]  if(i.hasNextToken())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNextToken())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNextToken())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getCurrentToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	156	None	replace
1386	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers;  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getCurrentToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	156	None	replace
1387	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
1388	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
1389	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
1390	[BUG]  [BUGGY]  if(i.read()!=  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()!=  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()!=  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
1391	[BUG]  [BUGGY]  if(i.read()  ==  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()  ==  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()  ==  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
1392	[BUG]  [BUGGY]  if(i.read()  >  -1)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()  >  -1)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()  >  -1)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
1393	[BUG]  [BUGGY]  if(i.read()  >  0)  {  if(headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()  >  0)  {  if(headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()  >  0)  {  if(headers.containsKey(ch))  {  read++;  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
1394	[BUG]  [BUGGY]  i.remove();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.remove();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	i.remove();	  i.setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
1395	[BUG]  [BUGGY]  i.setMoreElements(headers,  headers);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setMoreElements(headers,  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	i.setMoreElements(headers,  headers);	  i.setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
1396	[BUG]  [BUGGY]  i.setMoreElements(headers,  len);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setMoreElements(headers,  len);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	i.setMoreElements(headers,  len);	  i.setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
1397	[BUG]  [BUGGY]  if(i.hasNext())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }	  if(i.hasMoreTokens())    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
1398	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getKey()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getKey()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getKey()));  return  headers;  }	  if(i.hasMoreTokens())    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
1399	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getMethod()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getMethod()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getMethod()));  return  headers;  }	  if(i.hasMoreTokens())    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
1400	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.hasNext())  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.hasNext())  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.hasNext())  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
1401	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
1402	[BUG]  [BUGGY]  if(i.read()  >  0)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()  >  0)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()  >  0)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.read()    >    -1)    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	188	None	replace
1403	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    length;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	196	None	replace
1404	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    length;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	196	None	replace
1405	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    length;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	196	None	replace
1406	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
1407	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch  ==  't'  ||  ch  ==  'n')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  ch  ==  't'  ||  ch  ==  'n')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  ch  ==  't'  ||  ch  ==  'n')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n'    ||    ch    ==    't')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	211	None	replace
1408	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch  ==  'u'  ||  ch  ==  't')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  ch  ==  'u'  ||  ch  ==  't')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  ch  ==  'u'  ||  ch  ==  't')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n'    ||    ch    ==    't')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	211	None	replace
1409	[BUG]  [BUGGY]  headers.put(i.next(),  ch);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.next(),  ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.next(),  ch);	  headers.put(i.next(),    headers);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
1410	[BUG]  [BUGGY]  headers.put(0,  i.next());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(0,  i.next());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(0,  i.next());	  headers.put(i.next(),    headers);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
1411	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
1412	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
1413	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch))  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch))  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.containsKey(ch))  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
1414	[BUG]  [BUGGY]  if(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  read++;  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
1415	[BUG]  [BUGGY]  if(i.hasNext())  {  reader++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  reader++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  reader++;  }	  if(i.hasNext())    {    reader++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
1416	[BUG]  [BUGGY]  if(i.hasNext())  {  reader++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  reader++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  reader++;  }  else  {  headers.put(ch,  headers);  }	  if(i.hasNext())    {    reader++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
1417	[BUG]  [BUGGY]  headers.put(ch,  parsePaxHeaders(i));  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(ch,  parsePaxHeaders(i));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(ch,  parsePaxHeaders(i));	  headers.put(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
1418	[BUG]  [BUGGY]  headers.put(ch,  parsePaxHeaders(i),  headers);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(ch,  parsePaxHeaders(i),  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(ch,  parsePaxHeaders(i),  headers);	  headers.put(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
1419	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
1420	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
1421	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
1422	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
1423	[BUG]  [BUGGY]  if(i.read()!=  -1)  {  if(headers!=  null)  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()!=  -1)  {  if(headers!=  null)  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()!=  -1)  {  if(headers!=  null)  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.get(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
1424	[BUG]  [BUGGY]  if(i.read()  ==  -1)  {  if(headers!=  null)  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()  ==  -1)  {  if(headers!=  null)  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()  ==  -1)  {  if(headers!=  null)  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.get(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
1425	[BUG]  [BUGGY]  if(i.read()  >  -1)  {  if(headers!=  null)  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()  >  -1)  {  if(headers!=  null)  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()  >  -1)  {  if(headers!=  null)  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.get(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
1426	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeader    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
1427	[BUG]  [BUGGY]  if(ch  ==  'n')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getValue()));  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getValue()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getValue()));  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next().getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	191	None	replace
1428	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getVal  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getVal  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getVal	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next().getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	191	None	replace
1429	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NA    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
1430	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
1431	[BUG]  [BUGGY]  if(!i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey()	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
1432	[BUG]  [BUGGY]  if(i.hasNext())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
1433	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)&&(ch  ==  '@')&&(ch!=  ':')&&(ch!=  '>')&&(ch!='<  ')&&(ch!=  '>')&&(ch!=  '>')  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)&&(ch  ==  '@')&&(ch!=  ':')&&(ch!=  '>')&&(ch!='<  ')&&(ch!=  '>')&&(ch!=  '>')  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)&&(ch  ==  '@')&&(ch!=  ':')&&(ch!=  '>')&&(ch!='<  ')&&(ch!=  '>')&&(ch!=  '>')	  ((    ch    =    i.read())!=    -1))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
1434	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)&&(ch  ==  '@')&&(ch!=  ':')&&(ch!=  '>')&&(ch!='<  ')&&(ch!=  '>')&&(ch!=  '>')&  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)&&(ch  ==  '@')&&(ch!=  ':')&&(ch!=  '>')&&(ch!='<  ')&&(ch!=  '>')&&(ch!=  '>')&  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)&&(ch  ==  '@')&&(ch!=  ':')&&(ch!=  '>')&&(ch!='<  ')&&(ch!=  '>')&&(ch!=  '>')&	  ((    ch    =    i.read())!=    -1))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
1435	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).start();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).start();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).start();	  ((    TarArchiveEntry    <    K,    V>)i.next()).reset();    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
1436	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).delete();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).delete();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).delete();	  ((    TarArchiveEntry    <    K,    V>)i.next()).reset();    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
1437	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setValue(ch);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setValue(ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setValue(ch);	  ((    TarArchiveEntry    <    K,    V>)i.next()).reset();    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
1438	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  1)  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  1)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  1)  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    read!=    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
1439	[BUG]  [BUGGY]  i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||  read!=  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||  read!=  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||  read!=  0)  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    read!=    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
1440	[BUG]  [BUGGY]  InputStream  is  =  headers.readIOF();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.readIOF();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.readIOF();	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
1441	[BUG]  [BUGGY]  InputStream  is  =  headers.readLine();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.readLine();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.readLine();	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
1442	[BUG]  [BUGGY]  int  len  =  i.readInt();  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  int  len  =  i.readInt();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	int  len  =  i.readInt();	  int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
1443	[BUG]  [BUGGY]  InputStream  is  =  headers.get(i.read());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  is  =  headers.get(i.read());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.get(i.read());	  InputStream    is    =    headers.get(headers.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
1444	[BUG]  [BUGGY]  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
1445	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
1446	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_KEY))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_KEY))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_KEY))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
1447	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1    	non-compiled	[CE]  illegal  start  of  type	185	None	replace
1448	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers  ==  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers  ==  null)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers  ==  null)  {  read++;  }	  if(headers    ==    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
1449	[BUG]  [BUGGY]  if(i.read()  >  -1)  {  if(headers  ==  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()  >  -1)  {  if(headers  ==  null)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()  >  -1)  {  if(headers  ==  null)  {  read++;  }	  if(headers    ==    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
1450	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers  ==  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers  ==  null)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers  ==  null)  {  read++;  }	  if(headers    ==    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
1451	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setRead(length);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setRead(length);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setRead(length);	  ((    TarArchiveEntry)i).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
1452	[BUG]  [BUGGY]  if(i.hasNext()  ||  (ch  ==  '-'  &&  coll.hasNext()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  (ch  ==  '-'  &&  coll.hasNext()))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  (ch  ==  '-'  &&  coll.hasNext()))  {  read++;  }	  if(i.hasMoreElements()    ||    (ch    ==    '-'    &&    coll.hasMoreElements()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
1453	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||(ch!=  '-'  &&  coll.hasMoreElements()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  ||(ch!=  '-'  &&  coll.hasMoreElements()))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  ||(ch!=  '-'  &&  coll.hasMoreElements()))  {  read++;  }	  if(i.hasMoreElements()    ||    (ch    ==    '-'    &&    coll.hasMoreElements()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
1454	[BUG]  [BUGGY]  if(ch  ==  'n')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getKeyword()));  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getKeyword()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getKeyword()));  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next().getKeyword()));    }    	non-compiled	[CE]  illegal  start  of  type	192	None	replace
1455	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().get  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().get  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().get	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next().getKeyword()));    }    	non-compiled	[CE]  illegal  start  of  type	192	None	replace
1456	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n'  ||  ch  ==  't')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next().getKeyword()));    }    	non-compiled	[CE]  illegal  start  of  type	192	None	replace
1457	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(ch.nextToken(),  parsePaxHeaders(i.getRead()));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(ch.nextToken(),  parsePaxHeaders(i.getRead()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(ch.nextToken(),  parsePaxHeaders(i.getRead()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getRead()));    }    	non-compiled	[CE]  illegal  start  of  type	202	None	replace
1458	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  bysePaxHeaders(i.getRead()));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  bysePaxHeaders(i.getRead()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  bysePaxHeaders(i.getRead()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getRead()));    }    	non-compiled	[CE]  illegal  start  of  type	202	None	replace
1459	[BUG]  [BUGGY]  if(i.read()  ==  -1)  {  if(headers!=  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()  ==  -1)  {  if(headers!=  null)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()  ==  -1)  {  if(headers!=  null)  {  read++;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
1460	[BUG]  [BUGGY]  if(i.read()  >  0)  {  if(headers!=  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()  >  0)  {  if(headers!=  null)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()  >  0)  {  if(headers!=  null)  {  read++;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
1461	[BUG]  [BUGGY]  read  =  parsePaxHeaders(i);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  parsePaxHeaders(i);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  parsePaxHeaders(i);	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
1462	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).setMoreElements(headers,  ch);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i.next()).setMoreElements(headers,  ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i.next()).setMoreElements(headers,  ch);	  ((    TarArchiveEntry)i.next()).setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
1463	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).setMoreElements(headers,  len);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i.next()).setMoreElements(headers,  len);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i.next()).setMoreElements(headers,  len);	  ((    TarArchiveEntry)i.next()).setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
1464	[BUG]  [BUGGY]  if(i.hasMoreTokens()  ||  i.hasNext())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getParent()));  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens()  ||  i.hasNext())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getParent()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens()  ||  i.hasNext())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getParent()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getParent()));    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
1465	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	204	None	replace
1466	[BUG]  [BUGGY]  if(i.hasChildren())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasChildren())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasChildren())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePa    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
1467	[BUG]  [BUGGY]  while((  ch  =  i.seek())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.seek())!=  -1)  {  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.seek())!=  -1)  {	  while((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
1468	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  parsePaxHeaders(i.read()));  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  parsePaxHeaders(i.read()));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  parsePaxHeaders(i.read()));	  ((    TarArchiveEntry)i).setHeaders(headers,    read);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
1469	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  parsePaxHeaders(i),  read);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  parsePaxHeaders(i),  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  parsePaxHeaders(i),  read);	  ((    TarArchiveEntry)i).setHeaders(headers,    read);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
1470	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.hasMoreElements())  {  read++;  }  else  {  headers.put(i.nextElement(),  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.hasMoreElements())  {  read++;  }  else  {  headers.put(i.nextElement(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.hasMoreElements())  {  read++;  }  else  {  headers.put(i.nextElement(),  headers);  }	  if(i.hasMoreElements()    ||    i.hasMoreElements())    {    read++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
1471	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.hasMoreElements()  ||  i.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.hasMoreElements()  ||  i.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.hasMoreElements()  ||  i.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements()    ||    i.hasMoreElements())    {    read++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
1472	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString());  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString());  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString());  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next()).toString());    }    	non-compiled	[CE]  illegal  start  of  type	194	None	replace
1473	[BUG]  [BUGGY]  if(ch  ==  'n')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString());  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString());  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString());  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next()).toString());    }    	non-compiled	[CE]  illegal  start  of  type	194	None	replace
1474	[BUG]  [BUGGY]  if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n')  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next().getKeyword(),    headers.get(i.next()).toString());    }    	non-compiled	[CE]  illegal  start  of  type	194	None	replace
1475	[BUG]  [BUGGY]  ||(i.hasNext()  &&  ch.endsWith( ".java ")))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  ch.endsWith( ".java ")))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  ch.endsWith( ".java ")))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  ||(i.hasNext()    &&    i.hasNext()))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
1476	[BUG]  [BUGGY]  ||(i.hasNext()  &&  ch.endsWith( ".js ")))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  ch.endsWith( ".js ")))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  ch.endsWith( ".js ")))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  ||(i.hasNext()    &&    i.hasNext()))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
1477	[BUG]  [BUGGY]  ||(i.hasNext()  &&  ch  <  =  0))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  ch  <  =  0))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  ch  <  =  0))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  ||(i.hasNext()    &&    i.hasNext()))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
1478	[BUG]  [BUGGY]  ||(i.hasNext()  &&  ch.equals(headers.get(ch))))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  ch.equals(headers.get(ch))))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  ch.equals(headers.get(ch))))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  ||(i.hasNext()    &&    i.hasNext()))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
1479	[BUG]  [BUGGY]  if(i.read()  ==  -1)  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()  ==  -1)  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()  ==  -1)  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
1480	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null  ||  headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null  ||  headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null  ||  headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null)    {    if(headers.containsKey(key))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
1481	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null)  {  read++;  }	  if(headers!=    null)    {    if(headers.containsKey(key))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
1482	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null  ||  headers.containsKey(key))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null  ||  headers.containsKey(key))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null  ||  headers.containsKey(key))  {  read++;  }	  if(headers!=    null)    {    if(headers.containsKey(key))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
1483	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getValue());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getValue());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)?  read++  :  i.getValue());	  ((    ch    =    i.read())!=    -1)?    read++    :    i.next());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
1484	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getEnd());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getEnd());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)?  read++  :  i.getEnd());	  ((    ch    =    i.read())!=    -1)?    read++    :    i.next());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
1485	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getKey());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getKey());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)?  read++  :  i.getKey());	  ((    ch    =    i.read())!=    -1)?    read++    :    i.next());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
1486	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getEncoding());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getEncoding());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)?  read++  :  i.getEncoding());	  ((    ch    =    i.read())!=    -1)?    read++    :    i.next());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
1487	[BUG]  [BUGGY]  if(headers.size()  ==  0)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.size()  ==  0)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.size()  ==  0)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.contains(ch)||    headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
1488	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.put(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.put(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.put(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.contains(ch)||    headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
1489	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELDS_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELDS_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELDS_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
1490	[BUG]  [BUGGY]  (i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  (i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	(i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
1491	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch.next())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  ch.next())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  ch.next())  {  read++;  }	  if(i.hasNext()    ||    i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
1492	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch.getLength()  >  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  ch.getLength()  >  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  ch.getLength()  >  0)  {  read++;  }	  if(i.hasNext()    ||    i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
1493	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(headers.contains(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
1494	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  while(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  while(headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  while(headers.contains(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
1495	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	193	None	replace
1496	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	193	None	replace
1497	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	193	None	replace
1498	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	193	None	replace
1499	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
1500	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
1501	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
1502	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    headers.put(ch,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
1503	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  headers.toArray(new  String[0]));  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  headers.toArray(new  String[0]));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  headers.toArray(new  String[0]));	  while((    ch    =    i.read())!=    -1)    {    headers.put(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
1504	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  headers.toArray(new  String[]  {  }  ));  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  headers.toArray(new  String[]  {  }  ));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  headers.toArray(new  String[]  {  }  ));	  while((    ch    =    i.read())!=    -1)    {    headers.put(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
1505	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  headers);  }	  while((    ch    =    i.read())!=    -1)    {    headers.put(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
1506	[BUG]  [BUGGY]  if(i.hasNext()  ||  i.hasNext())  {  read++;  }  else  {  headers.get(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  i.hasNext())  {  read++;  }  else  {  headers.get(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  i.hasNext())  {  read++;  }  else  {  headers.get(i.next(),  headers);  }	  if(i.hasNext())    {    read++;    }    else    {    headers.get(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
1507	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(i.getKey()  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(i.getKey()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(i.getKey()	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
1508	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  read++;  }	  while((    ch    =    i.read())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
1509	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch)||  headers.get(ch)!=  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch)||  headers.get(ch)!=  null)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.contains(ch)||  headers.get(ch)!=  null)  {  read++;  }	  if(i.hasNext())    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
1510	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch  ==  'u'  ||  ch  ==  'r')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  ch  ==  'u'  ||  ch  ==  'r')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  ch  ==  'u'  ||  ch  ==  'r')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	210	None	replace
1511	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch  ==  't'  ||  ch  ==  'r')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  ch  ==  't'  ||  ch  ==  'r')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  ch  ==  't'  ||  ch  ==  'r')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	210	None	replace
1512	[BUG]  [BUGGY]  if(i.next()  ==  'n'  ||  ch  ==  'r')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.next()  ==  'n'  ||  ch  ==  'r')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.next()  ==  'n'  ||  ch  ==  'r')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	210	None	replace
1513	[BUG]  [BUGGY]  if(i.hasNext()  ||  (ch  ==  '-'  &&  i.hasNext()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  (ch  ==  '-'  &&  i.hasNext()))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  (ch  ==  '-'  &&  i.hasNext()))  {  read++;  }	  if(i.hasMoreElements()    ||    (ch    ==    '-'    &&    i.hasMoreElements()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
1514	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch  ==  '-'  &&  i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  ch  ==  '-'  &&  i.hasNext())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  ch  ==  '-'  &&  i.hasNext())  {  read++;  }	  if(i.hasMoreElements()    ||    (ch    ==    '-'    &&    i.hasMoreElements()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
1515	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELDS_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELDS_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELDS_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
1516	[BUG]  [BUGGY]  if(i.hasNextToken()  ||  i.hasNextToken())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNextToken()  ||  i.hasNextToken())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNextToken()  ||  i.hasNextToken())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }	  if(i.hasMoreTokens()    ||    i.hasNextToken())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	200	None	replace
1517	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }	  if(i.hasMoreTokens()    ||    i.hasNextToken())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	200	None	replace
1518	[BUG]  [BUGGY]  ((  i  =  i.read())!=  -1)?  read++  :  i.next();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  i  =  i.read())!=  -1)?  read++  :  i.next();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  i  =  i.read())!=  -1)?  read++  :  i.next();	  ((    ch    =    i.read())    ==    -1)?    read++    :    i.next();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
1519	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||  headers.size()  ==  1)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  ||  headers.size()  ==  1)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  ||  headers.size()  ==  1)  {  read++;  }	  if(i.hasMoreElements()    ||    headers.size()    ==    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
1520	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
1521	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.get(ch)  ==  read++)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.get(ch)  ==  read++)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.get(ch)  ==  read++)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
1522	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null  ||  headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null  ||  headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null  ||  headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    if(headers.containsKey(key))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
1523	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    if(headers.containsKey(key))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
1524	[BUG]  [BUGGY]  if(i.hasNext())  {  while(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  while(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
1525	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(ch)||    headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
1526	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).addHeader(headers,  len,  read);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i.next()).addHeader(headers,  len,  read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i.next()).addHeader(headers,  len,  read);	  ((    TarArchiveEntry)i.next()).addHeader(headers,    read);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
1527	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_    	non-compiled	[CE]  illegal  start  of  type	208	None	replace
1528	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_    	non-compiled	[CE]  illegal  start  of  type	208	None	replace
1529	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  if(!hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  if(!hasHitEOF)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  if(!hasHitEOF)  {  read++;  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_    	non-compiled	[CE]  illegal  start  of  type	208	None	replace
1530	[BUG]  [BUGGY]  if(i.hasNext()  ||  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  headers.contains(ch))  {  read++;  }	  if(i.hasMoreElements()    ||    headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
1531	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF  &&  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF  &&  headers.contains(ch))  {  read++;  }	  if(i.hasMoreElements()    ||    headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
1532	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers!=    null    ||    headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
1533	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers!=  null  &&  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers!=  null  &&  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers!=  null  &&  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers!=    null    ||    headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
1534	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
1535	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_SIZE)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_SIZE)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_SIZE)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
1536	[BUG]  [BUGGY]  ch  =  i.read(Long.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ch  =  i.read(Long.MAX_VALUE);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ch  =  i.read(Long.MAX_VALUE);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
1537	[BUG]  [BUGGY]  ch  =  i.read(Long.parseLong(ch));  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ch  =  i.read(Long.parseLong(ch));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ch  =  i.read(Long.parseLong(ch));	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
1538	[BUG]  [BUGGY]  ch  =  i.read(Long.MIN_VALUE);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ch  =  i.read(Long.MIN_VALUE);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ch  =  i.read(Long.MIN_VALUE);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
1539	[BUG]  [BUGGY]  ch  =  i.read(Long.toString(ch));  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ch  =  i.read(Long.toString(ch));  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ch  =  i.read(Long.toString(ch));	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
1540	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_FIRST)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_FIRST)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_FIRST)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_FIRST))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
1541	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  while(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  while(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  while(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	189	None	replace
1542	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  parsePaxHeaders(i),  headers);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  parsePaxHeaders(i),  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  parsePaxHeaders(i),  headers);	  ((    TarArchiveEntry)i).setHeaders(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
1543	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  cachedHeaders);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  cachedHeaders);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  cachedHeaders);	  ((    TarArchiveEntry)i).setHeaders(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
1544	[BUG]  [BUGGY]  if(i.hasMoreTokens()  ||  headers.size()  >  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens()  ||  headers.size()  >  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens()  ||  headers.size()  >  0)  {  read++;  }	  if(i.hasMoreTokens())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
1545	[BUG]  [BUGGY]  if(i.hasMoreTokens()  ||  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens()  ||  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens()  ||  headers.contains(ch))  {  read++;  }	  if(i.hasMoreTokens())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
1546	[BUG]  [BUGGY]  if(i.hasNext()  ||  headers.size()  >  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  headers.size()  >  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  headers.size()  >  0)  {  read++;  }	  if(i.hasMoreElements()    ||    headers.size()    >    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	175	None	replace
1547	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||  headers.size()  >=  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  ||  headers.size()  >=  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  ||  headers.size()  >=  0)  {  read++;  }	  if(i.hasMoreElements()    ||    headers.size()    >    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	175	None	replace
1548	[BUG]  [BUGGY]  read  +=  i.hasMoreElements();  headers.put(i.nextElement(),  headers);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  i.hasMoreElements();  headers.put(i.nextElement(),  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  i.hasMoreElements();  headers.put(i.nextElement(),  headers);	  if(i.hasMoreElements())    {    reader++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
1549	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME,  ch))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME,  ch))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME,  ch))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
1550	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES	  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
1551	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }	  if(!hasHitEOF)    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
1552	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }	  if(!hasHitEOF)    {    if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
1553	[BUG]  [BUGGY]  i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||!i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||!i.hasNext())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||!i.hasNext())  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
1554	[BUG]  [BUGGY]  int  read  =  i.read(remainders);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  int  read  =  i.read(remainders);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	int  read  =  i.read(remainders);	  int    read    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
1555	[BUG]  [BUGGY]  int  read  =  i.read(CH);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  int  read  =  i.read(CH);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	int  read  =  i.read(CH);	  int    read    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
1556	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES    ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
1557	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
1558	[BUG]  [BUGGY]  int  read  =  headers.size()  +  i.read();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  int  read  =  headers.size()  +  i.read();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	int  read  =  headers.size()  +  i.read();	  int    read    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
1559	[BUG]  [BUGGY]  if(i.hasMoreTokens()  ||  i.hasNextToken())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens()  ||  i.hasNextToken())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens()  ||  i.hasNextToken())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }	  if(i.hasMoreTokens())    {    reader++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
1560	[BUG]  [BUGGY]  if(i.hasNext())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }	  if(i.hasMoreTokens())    {    reader++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
1561	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
1562	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||!i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||!i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||!i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
1563	[BUG]  [BUGGY]  if(!hasHitEOF)  {  while(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  while(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  while(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	203	None	replace
1564	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
1565	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
1566	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
1567	[BUG]  [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()	  ||(i.hasMoreTokens()    &&    i.hasMoreTokens()))    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
1568	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  headers.put(i.nextElement(),  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  headers.put(i.nextElement(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  headers.put(i.nextElement(),  headers);  }	  if(i.hasNext())    {    headers.put(i.nextElement(),    headers);    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
1569	[BUG]  [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }	  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
1570	[BUG]  [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
1571	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null  &&  headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null  &&  headers.containsKey(ch))  {  read++;  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
1572	[BUG]  [BUGGY]  if(headers!=  null)  {  headers.put(ch,  read);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null)  {  headers.put(ch,  read);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  headers.put(ch,  read);  }	  if(headers!=    null)    {    if(headers.containsKey(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
1573	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getValue();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getValue();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)?  read++  :  i.getValue();	  ((    ch    =    i.read())!=    -1)?    read++    :    i.next();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
1574	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getKey();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getKey();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)?  read++  :  i.getKey();	  ((    ch    =    i.read())!=    -1)?    read++    :    i.next();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
1575	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getEnd();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.getEnd();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)?  read++  :  i.getEnd();	  ((    ch    =    i.read())!=    -1)?    read++    :    i.next();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
1576	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
1577	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
1578	[BUG]  [BUGGY]  if(i.hasNext())  {  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }	  if(i.hasMoreTokens())    {    while(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
1579	[BUG]  [BUGGY]  if(i.hasNextToken())  {  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNextToken())  {  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNextToken())  {  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }	  if(i.hasMoreTokens())    {    while(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
1580	[BUG]  [BUGGY]  if(i.hasNextToken())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNextToken())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNextToken())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getCurrentToken()));    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
1581	[BUG]  [BUGGY]  if(i.hasMoreTokens()  ||  i.hasNextToken())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens()  ||  i.hasNextToken())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens()  ||  i.hasNextToken())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getCurrentToken()));    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
1582	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(ch.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(ch.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(ch.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.getCurrentToken()));    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
1583	[BUG]  [BUGGY]  if(i.hasNext()  ||  (ch  ==  'n'  &&  i.hasNext()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  (ch  ==  'n'  &&  i.hasNext()))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  (ch  ==  'n'  &&  i.hasNext()))  {  read++;  }	  if(i.hasMoreElements()    ||    (ch    ==    'n'    &&    i.hasMoreElements()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
1584	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||  (ch  ==  '@'  &&  i.hasMoreElements()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  ||  (ch  ==  '@'  &&  i.hasMoreElements()))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  ||  (ch  ==  '@'  &&  i.hasMoreElements()))  {  read++;  }	  if(i.hasMoreElements()    ||    (ch    ==    'n'    &&    i.hasMoreElements()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
1585	[BUG]  [BUGGY]  if(i.hasNext())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(ch,  headers);  }	  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
1586	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(headers,  ch);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(headers,  ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(headers,  ch);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
1587	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(headers,  i.read);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(headers,  i.read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(headers,  i.read);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
1588	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(headers,  len);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(headers,  len);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(headers,  len);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setMoreElements(headers);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
1589	[BUG]  [BUGGY]  ||(i.hasNext()  &&  ch.endsWith( ".js ")))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  ch.endsWith( ".js ")))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  ch.endsWith( ".js ")))  {  read++;  }	  ||(i.hasNext()    &&    i.hasNext()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
1590	[BUG]  [BUGGY]  ||(i.hasNext()  &&  ch.getCurrentSize()  >  0))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  ch.getCurrentSize()  >  0))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  ch.getCurrentSize()  >  0))  {  read++;  }	  ||(i.hasNext()    &&    i.hasNext()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
1591	[BUG]  [BUGGY]  ||(i.hasNext()  &&  ch.getMask()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  ch.getMask()))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  ch.getMask()))  {  read++;  }	  ||(i.hasNext()    &&    i.hasNext()))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
1592	[BUG]  [BUGGY]  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  read++;  }	  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
1593	[BUG]  [BUGGY]  if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)||  zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)||  zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)||  zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
1594	[BUG]  [BUGGY]  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }	  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
1595	[BUG]  [BUGGY]  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
1596	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
1597	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.get(ch)  ==  read++)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.get(ch)  ==  read++)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.get(ch)  ==  read++)  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
1598	[BUG]  [BUGGY]  read  =  parsePaxHeaders(i.getReader());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  parsePaxHeaders(i.getReader());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  parsePaxHeaders(i.getReader());	  read    =    parsePaxHeaders(i.nextToken());    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
1599	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers!=  null  &&  headers.contains(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null  &&  headers.contains(ch))  {  read++;  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
1600	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD    	non-compiled	[CE]  illegal  start  of  type	207	None	replace
1601	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD    	non-compiled	[CE]  illegal  start  of  type	207	None	replace
1602	[BUG]  [BUGGY]  while(!i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(!i.hasNext())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while(!i.hasNext())  {  read++;  }	  if(!i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	212	None	replace
1603	[BUG]  [BUGGY]  if(!i.hasNext()  ||  i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!i.hasNext()  ||  i.hasNext())  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.hasNext()  ||  i.hasNext())  {  read++;  }	  if(!i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	212	None	replace
1604	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch  ==  'n'  ||  ch  ==  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch  ==  'n'  ||  ch  ==  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch  ==  'n'  ||  ch  ==  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    ch    ==    'n')    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
1605	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(headers.containsKey(keyword))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(headers.containsKey(keyword))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(headers.containsKey(keyword))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(keyword))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
1606	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(word))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(word))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.containsKey(word))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(keyword))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
1607	[BUG]  [BUGGY]  if(headers.containsKey(keyword))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers.containsKey(keyword))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.containsKey(keyword))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.hasNext())    {    if(headers.containsKey(keyword))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
1608	[BUG]  [BUGGY]  read  =  i.read(CH);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  i.read(CH);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  i.read(CH);	  read    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
1609	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
1610	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString	  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
1611	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD	  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
1612	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
1613	[BUG]  [BUGGY]  if(i.read()!=  -1)  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()!=  -1)  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()!=  -1)  {  if(headers!=  null)  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }	  if(headers!=    null)    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
1614	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValu  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValu  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValu	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValu    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
1615	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	186	None	replace
1616	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	186	None	replace
1617	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch  ==  '/')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  ch  ==  '/')  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  ch  ==  '/')  {  read++;  }	  if(i.hasNext()    ||    ch    ==    'n')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	213	None	replace
1618	[BUG]  [BUGGY]  if(ch  ==  'n')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next(),    headers.get(i.next()));    }    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
1619	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next(),    headers.get(i.next()));    }    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
1620	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n'  ||  ch  ==  't')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next(),    headers.get(i.next()));    }    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
1621	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'n')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'n')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(ch  ==  'n'  ||  ch  ==  'n')  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.put(i.next(),    headers.get(i.next()));    }    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
1622	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  while(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  while(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  while(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
1623	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SIZE))  {  if(headers.get(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SIZE))  {  if(headers.get(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SIZE))  {  if(headers.get(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
1624	[BUG]  [BUGGY]  if(i.hasNextToken())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNextToken())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNextToken())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }	  if(i.hasMoreTokens())    {    reader++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
1625	[BUG]  [BUGGY]  if(i.hasNext())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }	  if(i.hasMoreTokens())    {    reader++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
1626	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getParent()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getParent()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getParent()));  return  headers;  }	  if(i.hasMoreTokens())    {    reader++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
1627	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getRead()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getRead()));  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getRead()));  return  headers;  }	  if(i.hasMoreTokens())    {    reader++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
1628	[BUG]  [BUGGY]  if(i.read()  >  0)  {  if(headers!=  null)read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()  >  0)  {  if(headers!=  null)read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()  >  0)  {  if(headers!=  null)read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null)    {    if(headers.contains(ch))    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
1629	[BUG]  [BUGGY]  ||(i.hasNext()  <  headers.length))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  <  headers.length))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  <  headers.length))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  ||(i.hasNext()    &&    i.next()    ==    headers.length))    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
1630	[BUG]  [BUGGY]  headers.put(i.getValue(),  i);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.getValue(),  i);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.getValue(),  i);	  headers.put(i.nextElement(),    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
1631	[BUG]  [BUGGY]  headers.put(i.nextElement(),  ch);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.nextElement(),  ch);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.nextElement(),  ch);	  headers.put(i.nextElement(),    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
1632	[BUG]  [BUGGY]  headers.put(i.getSource(),  i);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  headers.put(i.getSource(),  i);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.getSource(),  i);	  headers.put(i.nextElement(),    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
1633	[BUG]  [BUGGY]  if(i.read()  >  -1)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()  >  -1)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()  >  -1)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.contains(ch)||    headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
1634	[BUG]  [BUGGY]  if(i.read()  >  0)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()  >  0)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()  >  0)  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.contains(ch)||    headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
1635	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.contains(ch)||    headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
1636	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
1637	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
1638	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
1639	[BUG]  [BUGGY]  ||  i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken())  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken())  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken())	  ||(i.hasMoreTokens()    &&    i.hasMoreTokens()))    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken())    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
1640	[BUG]  [BUGGY]  ||  i.hasMoreTokens())  {  read++;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.hasMoreTokens())  {  read++;  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.hasMoreTokens())  {  read++;	  ||(i.hasMoreTokens()    &&    i.hasMoreTokens()))    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken())    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
1641	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  headers  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  headers  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  headers	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
1642	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey()  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey()  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey()	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
1643	[BUG]  [BUGGY]  Headers.put(i.getKeyword(),  i.nextElement());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(i.getKeyword(),  i.nextElement());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(i.getKeyword(),  i.nextElement());	  Headers.put(i.nextElement(),    headers);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
1644	[BUG]  [BUGGY]  Headers.put(i.getValue(),  headers);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(i.getValue(),  headers);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(i.getValue(),  headers);	  Headers.put(i.nextElement(),    headers);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
1645	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  while(headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  while(headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  while(headers.containsKey(ch))  {  read++;  }	  if(headers!=    null)    {    while(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
1646	[BUG]  [BUGGY]  if(i.read()  >  -1)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()  >  -1)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()  >  -1)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null)    {    while(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
1647	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.hasNext())  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.hasNext())  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.hasNext())  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
1648	[BUG]  [BUGGY]  if(i.hasNext())  {  while(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  while(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
1649	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.get(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1650	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.get(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1651	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.get(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1652	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.get(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1653	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseStr  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseStr  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseStr	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.get(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1654	[BUG]  [BUGGY]  if(i.read()  >  -1)  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.read()  >  -1)  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()  >  -1)  {  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers!=    null)    {    while(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
1655	[BUG]  [BUGGY]  ((  ch  =  i.read())  >=  -1)?  read++  :  i.getKey();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())  >=  -1)?  read++  :  i.getKey();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())  >=  -1)?  read++  :  i.getKey();	  ((    ch    =    i.read())    >=    -1)?    read++    :    i.next();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
1656	[BUG]  [BUGGY]  ((  ch  =  i.read())  >=  -1)?  read++  :  i.getCurrentName();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())  >=  -1)?  read++  :  i.getCurrentName();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())  >=  -1)?  read++  :  i.getCurrentName();	  ((    ch    =    i.read())    >=    -1)?    read++    :    i.next();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
1657	[BUG]  [BUGGY]  read  =  i.getRead();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  i.getRead();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  i.getRead();	  read    =    i.next();    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
1658	[BUG]  [BUGGY]  read  =  i.reset();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  i.reset();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  i.reset();	  read    =    i.next();    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
1659	[BUG]  [BUGGY]  read  =  i.getAsString();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  i.getAsString();  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  i.getAsString();	  read    =    i.next();    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
1660	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
1661	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  ch.isEmpty())  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  ch.isEmpty())  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  ch.isEmpty())  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES    ||    ch.isEmpty()))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
1662	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(headers.containsKey(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.containsKey(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
1663	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.AUTO_BUFFER_SIZE))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.AUTO_BUFFER_SIZE))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.AUTO_BUFFER_SIZE))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
1664	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.INTEGER_QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.INTEGER_QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.INTEGER_QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
1665	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
1666	[BUG]  [BUGGY]  if(headers  ==  null)  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers  ==  null)  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers  ==  null)  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null    ||    headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
1667	[BUG]  [BUGGY]  if(headers  ==  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers  ==  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers  ==  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null    ||    headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
1668	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers!=  null  ||  headers.containsKey(ch))  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(headers!=  null  ||  headers.containsKey(ch))  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers!=  null  ||  headers.containsKey(ch))  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers!=    null    ||    headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
1669	[BUG]  [BUGGY]  if(headers  ==  null)  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(headers  ==  null)  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers  ==  null)  {  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }	  if(headers!=    null    ||    headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
1670	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
1671	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELDS_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELDS_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELDS_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
1672	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size());  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size());  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size());    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
1673	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(0,  headers.size());  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(0,  headers.size());  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(0,  headers.size());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size());    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
1674	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  read++;  }  else  {  headers.put(i.getLastElement(),  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  read++;  }  else  {  headers.put(i.getLastElement(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements())  {  read++;  }  else  {  headers.put(i.getLastElement(),  headers);  }	  if(i.hasMoreElements())    {    read++;    }    else    {    headers.put(i.getCurrentElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
1675	[BUG]  [BUGGY]  if(i.hasNext())  {  reader++;  }  else  {  headers.put(i.getCurrentElement(),  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  reader++;  }  else  {  headers.put(i.getCurrentElement(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  reader++;  }  else  {  headers.put(i.getCurrentElement(),  headers);  }	  if(i.hasMoreElements())    {    read++;    }    else    {    headers.put(i.getCurrentElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
1676	[BUG]  [BUGGY]  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
1677	[BUG]  [BUGGY]  Reader  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Reader  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Reader  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  ||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
1678	[BUG]  [BUGGY]  if(i.hasNext()  ||  i.hasNext())  {  read++;  }  else  {  headers.put(i.nextElement(),  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  i.hasNext())  {  read++;  }  else  {  headers.put(i.nextElement(),  headers);  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  i.hasNext())  {  read++;  }  else  {  headers.put(i.nextElement(),  headers);  }	  if(i.hasNext())    {    read++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
1679	[BUG]  [BUGGY]  Headers.put(i.next(),  headers,  i.read);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(i.next(),  headers,  i.read);  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(i.next(),  headers,  i.read);	  Headers.put(i.next(),    headers);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
1680	[BUG]  [BUGGY]  Headers.put(i,  i.next());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Headers.put(i,  i.next());  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(i,  i.next());	  Headers.put(i.next(),    headers);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
1681	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
