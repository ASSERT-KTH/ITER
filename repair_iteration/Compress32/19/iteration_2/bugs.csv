bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
2	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
3	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
4	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
5	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
6	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(i.getKey()))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
7	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
8	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
9	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValu  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValu  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValu	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
10	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeader  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeader  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeader	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
11	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
12	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
13	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
14	[BUG]  [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
15	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
16	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
17	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
18	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.hasNext())  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.hasNext())  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
19	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
20	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
21	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
22	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeader  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeader  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeader	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
23	[BUG]  [BUGGY]  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
24	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
25	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
26	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
27	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreTokens())  {  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  while(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
28	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  read++;  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
29	[BUG]  [BUGGY]  headers.put(i.nextElement(),  headers);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  headers.put(i.nextElement(),  headers);  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.nextElement(),  headers);	  if(i.hasMoreElements())    {    read++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
30	[BUG]  [BUGGY]  Headers.put(i.nextElement(),  headers);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  Headers.put(i.nextElement(),  headers);  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(i.nextElement(),  headers);	  if(i.hasMoreElements())    {    read++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
31	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  headers.put(i.nextElement(),  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  headers.put(i.nextElement(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  read++;  }  else  {  headers.put(i.nextElement(),  headers);  }	  if(i.hasMoreElements())    {    read++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
32	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  read++;  }  else  {  headers.put(i.getCurrentElement(),  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreElements())  {  read++;  }  else  {  headers.put(i.getCurrentElement(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements())  {  read++;  }  else  {  headers.put(i.getCurrentElement(),  headers);  }	  if(i.hasMoreElements())    {    read++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
33	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
34	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
35	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
36	[BUG]  [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
37	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
38	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size());  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size());  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
39	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.next();  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.next();  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)?  read++  :  i.next();	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
40	[BUG]  [BUGGY]  ((  ch  =  i.read())  >=  -1)?  read++  :  i.next();  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  ch  =  i.read())  >=  -1)?  read++  :  i.next();  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())  >=  -1)?  read++  :  i.next();	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
41	[BUG]  [BUGGY]  ((  ch  =  i.read())  ==  -1)?  read++  :  i.next();  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  ch  =  i.read())  ==  -1)?  read++  :  i.next();  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())  ==  -1)?  read++  :  i.next();	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
42	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  ch  =  i.read())!=  -1))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1))  {  read++;  }	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
43	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.next());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  ch  =  i.read())!=  -1)?  read++  :  i.next());  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  ch  =  i.read())!=  -1)?  read++  :  i.next());	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
44	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
45	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
46	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.containsKey(ch))  {  read++;  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
47	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
48	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
49	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
50	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(keyword))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(keyword))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.containsKey(keyword))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
51	[BUG]  [BUGGY]  ch  =  i.read();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ch  =  i.read();  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ch  =  i.read();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
52	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setRead(read);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  TarArchiveEntry)i).setRead(read);  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setRead(read);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
53	[BUG]  [BUGGY]  InputStream  is  =  i.readInputStream();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  InputStream  is  =  i.readInputStream();  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  i.readInputStream();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
54	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers);  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(headers);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
55	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  headers);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  headers);  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  headers);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
56	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  read);  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  read);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
57	[BUG]  [BUGGY]  int  len  =  i.read();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  int  len  =  i.read();  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	int  len  =  i.read();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
58	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
59	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
60	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.contains(ch))  {  read++;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
61	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
62	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
63	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
64	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
65	[BUG]  [BUGGY]  headers.put(i.next(),  headers);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  headers.put(i.next(),  headers);  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.next(),  headers);	  if(i.hasNext())    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
66	[BUG]  [BUGGY]  ||(i.hasNext()  &&  i.hasNext()))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(i.hasNext()  &&  i.hasNext()))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  i.hasNext()))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  if(i.hasNext())    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
67	[BUG]  [BUGGY]  Headers.put(i.next(),  headers);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  Headers.put(i.next(),  headers);  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	Headers.put(i.next(),  headers);	  if(i.hasNext())    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
68	[BUG]  [BUGGY]  ||(i.hasNext()  &&  i.next()  ==  headers.length))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(i.hasNext()  &&  i.next()  ==  headers.length))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  i.next()  ==  headers.length))  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  if(i.hasNext())    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
69	[BUG]  [BUGGY]  ||(i.hasNext()  &&  i.hasNext()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(i.hasNext()  &&  i.hasNext()))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasNext()  &&  i.hasNext()))  {  read++;  }	  if(i.hasNext())    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
70	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||  i.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreElements()  ||  i.hasMoreElements())  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  ||  i.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
71	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||  (ch  ==  'n'  &&  i.hasMoreElements()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreElements()  ||  (ch  ==  'n'  &&  i.hasMoreElements()))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  ||  (ch  ==  'n'  &&  i.hasMoreElements()))  {  read++;  }	  if(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
72	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||  (ch  ==  '-'  &&  i.hasMoreElements()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreElements()  ||  (ch  ==  '-'  &&  i.hasMoreElements()))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  ||  (ch  ==  '-'  &&  i.hasMoreElements()))  {  read++;  }	  if(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
73	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||  hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreElements()  ||  hasHitEOF)  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  ||  hasHitEOF)  {  read++;  }	  if(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
74	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||  (ch  ==  '-'  &&  coll.hasMoreElements()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreElements()  ||  (ch  ==  '-'  &&  coll.hasMoreElements()))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  ||  (ch  ==  '-'  &&  coll.hasMoreElements()))  {  read++;  }	  if(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
75	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
76	[BUG]  [BUGGY]  if(headers  ==  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers  ==  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers  ==  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
77	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
78	[BUG]  [BUGGY]  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
79	[BUG]  [BUGGY]  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
80	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
81	[BUG]  [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
82	[BUG]  [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
83	[BUG]  [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken())  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken())  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||(i.hasMoreTokens()  &&  i.hasMoreTokens()))  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken())	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
84	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
85	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
86	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
87	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  headers);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  headers);  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  headers.put(ch,  headers);	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
88	[BUG]  [BUGGY]  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
89	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
90	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
91	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
92	[BUG]  [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
93	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
94	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
95	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
96	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
97	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
98	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
99	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
100	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
101	[BUG]  [BUGGY]  read  +=  i.hasMoreElements();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read  +=  i.hasMoreElements();  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  i.hasMoreElements();	  if(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
102	[BUG]  [BUGGY]  i.setMoreElements(headers);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  i.setMoreElements(headers);  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	i.setMoreElements(headers);	  if(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
103	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(headers);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(headers);  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setMoreElements(headers);	  if(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
104	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||  headers.size()  ==  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreElements()  ||  headers.size()  ==  0)  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  ||  headers.size()  ==  0)  {  read++;  }	  if(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
105	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).setMoreElements(headers);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  TarArchiveEntry)i.next()).setMoreElements(headers);  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i.next()).setMoreElements(headers);	  if(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
106	[BUG]  [BUGGY]  headers.put(ch,  headers);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  headers.put(ch,  headers);  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	headers.put(ch,  headers);	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
107	[BUG]  [BUGGY]  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
108	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
109	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
110	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  returned  headers;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  returned  headers;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  returned  headers;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
111	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||  i.hasMoreElements())  {  read++;  }  else  {  headers.put(i.nextElement(),  headers);  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreElements()  ||  i.hasMoreElements())  {  read++;  }  else  {  headers.put(i.nextElement(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  ||  i.hasMoreElements())  {  read++;  }  else  {  headers.put(i.nextElement(),  headers);  }	  if(i.hasMoreElements())    {    read++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
112	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  reader++;  }  else  {  headers.put(i.nextElement(),  headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreElements())  {  reader++;  }  else  {  headers.put(i.nextElement(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements())  {  reader++;  }  else  {  headers.put(i.nextElement(),  headers);  }	  if(i.hasMoreElements())    {    read++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
113	[BUG]  [BUGGY]  if(i.hasNext())  {  headers.put(i.nextElement(),  headers);  }  else  {  headers.put(i.nextElement(),  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  headers.put(i.nextElement(),  headers);  }  else  {  headers.put(i.nextElement(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  headers.put(i.nextElement(),  headers);  }  else  {  headers.put(i.nextElement(),  headers);  }	  if(i.hasMoreElements())    {    read++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
114	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
115	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
116	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
117	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NA	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
118	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
119	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
120	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
121	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
122	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKey())!=  null)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKey())!=  null)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKey())!=  null)  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
123	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.containsKey(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.containsKey(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.containsKey(ch))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
124	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
125	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getKey()));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
126	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
127	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
128	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!remainders.contains(ch))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
129	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
130	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch  ==  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch  ==  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch  ==  'n')  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
131	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(i.getKey(),  parsePaxHeaders(i.getValue()));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
132	[BUG]  [BUGGY]  read  =  i.next();  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read  =  i.next();  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  i.next();	  if(i.hasNext())    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
133	[BUG]  [BUGGY]  if(i.hasNext())  {  reader++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  reader++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  reader++;  }  else  {  headers.put(i.next(),  headers);  }	  if(i.hasNext())    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
134	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  headers.get(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  headers.get(i.next(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  read++;  }  else  {  headers.get(i.next(),  headers);  }	  if(i.hasNext())    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
135	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
136	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
137	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
138	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(headers!=  null)  {  if(headers.contains(ch))  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
139	[BUG]  [BUGGY]  read  +=  headers.size();  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read  +=  headers.size();  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  +=  headers.size();	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
140	[BUG]  [BUGGY]  InputStream  is  =  headers.get(headers.size()  -  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  InputStream  is  =  headers.get(headers.size()  -  1);  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.get(headers.size()  -  1);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
141	[BUG]  [BUGGY]  InputStream  is  =  headers.readInt();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  InputStream  is  =  headers.readInt();  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.readInt();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
142	[BUG]  [BUGGY]  read  =  i.read();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read  =  i.read();  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  i.read();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
143	[BUG]  [BUGGY]  int  read  =  i.read();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  int  read  =  i.read();  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	int  read  =  i.read();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
144	[BUG]  [BUGGY]  int  read  =  headers.size();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  int  read  =  headers.size();  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	int  read  =  headers.size();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
145	[BUG]  [BUGGY]  InputStream  is  =  headers.getInputStream(i.inputStream());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  InputStream  is  =  headers.getInputStream(i.inputStream());  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	InputStream  is  =  headers.getInputStream(i.inputStream());	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
146	[BUG]  [BUGGY]  if(i.hasNext()  ||  i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext()  ||  i.hasNext())  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  i.hasNext())  {  read++;  }	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
147	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).addHeader(headers,  read);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  TarArchiveEntry)i.next()).addHeader(headers,  read);  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry)i.next()).addHeader(headers,  read);	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
148	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(read);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(read);  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setRead(read);	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
149	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).reset();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).reset();  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).reset();	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
150	[BUG]  [BUGGY]  ReadNow.write(headers,  i.next());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ReadNow.write(headers,  i.next());  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	ReadNow.write(headers,  i.next());	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
151	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
152	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
153	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
154	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_FIRST))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_FIRST))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_FIRST))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
155	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreTokens())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
156	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getCurrentToken()));  return  headers;  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
157	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  reader++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
158	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getParent()));  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getParent()));  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getParent()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
159	[BUG]  [BUGGY]  read  =  parsePaxHeaders(i.nextToken());  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read  =  parsePaxHeaders(i.nextToken());  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	read  =  parsePaxHeaders(i.nextToken());	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
160	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parse  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parse  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parse	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getValue()));    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
161	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
162	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
163	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
164	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
165	[BUG]  [BUGGY]  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
166	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
167	[BUG]  [BUGGY]  if(i.hasNext()  ||  i.hasNext())  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext()  ||  i.hasNext())  {  read++;  }  else  {  headers.put(i.next(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  i.hasNext())  {  read++;  }  else  {  headers.put(i.next(),  headers);  }	  if(i.hasNext())    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
168	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while((  ch  =  i.read())!=  -1)  {  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {	  if(i.hasNext())    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
169	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while((  ch  =  i.read())!=  -1)  {  read++;  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	while((  ch  =  i.read())!=  -1)  {  read++;	  if(i.hasNext())    {    read++;    }    else    {    headers.put(i.next(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
170	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
171	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
172	[BUG]  [BUGGY]  if(i.read()  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.read()  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
173	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
174	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePa  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePa  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parsePa	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parsePaxHeaders(i.getKey()));    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
175	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||  headers.size()  >  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreElements()  ||  headers.size()  >  0)  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  ||  headers.size()  >  0)  {  read++;  }	  if(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
176	[BUG]  [BUGGY]  if(!i.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!i.hasMoreElements())  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
177	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreElements()  ||  headers.contains(ch))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreElements()  ||  headers.contains(ch))  {  read++;  }	  if(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
178	[BUG]  [BUGGY]  if(i.hasNext())  {  reader++;  }  else  {  headers.put(i.nextElement(),  headers);  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  reader++;  }  else  {  headers.put(i.nextElement(),  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  reader++;  }  else  {  headers.put(i.nextElement(),  headers);  }	  if(i.hasMoreElements())    {    read++;    }    else    {    headers.put(i.nextElement(),    headers);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
179	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
180	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
181	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
182	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
183	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
184	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty()))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty()))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty()))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
185	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
186	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
187	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
188	[BUG]  [BUGGY]  if(i.read()  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.read()  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.read()  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
189	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
190	[BUG]  [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.contains(ch))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(headers.contains(ch))  {  read++;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
191	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getValue()));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getValue()));  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getValue()));  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
192	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getKeyword()));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getKeyword()));  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next().getKeyword()));  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
193	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers[ch]);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
194	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString());  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString());  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next().getKeyword(),  headers.get(i.next()).toString());  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
195	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  headers.put(ch,  headers.get(ch));  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
196	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  length;  ch++)  {  headers.put(ch,  headers.get(ch));  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
197	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.put(i.next(),  headers.get(i.next()));  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
198	[BUG]  [BUGGY]  if(i.hasNextToken())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNextToken())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNextToken())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
199	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext())  {  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  return  headers;  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
200	[BUG]  [BUGGY]  if(i.hasMoreTokens()  ||  i.hasNextToken())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreTokens()  ||  i.hasNextToken())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens()  ||  i.hasNextToken())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.nextToken()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
201	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getKey()));  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getKey()));  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getKey()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
202	[BUG]  [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getRead()));  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getRead()));  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasMoreTokens())  {  read++;  }  else  {  headers.put(i.nextToken(),  parsePaxHeaders(i.getRead()));  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    headers.put(i.nextToken(),    parsePaxHeaders(i.nextToken()));    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
203	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
204	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
205	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
206	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_NAMES));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
207	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
208	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseString(Feature.QUOTE_FIELD_	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
209	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseStr  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseStr  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(i.getKey(),  parseStr	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(i.getKey(),    parseString(Feature.QUOTE_FIELD_NAMES));    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
210	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext()  ||  ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
211	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch  ==  'n'  ||  ch  ==  't')  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext()  ||  ch  ==  'n'  ||  ch  ==  't')  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  ch  ==  'n'  ||  ch  ==  't')  {  read++;  }	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
212	[BUG]  [BUGGY]  if(!i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!i.hasNext())  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(!i.hasNext())  {  read++;  }	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
213	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch  ==  'n')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext()  ||  ch  ==  'n')  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	442	442	1	replace	if(i.hasNext()  ||  ch  ==  'n')  {  read++;  }	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
