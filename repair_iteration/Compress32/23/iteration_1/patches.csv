bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||  coll.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreElements()  ||  coll.hasMoreElements())  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasMoreElements()  ||  coll.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
2	[BUG]  [BUGGY]  ReadByteArrayOutputStream  coll  =  coll.readByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ReadByteArrayOutputStream  coll  =  coll.readByteArrayOutputStream();  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	ReadByteArrayOutputStream  coll  =  coll.readByteArrayOutputStream();	  if(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
3	[BUG]  [BUGGY]  if(!i.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!i.hasMoreElements())  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(!i.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
4	[BUG]  [BUGGY]  ReadByteArrayOutputStream  coll  =  new  ReadByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ReadByteArrayOutputStream  coll  =  new  ReadByteArrayOutputStream();  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	ReadByteArrayOutputStream  coll  =  new  ReadByteArrayOutputStream();	  if(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
5	[BUG]  [BUGGY]  ReadByteBuffer  coll  =  coll.readByteBuffer(ch);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ReadByteBuffer  coll  =  coll.readByteBuffer(ch);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	ReadByteBuffer  coll  =  coll.readByteBuffer(ch);	  if(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
6	[BUG]  [BUGGY]  while(i.hasNext())  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while(i.hasNext())  {  read++;  }  else  {  coll.close();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(i.hasNext())  {  read++;  }  else  {  coll.close();  }	  if(i.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
7	[BUG]  [BUGGY]  ||  coll.hasNext())  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||  coll.hasNext())  {  read++;  }  else  {  coll.close();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||  coll.hasNext())  {  read++;  }  else  {  coll.close();  }	  if(i.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
8	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  coll.close()  :  null;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  ch  =  i.read())!=  -1)?  coll.close()  :  null;  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  ch  =  i.read())!=  -1)?  coll.close()  :  null;	  if(i.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
9	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  coll.length()  :  0;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  ch  =  i.read())!=  -1)?  coll.length()  :  0;  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  ch  =  i.read())!=  -1)?  coll.length()  :  0;	  if(i.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
10	[BUG]  [BUGGY]  if(i.hasNext()  >  read)  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext()  >  read)  {  read++;  }  else  {  coll.close();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()  >  read)  {  read++;  }  else  {  coll.close();  }	  if(i.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
11	[BUG]  [BUGGY]  ||!hasHitEOF)  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||!hasHitEOF)  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||!hasHitEOF)  {  read++;  }  else  {  return  coll.toString();  }	  if(!hasHitEOF)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
12	[BUG]  [BUGGY]  if(hasHitEOF)  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(hasHitEOF)  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(hasHitEOF)  {  read++;  }  else  {  return  coll.toString();  }	  if(!hasHitEOF)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
13	[BUG]  [BUGGY]  ||  hasHitEOF)  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||  hasHitEOF)  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||  hasHitEOF)  {  read++;  }  else  {  return  coll.toString();  }	  if(!hasHitEOF)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
14	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  if(!hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreElements())  {  if(!hasHitEOF)  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasMoreElements())  {  if(!hasHitEOF)  {  read++;  }	  if(!hasHitEOF)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
15	[BUG]  [BUGGY]  while(!hasHitEOF)  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while(!hasHitEOF)  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(!hasHitEOF)  {  read++;  }  else  {  return  coll.toString();  }	  if(!hasHitEOF)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
16	[BUG]  [BUGGY]  i.set(len,  read);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  i.set(len,  read);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.set(len,  read);	  i.reset();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
17	[BUG]  [BUGGY]  IOUtils.readFully(i,  coll);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  IOUtils.readFully(i,  coll);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	IOUtils.readFully(i,  coll);	  i.reset();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
18	[BUG]  [BUGGY]  i.set(len,  coll);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  i.set(len,  coll);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.set(len,  coll);	  i.reset();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
19	[BUG]  [BUGGY]  i.remove();  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  i.remove();  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.remove();	  i.reset();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
20	[BUG]  [BUGGY]  i.reset(len,  read);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  i.reset(len,  read);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.reset(len,  read);	  i.reset();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
21	[BUG]  [BUGGY]  i.setLength(len);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  i.setLength(len);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.setLength(len);	  i.reset();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
22	[BUG]  [BUGGY]  ||  coll.hasMoreTokens())  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||  coll.hasMoreTokens())  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||  coll.hasMoreTokens())  {  read++;  }  else  {  return  coll.toString();  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
23	[BUG]  [BUGGY]  if(!i.hasMoreTokens())  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!i.hasMoreTokens())  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(!i.hasMoreTokens())  {  read++;  }  else  {  return  coll.toString();  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
24	[BUG]  [BUGGY]  ||(i.hasMoreTokens()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(i.hasMoreTokens()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(i.hasMoreTokens()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  return  coll.toString();  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
25	[BUG]  [BUGGY]  ||(i.hasMoreTokens()  &&  coll.isEmpty()))  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(i.hasMoreTokens()  &&  coll.isEmpty()))  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(i.hasMoreTokens()  &&  coll.isEmpty()))  {  read++;  }  else  {  return  coll.toString();  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
26	[BUG]  [BUGGY]  ||(i.hasMoreTokens()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(i.hasMoreTokens()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(i.hasMoreTokens()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
27	[BUG]  [BUGGY]  if(i.hasMoreTokens()  ||  coll.hasMoreTokens())  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreTokens()  ||  coll.hasMoreTokens())  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasMoreTokens()  ||  coll.hasMoreTokens())  {  read++;  }	  if(i.hasMoreTokens())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
28	[BUG]  [BUGGY]  if(!i.hasMoreTokens())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!i.hasMoreTokens())  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(!i.hasMoreTokens())  {  read++;  }	  if(i.hasMoreTokens())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
29	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreElements())  {  read++;  }  else  {  coll.add(i.nextElement());  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreElements())  {  read++;  }  else  {  coll.add(i.nextElement());  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(!hasHitEOF)  {  if(i.hasMoreElements())  {  read++;  }  else  {  coll.add(i.nextElement());  }	  if(i.hasMoreElements())    {    read++;    }    else    {    coll.add(i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
30	[BUG]  [BUGGY]  col.add(i.nextElement());  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  col.add(i.nextElement());  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	col.add(i.nextElement());	  if(i.hasMoreElements())    {    read++;    }    else    {    coll.add(i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
31	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreElements())  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(!hasHitEOF)  {  if(i.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements())    {    read++;    }    else    {    coll.add(i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
32	[BUG]  [BUGGY]  coll.add(i.nextElement());  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  coll.add(i.nextElement());  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	coll.add(i.nextElement());	  if(i.hasMoreElements())    {    read++;    }    else    {    coll.add(i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
33	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreElements())  {  read++;  }  else  {  Coll.add(i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreElements())  {  read++;  }  else  {  Coll.add(i.nextElement());  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(!hasHitEOF)  {  if(i.hasMoreElements())  {  read++;  }  else  {  Coll.add(i.nextElement());  }	  if(i.hasMoreElements())    {    read++;    }    else    {    coll.add(i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
34	[BUG]  [BUGGY]  ||  coll.hasNext())  {  read++;  }  else  {  coll.put(i.next(),  coll);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||  coll.hasNext())  {  read++;  }  else  {  coll.put(i.next(),  coll);  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||  coll.hasNext())  {  read++;  }  else  {  coll.put(i.next(),  coll);  }	  if(i.hasNext())    {    read++;    }    else    {    coll.put(i.next(),    coll);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
35	[BUG]  [BUGGY]  ||(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  coll.put(i.next(),  coll);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  coll.put(i.next(),  coll);  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  coll.put(i.next(),  coll);  }	  if(i.hasNext())    {    read++;    }    else    {    coll.put(i.next(),    coll);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
36	[BUG]  [BUGGY]  while(i.hasNext())  {  read++;  }  else  {  coll.put(i.next(),  coll);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while(i.hasNext())  {  read++;  }  else  {  coll.put(i.next(),  coll);  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(i.hasNext())  {  read++;  }  else  {  coll.put(i.next(),  coll);  }	  if(i.hasNext())    {    read++;    }    else    {    coll.put(i.next(),    coll);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
37	[BUG]  [BUGGY]  ||(i.hasNext()  &&  coll.getValue(ch)!=  null))  {  read++;  }  else  {  coll.put(i.next(),  coll);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(i.hasNext()  &&  coll.getValue(ch)!=  null))  {  read++;  }  else  {  coll.put(i.next(),  coll);  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(i.hasNext()  &&  coll.getValue(ch)!=  null))  {  read++;  }  else  {  coll.put(i.next(),  coll);  }	  if(i.hasNext())    {    read++;    }    else    {    coll.put(i.next(),    coll);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
38	[BUG]  [BUGGY]  ||(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }	  if(i.hasNext())    {    read++;    }    else    {    coll.put(i.next(),    coll);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
39	[BUG]  [BUGGY]  for(int  read  =  0;  read  <  len;  read++)  {  break;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  for(int  read  =  0;  read  <  len;  read++)  {  break;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	for(int  read  =  0;  read  <  len;  read++)  {  break;  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
40	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while((  ch  =  i.read())!=  -1)  {  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while((  ch  =  i.read())!=  -1)  {	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
41	[BUG]  [BUGGY]  while((  ch  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while((  ch  =  coll.read())!=  -1)  {  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while((  ch  =  coll.read())!=  -1)  {	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
42	[BUG]  [BUGGY]  read  =  0;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read  =  0;  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read  =  0;	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
43	[BUG]  [BUGGY]  for(int  read  =  0;  read  <  len;  read++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  for(int  read  =  0;  read  <  len;  read++)  {  continue;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	for(int  read  =  0;  read  <  len;  read++)  {  continue;  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
44	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  Context.reportCodeChange();  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	Context.reportCodeChange();	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
45	[BUG]  [BUGGY]  for(int  read  =  0;  read  <  len;  read++)  {  break;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  for(int  read  =  0;  read  <  len;  read++)  {  break;  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	for(int  read  =  0;  read  <  len;  read++)  {  break;	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
46	[BUG]  [BUGGY]  ||(i.hasNext()  &&  coll.charAt(i.next())!=  '/'))  {  read++;  }  else  {  coll.append('n');  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(i.hasNext()  &&  coll.charAt(i.next())!=  '/'))  {  read++;  }  else  {  coll.append('n');  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(i.hasNext()  &&  coll.charAt(i.next())!=  '/'))  {  read++;  }  else  {  coll.append('n');  }	  if(i.hasNext())    {    read++;    }    else    {    coll.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
47	[BUG]  [BUGGY]  ||(i.hasNext()  &&  coll.charAt(i.next())!=  'n'))  {  read++;  }  else  {  coll.append('n');  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(i.hasNext()  &&  coll.charAt(i.next())!=  'n'))  {  read++;  }  else  {  coll.append('n');  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(i.hasNext()  &&  coll.charAt(i.next())!=  'n'))  {  read++;  }  else  {  coll.append('n');  }	  if(i.hasNext())    {    read++;    }    else    {    coll.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
48	[BUG]  [BUGGY]  ||(i.hasNext()  &&  coll.charAt(i.next())!=  '-'))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(i.hasNext()  &&  coll.charAt(i.next())!=  '-'))  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(i.hasNext()  &&  coll.charAt(i.next())!=  '-'))  {  read++;  }	  if(i.hasNext())    {    read++;    }    else    {    coll.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
49	[BUG]  [BUGGY]  ||(i.hasNext()  &&  coll.charAt(i.next())!=  '-'))  {  read++;  }  else  {  coll.append('n');  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(i.hasNext()  &&  coll.charAt(i.next())!=  '-'))  {  read++;  }  else  {  coll.append('n');  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(i.hasNext()  &&  coll.charAt(i.next())!=  '-'))  {  read++;  }  else  {  coll.append('n');  }	  if(i.hasNext())    {    read++;    }    else    {    coll.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
50	[BUG]  [BUGGY]  ||(i.hasNext()  &&  coll.charAt(i.next())!=  '-'))  {  read++;  }  else  {  coll.append('+');  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(i.hasNext()  &&  coll.charAt(i.next())!=  '-'))  {  read++;  }  else  {  coll.append('+');  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(i.hasNext()  &&  coll.charAt(i.next())!=  '-'))  {  read++;  }  else  {  coll.append('+');  }	  if(i.hasNext())    {    read++;    }    else    {    coll.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
51	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(!hasHitEOF)  {  if(i.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }	  if(i.hasMoreElements())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
52	[BUG]  [BUGGY]  ||  coll.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||  coll.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||  coll.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }	  if(i.hasMoreElements())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
53	[BUG]  [BUGGY]  ||(i.hasMoreElements()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(i.hasMoreElements()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(i.hasMoreElements()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }	  if(i.hasMoreElements())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
54	[BUG]  [BUGGY]  ||  coll.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||  coll.hasMoreElements())  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||  coll.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
55	[BUG]  [BUGGY]  ||  i.hasNext())  {  read++;  }  else  {  coll.add(i.next());  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||  i.hasNext())  {  read++;  }  else  {  coll.add(i.next());  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||  i.hasNext())  {  read++;  }  else  {  coll.add(i.next());  }	  if(i.hasNext())    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
56	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  coll.getLength()  :  0;  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  ch  =  i.read())!=  -1)?  coll.getLength()  :  0;  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  ch  =  i.read())!=  -1)?  coll.getLength()  :  0;	  if(i.hasNext())    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
57	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  coll.getChars(ch,  0):  0;  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  ch  =  i.read())!=  -1)?  coll.getChars(ch,  0):  0;  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  ch  =  i.read())!=  -1)?  coll.getChars(ch,  0):  0;	  if(i.hasNext())    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
58	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  coll.size()  :  0;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  ch  =  i.read())!=  -1)?  coll.size()  :  0;  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  ch  =  i.read())!=  -1)?  coll.size()  :  0;	  if(i.hasNext())    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
59	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  coll.size()  :  0);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  ch  =  i.read())!=  -1)?  coll.size()  :  0);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  ch  =  i.read())!=  -1)?  coll.size()  :  0);	  if(i.hasNext())    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
60	[BUG]  [BUGGY]  ||(len  >  0  &&  coll.charAt(len  -  1)!=  '/'))  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(len  >  0  &&  coll.charAt(len  -  1)!=  '/'))  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(len  >  0  &&  coll.charAt(len  -  1)!=  '/'))  {  read++;  }  else  {  return  coll.toString();  }	  if(len    >    0)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
61	[BUG]  [BUGGY]  ||(len  >  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(len  >  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(len  >  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  return  coll.toString();  }	  if(len    >    0)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
62	[BUG]  [BUGGY]  ||(len  >  0  &&  coll.charAt(len  -  1)!=  'n'))  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(len  >  0  &&  coll.charAt(len  -  1)!=  'n'))  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(len  >  0  &&  coll.charAt(len  -  1)!=  'n'))  {  read++;  }  else  {  return  coll.toString();  }	  if(len    >    0)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
63	[BUG]  [BUGGY]  ||(len  >  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(len  >  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(len  >  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }	  if(len    >    0)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
64	[BUG]  [BUGGY]  ||(len  >  0  &&  coll.charAt(len  -  1)!=  '-'))  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(len  >  0  &&  coll.charAt(len  -  1)!=  '-'))  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(len  >  0  &&  coll.charAt(len  -  1)!=  '-'))  {  read++;  }  else  {  return  coll.toString();  }	  if(len    >    0)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
65	[BUG]  [BUGGY]  if(len  <  =  0)  {  read++;  }  else  {  coll.append('n');  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(len  <  =  0)  {  read++;  }  else  {  coll.append('n');  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(len  <  =  0)  {  read++;  }  else  {  coll.append('n');  }	  if(len    >    0)    {    read++;    }    else    {    coll.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
66	[BUG]  [BUGGY]  if(len  >  0)  {  coll.append('n');  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(len  >  0)  {  coll.append('n');  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(len  >  0)  {  coll.append('n');  }	  if(len    >    0)    {    read++;    }    else    {    coll.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
67	[BUG]  [BUGGY]  if(len  >  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(len  >  0)  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(len  >  0)  {  read++;  }	  if(len    >    0)    {    read++;    }    else    {    coll.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
68	[BUG]  [BUGGY]  ReadByteArrayOutputStream  coll  =  coll.readByteArrayOutputStream(i);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ReadByteArrayOutputStream  coll  =  coll.readByteArrayOutputStream(i);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	ReadByteArrayOutputStream  coll  =  coll.readByteArrayOutputStream(i);	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
69	[BUG]  [BUGGY]  while(i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while(i.hasNext())  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(i.hasNext())  {  read++;  }	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
70	[BUG]  [BUGGY]  ReadByteArrayOutputStream  coll  =  coll.readByteArrayInputStream(i);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ReadByteArrayOutputStream  coll  =  coll.readByteArrayInputStream(i);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	ReadByteArrayOutputStream  coll  =  coll.readByteArrayInputStream(i);	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
71	[BUG]  [BUGGY]  read(len)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read(len)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read(len)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
72	[BUG]  [BUGGY]  read(len)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_SIZE;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read(len)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_SIZE;  read++)  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read(len)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_SIZE;  read++)  {  return  coll.toString();  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
73	[BUG]  [BUGGY]  while((  ch  =  coll.read())!=  -1)  {  len  >  0)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while((  ch  =  coll.read())!=  -1)  {  len  >  0)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while((  ch  =  coll.read())!=  -1)  {  len  >  0)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
74	[BUG]  [BUGGY]  read(len)  {  for(int  read  =  0;  read  <  length;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read(len)  {  for(int  read  =  0;  read  <  length;  read++)  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read(len)  {  for(int  read  =  0;  read  <  length;  read++)  {  return  coll.toString();  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
75	[BUG]  [BUGGY]  read(len)  {  for(int  read  =  0;  read  <  restLen;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read(len)  {  for(int  read  =  0;  read  <  restLen;  read++)  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read(len)  {  for(int  read  =  0;  read  <  restLen;  read++)  {  return  coll.toString();  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
76	[BUG]  [BUGGY]  read(len)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_LENGTH;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read(len)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_LENGTH;  read++)  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read(len)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_LENGTH;  read++)  {  return  coll.toString();  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
77	[BUG]  [BUGGY]  ch  =  coll.toString(CharsetNames.UTF_8);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ch  =  coll.toString(CharsetNames.UTF_8);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	ch  =  coll.toString(CharsetNames.UTF_8);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
78	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
79	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write(ch);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write(ch);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write(ch);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
80	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write(len,  read);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write(len,  read);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.write(len,  read);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
81	[BUG]  [BUGGY]  InputStream  coll  =  i.readInputStream();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  InputStream  coll  =  i.readInputStream();  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	InputStream  coll  =  i.readInputStream();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
82	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.close();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.close();  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.close();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
83	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.writeInt(len,  read);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.writeInt(len,  read);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  coll.writeInt(len,  read);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
84	[BUG]  [BUGGY]  if(hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(hasHitEOF)  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(hasHitEOF)  {  read++;  }	  if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
85	[BUG]  [BUGGY]  while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
86	[BUG]  [BUGGY]  while(!hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while(!hasHitEOF)  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(!hasHitEOF)  {  read++;  }	  if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
87	[BUG]  [BUGGY]  while(!hasHitEOF  &&  coll.isEmpty())  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while(!hasHitEOF  &&  coll.isEmpty())  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(!hasHitEOF  &&  coll.isEmpty())  {  read++;  }	  if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
88	[BUG]  [BUGGY]  while(!hasHitEOF  &&  coll.charAt(len  -  1)!=  'n')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while(!hasHitEOF  &&  coll.charAt(len  -  1)!=  'n')  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(!hasHitEOF  &&  coll.charAt(len  -  1)!=  'n')  {  read++;  }	  if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
89	[BUG]  [BUGGY]  if(i.hasMoreTokens()  ||  coll.size()  ==  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreTokens()  ||  coll.size()  ==  0)  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasMoreTokens()  ||  coll.size()  ==  0)  {  read++;  }	  if(i.hasMoreTokens())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
90	[BUG]  [BUGGY]  if(i.hasMoreTokens()  ||  coll.length()  ==  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreTokens()  ||  coll.length()  ==  0)  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasMoreTokens()  ||  coll.length()  ==  0)  {  read++;  }	  if(i.hasMoreTokens())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
91	[BUG]  [BUGGY]  i.hasMoreTokens();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  i.hasMoreTokens();  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.hasMoreTokens();	  if(i.hasMoreTokens())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
92	[BUG]  [BUGGY]  int  len  =  coll.length();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  int  len  =  coll.length();  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	int  len  =  coll.length();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
93	[BUG]  [BUGGY]  Integer  len  =  coll.readInt();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  Integer  len  =  coll.readInt();  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	Integer  len  =  coll.readInt();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
94	[BUG]  [BUGGY]  Integer  i  =  coll.readInt();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  Integer  i  =  coll.readInt();  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	Integer  i  =  coll.readInt();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
95	[BUG]  [BUGGY]  ch  =  coll.toString(CharsetNames.UTF_8)+  1;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ch  =  coll.toString(CharsetNames.UTF_8)+  1;  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	ch  =  coll.toString(CharsetNames.UTF_8)+  1;	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
96	[BUG]  [BUGGY]  Integer  i  =  coll.getIntValue(ch);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  Integer  i  =  coll.getIntValue(ch);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	Integer  i  =  coll.getIntValue(ch);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
97	[BUG]  [BUGGY]  ch  =  coll.toString();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ch  =  coll.toString();  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	ch  =  coll.toString();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
98	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.put(i.next(),  null);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.put(i.next(),  null);  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext())  {  read++;  }  else  {  coll.put(i.next(),  null);  }	  if(i.hasNext())    {    read++;    }    else    {    coll.put(i.next(),    coll);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
99	[BUG]  [BUGGY]  read  =  i.next();  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read  =  i.next();  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read  =  i.next();	  if(i.hasNext())    {    read++;    }    else    {    coll.put(i.next(),    coll);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
100	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.put(i.next(),  new  ByteArrayOutputStream());  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.put(i.next(),  new  ByteArrayOutputStream());  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext())  {  read++;  }  else  {  coll.put(i.next(),  new  ByteArrayOutputStream());  }	  if(i.hasNext())    {    read++;    }    else    {    coll.put(i.next(),    coll);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
101	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.put(i.next(),  col);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.put(i.next(),  col);  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext())  {  read++;  }  else  {  coll.put(i.next(),  col);  }	  if(i.hasNext())    {    read++;    }    else    {    coll.put(i.next(),    coll);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
102	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.put(i.next(),  new  BigInteger(len));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.put(i.next(),  new  BigInteger(len));  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext())  {  read++;  }  else  {  coll.put(i.next(),  new  BigInteger(len));  }	  if(i.hasNext())    {    read++;    }    else    {    coll.put(i.next(),    coll);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
103	[BUG]  [BUGGY]  if(i.hasNext()  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext()  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.close();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.close();  }	  if(i.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
104	[BUG]  [BUGGY]  if(i.hasNext()  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext()  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
105	[BUG]  [BUGGY]  if(i.hasNext()  ||  coll.hasNext())  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext()  ||  coll.hasNext())  {  read++;  }  else  {  coll.close();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()  ||  coll.hasNext())  {  read++;  }  else  {  coll.close();  }	  if(i.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
106	[BUG]  [BUGGY]  if(i.hasNext()  ||  coll.next()!=  null)  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext()  ||  coll.next()!=  null)  {  read++;  }  else  {  coll.close();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()  ||  coll.next()!=  null)  {  read++;  }  else  {  coll.close();  }	  if(i.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
107	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||  coll.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreElements()  ||  coll.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasMoreElements()  ||  coll.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }	  if(i.hasMoreElements())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
108	[BUG]  [BUGGY]  read  +=  coll.toString();  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read  +=  coll.toString();  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read  +=  coll.toString();	  if(i.hasMoreElements())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
109	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext())  {  read++;  }  else  {  return  coll.toString();  }	  if(i.hasMoreElements())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
110	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  <  restLen;  read++)  {  break;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  <  restLen;  read++)  {  break;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(len  >  0)  {  for(int  read  =  0;  read  <  restLen;  read++)  {  break;  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
111	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  <  length;  read++)  {  break;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  <  length;  read++)  {  break;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(len  >  0)  {  for(int  read  =  0;  read  <  length;  read++)  {  break;  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
112	[BUG]  [BUGGY]  Integer  ch  =  coll.toString(CharsetNames.UTF_8);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  Integer  ch  =  coll.toString(CharsetNames.UTF_8);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	Integer  ch  =  coll.toString(CharsetNames.UTF_8);	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
113	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  <  limit;  read++)  {  break;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  <  limit;  read++)  {  break;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(len  >  0)  {  for(int  read  =  0;  read  <  limit;  read++)  {  break;  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
114	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||  coll.hasMoreElements())  {  read++;  }  else  {  coll.add(i.nextElement());  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreElements()  ||  coll.hasMoreElements())  {  read++;  }  else  {  coll.add(i.nextElement());  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasMoreElements()  ||  coll.hasMoreElements())  {  read++;  }  else  {  coll.add(i.nextElement());  }	  if(i.hasMoreElements())    {    read++;    }    else    {    coll.add(i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
115	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  Read++;  }  else  {  coll.add(i.nextElement());  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreElements())  {  Read++;  }  else  {  coll.add(i.nextElement());  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasMoreElements())  {  Read++;  }  else  {  coll.add(i.nextElement());  }	  if(i.hasMoreElements())    {    read++;    }    else    {    coll.add(i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
116	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  read++;  }  else  {  coll.add(nextElement());  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreElements())  {  read++;  }  else  {  coll.add(nextElement());  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasMoreElements())  {  read++;  }  else  {  coll.add(nextElement());  }	  if(i.hasMoreElements())    {    read++;    }    else    {    coll.add(i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
117	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  read++;  }  else  {  coll.add(i.getElement());  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreElements())  {  read++;  }  else  {  coll.add(i.getElement());  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasMoreElements())  {  read++;  }  else  {  coll.add(i.getElement());  }	  if(i.hasMoreElements())    {    read++;    }    else    {    coll.add(i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
118	[BUG]  [BUGGY]  if(i.hasNext()  >  read)  {  read++;  }  else  {  coll.add(i.next());  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext()  >  read)  {  read++;  }  else  {  coll.add(i.next());  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()  >  read)  {  read++;  }  else  {  coll.add(i.next());  }	  if(i.hasNext())    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
119	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.add(0,  i.next());  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.add(0,  i.next());  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext())  {  read++;  }  else  {  coll.add(0,  i.next());  }	  if(i.hasNext())    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
120	[BUG]  [BUGGY]  read  =  coll.read(i.next());  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read  =  coll.read(i.next());  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read  =  coll.read(i.next());	  if(i.hasNext())    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
121	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.add(next());  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.add(next());  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext())  {  read++;  }  else  {  coll.add(next());  }	  if(i.hasNext())    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
122	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.add(i.getNext());  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.add(i.getNext());  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext())  {  read++;  }  else  {  coll.add(i.getNext());  }	  if(i.hasNext())    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
123	[BUG]  [BUGGY]  if(!hasHitEOF  &&  coll.charAt(len  -  read)!='')  {  read++;  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF  &&  coll.charAt(len  -  read)!='')  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(!hasHitEOF  &&  coll.charAt(len  -  read)!='')  {  read++;  }	  if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
124	[BUG]  [BUGGY]  if(!hasHitEOF  &&  coll.charAt(len  -  read)!=  'n')  {  read++;  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF  &&  coll.charAt(len  -  read)!=  'n')  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(!hasHitEOF  &&  coll.charAt(len  -  read)!=  'n')  {  read++;  }	  if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
125	[BUG]  [BUGGY]  if(!hasHitEOF  &&  coll.equals(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF  &&  coll.equals(ch))  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(!hasHitEOF  &&  coll.equals(ch))  {  read++;  }	  if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
126	[BUG]  [BUGGY]  if(!hasHitEOF  &&  coll.isEmpty())  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF  &&  coll.isEmpty())  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(!hasHitEOF  &&  coll.isEmpty())  {  read++;  }	  if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
127	[BUG]  [BUGGY]  if(!hasHitEOF  &&  coll.length()  >  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF  &&  coll.length()  >  0)  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(!hasHitEOF  &&  coll.length()  >  0)  {  read++;  }	  if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
128	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).setMoreElements(read);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  TarArchiveEntry)i.next()).setMoreElements(read);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  TarArchiveEntry)i.next()).setMoreElements(read);	  if(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
129	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setMoreElements(read);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  TarArchiveEntry)i).setMoreElements(read);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  TarArchiveEntry)i).setMoreElements(read);	  if(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
130	[BUG]  [BUGGY]  i.setMoreElements(len);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  i.setMoreElements(len);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.setMoreElements(len);	  if(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
131	[BUG]  [BUGGY]  read  =!hasHitEOF  &&  coll.toString().endsWith( ".java ");  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read  =!hasHitEOF  &&  coll.toString().endsWith( ".java ");  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read  =!hasHitEOF  &&  coll.toString().endsWith( ".java ");	  if(!hasHitEOF)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
132	[BUG]  [BUGGY]  i.setRead(read);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  i.setRead(read);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.setRead(read);	  i.reset();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
133	[BUG]  [BUGGY]  i.setRead(len);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  i.setRead(len);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.setRead(len);	  i.reset();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
134	[BUG]  [BUGGY]  i.set();  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  i.set();  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.set();	  i.reset();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
135	[BUG]  [BUGGY]  i.reset(len);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  i.reset(len);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.reset(len);	  i.reset();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
136	[BUG]  [BUGGY]  if(i.hasNext()  ||  coll.charAt(i.next())!=  '-')  {  read++;  }  else  {  coll.append('n');  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext()  ||  coll.charAt(i.next())!=  '-')  {  read++;  }  else  {  coll.append('n');  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()  ||  coll.charAt(i.next())!=  '-')  {  read++;  }  else  {  coll.append('n');  }	  if(i.hasNext())    {    read++;    }    else    {    coll.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
137	[BUG]  [BUGGY]  if(i.hasNext()  ||  coll.charAt(i.next())!=  '/')  {  read++;  }  else  {  coll.append('n');  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext()  ||  coll.charAt(i.next())!=  '/')  {  read++;  }  else  {  coll.append('n');  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()  ||  coll.charAt(i.next())!=  '/')  {  read++;  }  else  {  coll.append('n');  }	  if(i.hasNext())    {    read++;    }    else    {    coll.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
138	[BUG]  [BUGGY]  if(i.hasNext()  >  read)  {  read++;  }  else  {  coll.append('n');  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext()  >  read)  {  read++;  }  else  {  coll.append('n');  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()  >  read)  {  read++;  }  else  {  coll.append('n');  }	  if(i.hasNext())    {    read++;    }    else    {    coll.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
139	[BUG]  [BUGGY]  if(i.hasNext()  ||  coll.charAt(i.next())!=  'n')  {  read++;  }  else  {  coll.append('n');  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext()  ||  coll.charAt(i.next())!=  'n')  {  read++;  }  else  {  coll.append('n');  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()  ||  coll.charAt(i.next())!=  'n')  {  read++;  }  else  {  coll.append('n');  }	  if(i.hasNext())    {    read++;    }    else    {    coll.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
140	[BUG]  [BUGGY]  if(i.hasNext()  ||  coll.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext()  ||  coll.hasNext())  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()  ||  coll.hasNext())  {  read++;  }	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
141	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(read);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(read);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setRead(read);	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
142	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).setLength(len  -  read);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  TarArchiveEntry)i.next()).setLength(len  -  read);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  TarArchiveEntry)i.next()).setLength(len  -  read);	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
143	[BUG]  [BUGGY]  read  >  0)  {  read++;  }  else  {  coll.append('n');  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read  >  0)  {  read++;  }  else  {  coll.append('n');  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read  >  0)  {  read++;  }  else  {  coll.append('n');  }	  if(len    >    0)    {    read++;    }    else    {    coll.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
144	[BUG]  [BUGGY]  read  >  0;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read  >  0;  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read  >  0;	  if(len    >    0)    {    read++;    }    else    {    coll.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
145	[BUG]  [BUGGY]  if(len  >=  0)  {  read++;  }  else  {  coll.append('n');  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(len  >=  0)  {  read++;  }  else  {  coll.append('n');  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(len  >=  0)  {  read++;  }  else  {  coll.append('n');  }	  if(len    >    0)    {    read++;    }    else    {    coll.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
146	[BUG]  [BUGGY]  if(i.hasMoreTokens()  ||  coll.hasMoreTokens())  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreTokens()  ||  coll.hasMoreTokens())  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasMoreTokens()  ||  coll.hasMoreTokens())  {  read++;  }  else  {  return  coll.toString();  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
147	[BUG]  [BUGGY]  if(i.hasMoreTokens()  ||  coll.getMoreTokens()!=  null)  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreTokens()  ||  coll.getMoreTokens()!=  null)  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasMoreTokens()  ||  coll.getMoreTokens()!=  null)  {  read++;  }  else  {  return  coll.toString();  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
148	[BUG]  [BUGGY]  if(i.hasMoreTokens()  ||  coll.size()  ==  0)  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreTokens()  ||  coll.size()  ==  0)  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasMoreTokens()  ||  coll.size()  ==  0)  {  read++;  }  else  {  return  coll.toString();  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
149	[BUG]  [BUGGY]  read  >  0)  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read  >  0)  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read  >  0)  {  read++;  }  else  {  return  coll.toString();  }	  if(len    >    0)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
150	[BUG]  [BUGGY]  read  >  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read  >  0)  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read  >  0)  {  read++;  }	  if(len    >    0)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
151	[BUG]  [BUGGY]  read  >  0  ||  coll.toString().indexOf(':')  >=  -1)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read  >  0  ||  coll.toString().indexOf(':')  >=  -1)  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read  >  0  ||  coll.toString().indexOf(':')  >=  -1)  {  read++;  }	  if(len    >    0)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
152	[BUG]  [BUGGY]  read  >  0  ||  coll.toString().endsWith( ".java "))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read  >  0  ||  coll.toString().endsWith( ".java "))  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read  >  0  ||  coll.toString().endsWith( ".java "))  {  read++;  }	  if(len    >    0)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
153	[BUG]  [BUGGY]  read  >  0  ||  coll.toString().equals(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read  >  0  ||  coll.toString().equals(ch))  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read  >  0  ||  coll.toString().equals(ch))  {  read++;  }	  if(len    >    0)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
154	[BUG]  [BUGGY]  Len  <  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  Len  <  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	Len  <  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
155	[BUG]  [BUGGY]  Len  <  =  0  ||  len  >  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  Len  <  =  0  ||  len  >  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	Len  <  =  0  ||  len  >  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
156	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  <  length;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  <  length;  read++)  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(len  >  0)  {  for(int  read  =  0;  read  <  length;  read++)  {  return  coll.toString();  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
157	[BUG]  [BUGGY]  Len  <  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  Len  <  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	Len  <  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  coll.toString();  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
158	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  <  restLen;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  <  restLen;  read++)  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(len  >  0)  {  for(int  read  =  0;  read  <  restLen;  read++)  {  return  coll.toString();  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
159	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  <  LAST_LENGTH;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  <  LAST_LENGTH;  read++)  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(len  >  0)  {  for(int  read  =  0;  read  <  LAST_LENGTH;  read++)  {  return  coll.toString();  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
160	[BUG]  [BUGGY]  if(len  <  =  0)  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(len  <  =  0)  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(len  <  =  0)  {  read++;  }  else  {  return  coll.toString();  }	  if(len    >    0)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
161	[BUG]  [BUGGY]  if(len  >  0)  {  while((  ch  =  i.read())!=  -1)  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(len  >  0)  {  while((  ch  =  i.read())!=  -1)  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(len  >  0)  {  while((  ch  =  i.read())!=  -1)  {  read++;  }	  if(len    >    0)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
162	[BUG]  [BUGGY]  if(len  >  0)  {  while((  ch  =  i.read())!=  -1)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(len  >  0)  {  while((  ch  =  i.read())!=  -1)  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(len  >  0)  {  while((  ch  =  i.read())!=  -1)  {  return  coll.toString();  }	  if(len    >    0)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
163	[BUG]  [BUGGY]  if(i.hasMoreTokens()  ||  coll.size()  >  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreTokens()  ||  coll.size()  >  0)  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasMoreTokens()  ||  coll.size()  >  0)  {  read++;  }	  if(i.hasMoreTokens())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
164	[BUG]  [BUGGY]  while(i.hasMoreTokens())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while(i.hasMoreTokens())  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(i.hasMoreTokens())  {  read++;  }	  if(i.hasMoreTokens())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
165	[BUG]  [BUGGY]  if(i.hasNext()  ||  coll.hasCharsetName(CharsetNames.UTF_8))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext()  ||  coll.hasCharsetName(CharsetNames.UTF_8))  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()  ||  coll.hasCharsetName(CharsetNames.UTF_8))  {  read++;  }	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
166	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  coll.toString(CharsetNames.UTF_8):  null;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  ch  =  i.read())!=  -1)?  coll.toString(CharsetNames.UTF_8):  null;  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  ch  =  i.read())!=  -1)?  coll.toString(CharsetNames.UTF_8):  null;	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
167	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  coll.toString(CharsetNames.UTF_8):  null);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  ch  =  i.read())!=  -1)?  coll.toString(CharsetNames.UTF_8):  null);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  ch  =  i.read())!=  -1)?  coll.toString(CharsetNames.UTF_8):  null);	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
168	[BUG]  [BUGGY]  if(i.hasNext()  ||  coll.next().equals(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext()  ||  coll.next().equals(ch))  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()  ||  coll.next().equals(ch))  {  read++;  }	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
169	[BUG]  [BUGGY]  parsePaxHeaders(i,  coll);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  parsePaxHeaders(i,  coll);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	parsePaxHeaders(i,  coll);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
170	[BUG]  [BUGGY]  i.setLength(len);  coll.close();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  i.setLength(len);  coll.close();  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.setLength(len);  coll.close();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
171	[BUG]  [BUGGY]  while(len  >  0)  {  for(int  read  =  0;  read  <  len;  read++)  {  break;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while(len  >  0)  {  for(int  read  =  0;  read  <  len;  read++)  {  break;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(len  >  0)  {  for(int  read  =  0;  read  <  len;  read++)  {  break;  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
172	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_SIZE;  read++)  {  break;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_SIZE;  read++)  {  break;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(len  >  0)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_SIZE;  read++)  {  break;  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
173	[BUG]  [BUGGY]  read  =  0;  read  <  len;  read++;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read  =  0;  read  <  len;  read++;  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read  =  0;  read  <  len;  read++;	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
174	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.add(i.nextElement());  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.add(i.nextElement());  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext())  {  read++;  }  else  {  coll.add(i.nextElement());  }	  if(i.hasMoreElements())    {    read++;    }    else    {    coll.add(i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
175	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  read++;  }  else  {  coll.add(ch.nextElement());  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreElements())  {  read++;  }  else  {  coll.add(ch.nextElement());  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasMoreElements())  {  read++;  }  else  {  coll.add(ch.nextElement());  }	  if(i.hasMoreElements())    {    read++;    }    else    {    coll.add(i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
176	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_SIZE;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_SIZE;  read++)  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(len  >  0)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_SIZE;  read++)  {  return  coll.toString();  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
177	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_LIZE;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_LIZE;  read++)  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(len  >  0)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_LIZE;  read++)  {  return  coll.toString();  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
178	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  <  2;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  <  2;  read++)  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(len  >  0)  {  for(int  read  =  0;  read  <  2;  read++)  {  return  coll.toString();  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
179	[BUG]  [BUGGY]  while(i.hasMoreTokens())  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while(i.hasMoreTokens())  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(i.hasMoreTokens())  {  read++;  }  else  {  return  coll.toString();  }	  if(i.hasMoreTokens())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
180	[BUG]  [BUGGY]  i.set(len);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  i.set(len);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.set(len);	  i.reset();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
181	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  coll.toString()  :  null;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  ch  =  i.read())!=  -1)?  coll.toString()  :  null;  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  ch  =  i.read())!=  -1)?  coll.toString()  :  null;	  if(i.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
182	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||  coll.size()  >  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasMoreElements()  ||  coll.size()  >  0)  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasMoreElements()  ||  coll.size()  >  0)  {  read++;  }	  if(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
183	[BUG]  [BUGGY]  while(i.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while(i.hasMoreElements())  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(i.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
184	[BUG]  [BUGGY]  if(!hasHitEOF  &&  coll.equals(CharsetNames.UTF_8))  {  read++;  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF  &&  coll.equals(CharsetNames.UTF_8))  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(!hasHitEOF  &&  coll.equals(CharsetNames.UTF_8))  {  read++;  }	  if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
185	[BUG]  [BUGGY]  if(!hasHitEOF  &&  coll.size()  >  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF  &&  coll.size()  >  0)  {  read++;  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(!hasHitEOF  &&  coll.size()  >  0)  {  read++;  }	  if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
186	[BUG]  [BUGGY]  if(!hasHitEOF  &&  coll.isEOF())  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF  &&  coll.isEOF())  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(!hasHitEOF  &&  coll.isEOF())  {  read++;  }  else  {  return  coll.toString();  }	  if(!hasHitEOF)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
187	[BUG]  [BUGGY]  if(!hasHitEOF  &&  coll.size()  >  0)  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF  &&  coll.size()  >  0)  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(!hasHitEOF  &&  coll.size()  >  0)  {  read++;  }  else  {  return  coll.toString();  }	  if(!hasHitEOF)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
188	[BUG]  [BUGGY]  if(!hasHitEOF  &&  coll.length()  >  0)  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF  &&  coll.length()  >  0)  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(!hasHitEOF  &&  coll.length()  >  0)  {  read++;  }  else  {  return  coll.toString();  }	  if(!hasHitEOF)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
189	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.add(ch.next());  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.add(ch.next());  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext())  {  read++;  }  else  {  coll.add(ch.next());  }	  if(i.hasNext())    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
190	[BUG]  [BUGGY]  if(i.hasNext()  ||  i.hasNext())  {  read++;  }  else  {  coll.add(i.next());  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext()  ||  i.hasNext())  {  read++;  }  else  {  coll.add(i.next());  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()  ||  i.hasNext())  {  read++;  }  else  {  coll.add(i.next());  }	  if(i.hasNext())    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
191	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.add(ch);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.add(ch);  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext())  {  read++;  }  else  {  coll.add(ch);  }	  if(i.hasNext())    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
192	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.put(ch.next(),  coll);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.put(ch.next(),  coll);  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext())  {  read++;  }  else  {  coll.put(ch.next(),  coll);  }	  if(i.hasNext())    {    read++;    }    else    {    coll.put(i.next(),    coll);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
193	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  coll.put(i.next(),  coll);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while((  ch  =  i.read())!=  -1)  {  coll.put(i.next(),  coll);  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while((  ch  =  i.read())!=  -1)  {  coll.put(i.next(),  coll);	  if(i.hasNext())    {    read++;    }    else    {    coll.put(i.next(),    coll);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
194	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.put(ch,  coll);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.put(ch,  coll);  }  [BUGGY]    if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext())  {  read++;  }  else  {  coll.put(ch,  coll);  }	  if(i.hasNext())    {    read++;    }    else    {    coll.put(i.next(),    coll);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
