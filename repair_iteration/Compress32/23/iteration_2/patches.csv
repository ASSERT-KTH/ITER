bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  read  >  0  &&  coll.toString().equals(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  >  0  &&  coll.toString().equals(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read  >  0  &&  coll.toString().equals(ch))  {  read++;  }	  read    >    0    ||    coll.toString().equals(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
2	[BUG]  [BUGGY]  read  =  0  ||  coll.toString().equals(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  0  ||  coll.toString().equals(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read  =  0  ||  coll.toString().equals(ch))  {  read++;  }	  read    >    0    ||    coll.toString().equals(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
3	[BUG]  [BUGGY]  read  <  =  0  ||  coll.toString().equals(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  <  =  0  ||  coll.toString().equals(ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read  <  =  0  ||  coll.toString().equals(ch))  {  read++;  }	  read    >    0    ||    coll.toString().equals(ch))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
4	[BUG]  [BUGGY]  while((  ch  =  i.read())  >=  -1)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())  >=  -1)  {  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while((  ch  =  i.read())  >=  -1)  {	  if(len    >    0)    {    for(int    read    =    0;    read    <    restLen;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
5	[BUG]  [BUGGY]  Integer  i  =  coll.getIntValue();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Integer  i  =  coll.getIntValue();  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	Integer  i  =  coll.getIntValue();	  if(len    >    0)    {    for(int    read    =    0;    read    <    restLen;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
6	[BUG]  [BUGGY]  read(len)  {  for(int  read  =  0;  read  <  2;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read(len)  {  for(int  read  =  0;  read  <  2;  read++)  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read(len)  {  for(int  read  =  0;  read  <  2;  read++)  {  return  coll.toString();  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    2;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	178	None	replace
7	[BUG]  [BUGGY]  read(len)  {  for(int  read  =  0;  read  <  4;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read(len)  {  for(int  read  =  0;  read  <  4;  read++)  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read(len)  {  for(int  read  =  0;  read  <  4;  read++)  {  return  coll.toString();  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    2;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	178	None	replace
8	[BUG]  [BUGGY]  read(len)  {  for(int  read  =  0;  read  <  1;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read(len)  {  for(int  read  =  0;  read  <  1;  read++)  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read(len)  {  for(int  read  =  0;  read  <  1;  read++)  {  return  coll.toString();  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    2;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	178	None	replace
9	[BUG]  [BUGGY]  read(len)  {  for(int  read  =  0;  read  <  3;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read(len)  {  for(int  read  =  0;  read  <  3;  read++)  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read(len)  {  for(int  read  =  0;  read  <  3;  read++)  {  return  coll.toString();  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    2;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	178	None	replace
10	[BUG]  [BUGGY]  if(i.hasMoreTokens()  &&  coll.size()  ==  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreTokens()  &&  coll.size()  ==  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasMoreTokens()  &&  coll.size()  ==  0)  {  read++;  }	  if(i.hasMoreTokens()    ||    coll.size()    ==    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
11	[BUG]  [BUGGY]  if(coll.hasMoreTokens()  ||  coll.size()  ==  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(coll.hasMoreTokens()  ||  coll.size()  ==  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(coll.hasMoreTokens()  ||  coll.size()  ==  0)  {  read++;  }	  if(i.hasMoreTokens()    ||    coll.size()    ==    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
12	[BUG]  [BUGGY]  (i.hasMoreTokens()  ||  coll.size()  ==  0))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  (i.hasMoreTokens()  ||  coll.size()  ==  0))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	(i.hasMoreTokens()  ||  coll.size()  ==  0))  {  read++;  }	  if(i.hasMoreTokens()    ||    coll.size()    ==    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
13	[BUG]  [BUGGY]  (i.hasMoreTokens()  &&  coll.size()  ==  0))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  (i.hasMoreTokens()  &&  coll.size()  ==  0))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	(i.hasMoreTokens()  &&  coll.size()  ==  0))  {  read++;  }	  if(i.hasMoreTokens()    ||    coll.size()    ==    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
14	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  read  >  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  read  >  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while((  ch  =  i.read())!=  -1)  {  read  >  0)  {  read++;  }	  read    >    0)    {    read++;    }    else    {    coll.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
15	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1))  {  read++;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1))  {  read++;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  ch  =  i.read())!=  -1))  {  read++;	  read    >    0)    {    read++;    }    else    {    coll.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
16	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  read(len)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_LENGTH;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  read(len)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_LENGTH;  read++)  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while((  ch  =  i.read())!=  -1)  {  read(len)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_LENGTH;  read++)  {  return  coll.toString();  }	  read(len)    {    for(int    read    =    0;    read    <    SMALL_BUFFER_LENGTH;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
17	[BUG]  [BUGGY]  read(ch)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_LENGTH;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read(ch)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_LENGTH;  read++)  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read(ch)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_LENGTH;  read++)  {  return  coll.toString();  }	  read(len)    {    for(int    read    =    0;    read    <    SMALL_BUFFER_LENGTH;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
18	[BUG]  [BUGGY]  read(ch)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read(ch)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read(ch)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }	  read(len)    {    for(int    read    =    0;    read    <    SMALL_BUFFER_LENGTH;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
19	[BUG]  [BUGGY]  if(i.hasNext()  ==  read)  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ==  read)  {  read++;  }  else  {  coll.close();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()  ==  read)  {  read++;  }  else  {  coll.close();  }	  if(i.hasNext()    >    read)    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
20	[BUG]  [BUGGY]  if(i.hasNext()!=  read)  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()!=  read)  {  read++;  }  else  {  coll.close();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()!=  read)  {  read++;  }  else  {  coll.close();  }	  if(i.hasNext()    >    read)    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
21	[BUG]  [BUGGY]  if(i.hasNext()  >=  read)  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  >=  read)  {  read++;  }  else  {  coll.close();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()  >=  read)  {  read++;  }  else  {  coll.close();  }	  if(i.hasNext()    >    read)    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
22	[BUG]  [BUGGY]  if(i.hasNext()  <  read)  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  <  read)  {  read++;  }  else  {  coll.close();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()  <  read)  {  read++;  }  else  {  coll.close();  }	  if(i.hasNext()    >    read)    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
23	[BUG]  [BUGGY]  if(i.hasNext()  <  len)  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  <  len)  {  read++;  }  else  {  coll.close();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()  <  len)  {  read++;  }  else  {  coll.close();  }	  if(i.hasNext()    >    read)    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
24	[BUG]  [BUGGY]  if(i.hasNext()!=  read)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()!=  read)  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()!=  read)  {  read++;  }	  if(i.hasNext()    >    read)    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
25	[BUG]  [BUGGY]  if(coll.hasNext()  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(coll.hasNext()  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(coll.hasNext()  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.hasNext()    ||    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
26	[BUG]  [BUGGY]  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.hasNext()    ||    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
27	[BUG]  [BUGGY]  if(len.hasNext()  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(len.hasNext()  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(len.hasNext()  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.hasNext()    ||    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
28	[BUG]  [BUGGY]  if(i.hasNext()  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES,  ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES,  ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES,  ch))  {  read++;  }	  if(i.hasNext()    ||    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
29	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreElements())  {  read++;  }  else  {  coll.add(i.getElement());  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreElements())  {  read++;  }  else  {  coll.add(i.getElement());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(!hasHitEOF)  {  if(i.hasMoreElements())  {  read++;  }  else  {  coll.add(i.getElement());  }	  if(i.hasMoreElements())    {    read++;    }    else    {    coll.add(i.getElement());    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
30	[BUG]  [BUGGY]  ||  coll.hasMoreElements())  {  read++;  }  else  {  coll.add(i.getElement());  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  coll.hasMoreElements())  {  read++;  }  else  {  coll.add(i.getElement());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||  coll.hasMoreElements())  {  read++;  }  else  {  coll.add(i.getElement());  }	  if(i.hasMoreElements())    {    read++;    }    else    {    coll.add(i.getElement());    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
31	[BUG]  [BUGGY]  col.add(i.getElement());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  col.add(i.getElement());  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	col.add(i.getElement());	  if(i.hasMoreElements())    {    read++;    }    else    {    coll.add(i.getElement());    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
32	[BUG]  [BUGGY]  coll.add(i.getElement());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  coll.add(i.getElement());  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	coll.add(i.getElement());	  if(i.hasMoreElements())    {    read++;    }    else    {    coll.add(i.getElement());    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
33	[BUG]  [BUGGY]  if(i.hasMoreElements()  &&  coll.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  &&  coll.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasMoreElements()  &&  coll.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements()    ||    coll.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
34	[BUG]  [BUGGY]  if(coll.hasMoreElements()  ||  coll.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(coll.hasMoreElements()  ||  coll.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(coll.hasMoreElements()  ||  coll.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements()    ||    coll.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
35	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  read(len)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_SIZE;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  read(len)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_SIZE;  read++)  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while((  ch  =  i.read())!=  -1)  {  read(len)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_SIZE;  read++)  {  return  coll.toString();  }	  read(len)    {    for(int    read    =    0;    read    <    SMALL_BUFFER_SIZE;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
36	[BUG]  [BUGGY]  read(ch)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_SIZE;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read(ch)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_SIZE;  read++)  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read(ch)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_SIZE;  read++)  {  return  coll.toString();  }	  read(len)    {    for(int    read    =    0;    read    <    SMALL_BUFFER_SIZE;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
37	[BUG]  [BUGGY]  read(len)  {  for(int  read  =  0;  read  <  recordSize;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read(len)  {  for(int  read  =  0;  read  <  recordSize;  read++)  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read(len)  {  for(int  read  =  0;  read  <  recordSize;  read++)  {  return  coll.toString();  }	  read(len)    {    for(int    read    =    0;    read    <    SMALL_BUFFER_SIZE;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
38	[BUG]  [BUGGY]  ||  coll.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  coll.hasNext())  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||  coll.hasNext())  {  read++;  }	  ||    coll.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
39	[BUG]  [BUGGY]  ||  coll.next())  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  coll.next())  {  read++;  }  else  {  coll.close();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||  coll.next())  {  read++;  }  else  {  coll.close();  }	  ||    coll.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
40	[BUG]  [BUGGY]  ||  i.hasNext())  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.hasNext())  {  read++;  }  else  {  coll.close();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||  i.hasNext())  {  read++;  }  else  {  coll.close();  }	  ||    coll.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
41	[BUG]  [BUGGY]  ||  coll.hasNext())  {  read++;  }  else  {  coll.flush();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  coll.hasNext())  {  read++;  }  else  {  coll.flush();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||  coll.hasNext())  {  read++;  }  else  {  coll.flush();  }	  ||    coll.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
42	[BUG]  [BUGGY]  ||  coll.hasNext())  {  read++;  }  else  {  col.close();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  coll.hasNext())  {  read++;  }  else  {  col.close();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||  coll.hasNext())  {  read++;  }  else  {  col.close();  }	  ||    coll.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
43	[BUG]  [BUGGY]  read  ||  coll.hasNext())  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  ||  coll.hasNext())  {  read++;  }  else  {  coll.close();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read  ||  coll.hasNext())  {  read++;  }  else  {  coll.close();  }	  ||    coll.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
44	[BUG]  [BUGGY]  ReadByteArrayOutputStream  coll  =(ReadByteArrayOutputStream)i.next();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ReadByteArrayOutputStream  coll  =(ReadByteArrayOutputStream)i.next();  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	ReadByteArrayOutputStream  coll  =(ReadByteArrayOutputStream)i.next();	  if(i.hasNext()    ||    coll.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
45	[BUG]  [BUGGY]  ReadByteArrayOutputStream  coll  =  i.readByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ReadByteArrayOutputStream  coll  =  i.readByteArrayOutputStream();  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	ReadByteArrayOutputStream  coll  =  i.readByteArrayOutputStream();	  if(i.hasNext()    ||    coll.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
46	[BUG]  [BUGGY]  ReadByteArrayOutputStream  coll  =(ReadByteArrayOutputStream)i.readByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ReadByteArrayOutputStream  coll  =(ReadByteArrayOutputStream)i.readByteArrayOutputStream();  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	ReadByteArrayOutputStream  coll  =(ReadByteArrayOutputStream)i.readByteArrayOutputStream();	  if(i.hasNext()    ||    coll.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
47	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readInputStream(i);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  coll  =  IOUtils.readInputStream(i);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	InputStream  coll  =  IOUtils.readInputStream(i);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
48	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readFully(i,  ch);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  coll  =  IOUtils.readFully(i,  ch);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	InputStream  coll  =  IOUtils.readFully(i,  ch);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
49	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readInputStream(i,  read);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  coll  =  IOUtils.readInputStream(i,  read);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	InputStream  coll  =  IOUtils.readInputStream(i,  read);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
50	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readFully(i,  i);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  coll  =  IOUtils.readFully(i,  i);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	InputStream  coll  =  IOUtils.readFully(i,  i);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
51	[BUG]  [BUGGY]  InputStream  coll  =  i.readInputStream(ch);  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  coll  =  i.readInputStream(ch);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	InputStream  coll  =  i.readInputStream(ch);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
52	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readFully(i);  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  InputStream  coll  =  IOUtils.readFully(i);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	InputStream  coll  =  IOUtils.readFully(i);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
53	[BUG]  [BUGGY]  for(int  read  =  0;  read  <  SMALL_BUFFER_SIZE;  read++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  for(int  read  =  0;  read  <  SMALL_BUFFER_SIZE;  read++)  {  continue;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	for(int  read  =  0;  read  <  SMALL_BUFFER_SIZE;  read++)  {  continue;  }	  for(int    read    =    0;    read    <    len;    read++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
54	[BUG]  [BUGGY]  for(int  read  =  0;  read  <  ch;  read++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  for(int  read  =  0;  read  <  ch;  read++)  {  continue;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	for(int  read  =  0;  read  <  ch;  read++)  {  continue;  }	  for(int    read    =    0;    read    <    len;    read++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
55	[BUG]  [BUGGY]  for(int  read  =  0;  read  <  length;  read++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  for(int  read  =  0;  read  <  length;  read++)  {  continue;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	for(int  read  =  0;  read  <  length;  read++)  {  continue;  }	  for(int    read    =    0;    read    <    len;    read++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
56	[BUG]  [BUGGY]  for(int  read  =  0;  read  <  SMALL_BUFFER_LENGTH;  read++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  for(int  read  =  0;  read  <  SMALL_BUFFER_LENGTH;  read++)  {  continue;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	for(int  read  =  0;  read  <  SMALL_BUFFER_LENGTH;  read++)  {  continue;  }	  for(int    read    =    0;    read    <    len;    read++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
57	[BUG]  [BUGGY]  for(int  read  =  0;  read  <  n;  read++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  for(int  read  =  0;  read  <  n;  read++)  {  continue;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	for(int  read  =  0;  read  <  n;  read++)  {  continue;  }	  for(int    read    =    0;    read    <    len;    read++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
58	[BUG]  [BUGGY]  i.setMoreTokens(len);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setMoreTokens(len);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.setMoreTokens(len);	  i.hasMoreTokens();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
59	[BUG]  [BUGGY]  i.removeToken(ch);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.removeToken(ch);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.removeToken(ch);	  i.hasMoreTokens();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
60	[BUG]  [BUGGY]  i.removeToken(len);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.removeToken(len);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.removeToken(len);	  i.hasMoreTokens();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
61	[BUG]  [BUGGY]  i.removeLast();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.removeLast();  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.removeLast();	  i.hasMoreTokens();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
62	[BUG]  [BUGGY]  i.removeToString();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.removeToString();  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.removeToString();	  i.hasMoreTokens();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
63	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(len);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(len);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setRead(len);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
64	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(ch);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(ch);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setRead(ch);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
65	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(coll);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(coll);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setRead(coll);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
66	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(remainderLen);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(remainderLen);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setRead(remainderLen);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
67	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setEnd(read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setEnd(read);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setEnd(read);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
68	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(record);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(record);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setRead(record);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
69	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(cl);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(cl);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setRead(cl);	  ((    TarArchiveEntry    <    K,    V>)i.next()).setRead(read);    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
70	[BUG]  [BUGGY]  read(0)  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read(0)  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read(0)  {  read++;  }  else  {  return  coll.toString();  }	  if(len    <    =    0)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
71	[BUG]  [BUGGY]  ||(len  <  =  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(len  <  =  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(len  <  =  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  return  coll.toString();  }	  if(len    <    =    0)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
72	[BUG]  [BUGGY]  ||(len  <  =  0  &&  coll.length()  >  0))  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(len  <  =  0  &&  coll.length()  >  0))  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(len  <  =  0  &&  coll.length()  >  0))  {  read++;  }  else  {  return  coll.toString();  }	  if(len    <    =    0)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
73	[BUG]  [BUGGY]  ||(len  <  =  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(len  <  =  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(len  <  =  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }	  if(len    <    =    0)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
74	[BUG]  [BUGGY]  ||(len  <  =  0  &&  coll.size()  >  0))  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(len  <  =  0  &&  coll.size()  >  0))  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(len  <  =  0  &&  coll.size()  >  0))  {  read++;  }  else  {  return  coll.toString();  }	  if(len    <    =    0)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
75	[BUG]  [BUGGY]  while((  ch  =  col.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  col.read())!=  -1)  {  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while((  ch  =  col.read())!=  -1)  {	  while((    ch    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
76	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(len))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  IOUtils.readFully(len))!=  -1)  {  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while((  ch  =  IOUtils.readFully(len))!=  -1)  {	  while((    ch    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
77	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(i))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  IOUtils.readFully(i))!=  -1)  {  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while((  ch  =  IOUtils.readFully(i))!=  -1)  {	  while((    ch    =    coll.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
78	[BUG]  [BUGGY]  ||(ch.hasMoreTokens()  &&  coll.isEmpty()))  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(ch.hasMoreTokens()  &&  coll.isEmpty()))  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(ch.hasMoreTokens()  &&  coll.isEmpty()))  {  read++;  }  else  {  return  coll.toString();  }	  ||(i.hasMoreTokens()    &&    coll.isEmpty()))    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
79	[BUG]  [BUGGY]  ||(i.hasMoreTokens()  &&  coll.isEmpty()  +  1))  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasMoreTokens()  &&  coll.isEmpty()  +  1))  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(i.hasMoreTokens()  &&  coll.isEmpty()  +  1))  {  read++;  }  else  {  return  coll.toString();  }	  ||(i.hasMoreTokens()    &&    coll.isEmpty()))    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
80	[BUG]  [BUGGY]  ||(!i.hasMoreTokens()  &&  coll.isEmpty()))  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(!i.hasMoreTokens()  &&  coll.isEmpty()))  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(!i.hasMoreTokens()  &&  coll.isEmpty()))  {  read++;  }  else  {  return  coll.toString();  }	  ||(i.hasMoreTokens()    &&    coll.isEmpty()))    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
81	[BUG]  [BUGGY]  ||(i.hasMoreTokens()  &&  coll.isEmpty()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasMoreTokens()  &&  coll.isEmpty()))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(i.hasMoreTokens()  &&  coll.isEmpty()))  {  read++;  }	  ||(i.hasMoreTokens()    &&    coll.isEmpty()))    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
82	[BUG]  [BUGGY]  ||(coll.hasMoreTokens()  &&  coll.isEmpty()))  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(coll.hasMoreTokens()  &&  coll.isEmpty()))  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(coll.hasMoreTokens()  &&  coll.isEmpty()))  {  read++;  }  else  {  return  coll.toString();  }	  ||(i.hasMoreTokens()    &&    coll.isEmpty()))    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
83	[BUG]  [BUGGY]  ||  i.hasMoreTokens()  &&  coll.isEmpty())  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.hasMoreTokens()  &&  coll.isEmpty())  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||  i.hasMoreTokens()  &&  coll.isEmpty())  {  read++;  }  else  {  return  coll.toString();  }	  ||(i.hasMoreTokens()    &&    coll.isEmpty()))    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
84	[BUG]  [BUGGY]  read  =  0;  read  <  len;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  0;  read  <  len;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read  =  0;  read  <  len;	  read    =    0;    read    <    len;    read++;    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
85	[BUG]  [BUGGY]  read  =  0;  read  <  LAST_VALID_LAST;  read++;  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  0;  read  <  LAST_VALID_LAST;  read++;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read  =  0;  read  <  LAST_VALID_LAST;  read++;	  read    =    0;    read    <    len;    read++;    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
86	[BUG]  [BUGGY]  read  =  0;  read  <  LAST_VALID_CHROME;  read++;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  0;  read  <  LAST_VALID_CHROME;  read++;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read  =  0;  read  <  LAST_VALID_CHROME;  read++;	  read    =    0;    read    <    len;    read++;    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
87	[BUG]  [BUGGY]  read  =  0;  read  <  length;  read++;  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  0;  read  <  length;  read++;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	read  =  0;  read  <  length;  read++;	  read    =    0;    read    <    len;    read++;    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
88	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  coll.length()  :  1;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)?  coll.length()  :  1;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  ch  =  i.read())!=  -1)?  coll.length()  :  1;	  ((    ch    =    i.read())!=    -1)?    coll.length()    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
89	[BUG]  [BUGGY]  ((  ch  =  i.read())  ==  -1)?  coll.length()  :  0;  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())  ==  -1)?  coll.length()  :  0;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  ch  =  i.read())  ==  -1)?  coll.length()  :  0;	  ((    ch    =    i.read())!=    -1)?    coll.length()    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
90	[BUG]  [BUGGY]  ((  ch  =  coll.read())!=  -1)?  coll.length()  :  0;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  coll.read())!=  -1)?  coll.length()  :  0;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  ch  =  coll.read())!=  -1)?  coll.length()  :  0;	  ((    ch    =    i.read())!=    -1)?    coll.length()    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
91	[BUG]  [BUGGY]  ((  ch  =  i.read())  >>  -1)?  coll.length()  :  0;  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())  >>  -1)?  coll.length()  :  0;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  ch  =  i.read())  >>  -1)?  coll.length()  :  0;	  ((    ch    =    i.read())!=    -1)?    coll.length()    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
92	[BUG]  [BUGGY]  ((  ch  =  i.read())  >=  -1)?  coll.length()  :  0;  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())  >=  -1)?  coll.length()  :  0;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  ch  =  i.read())  >=  -1)?  coll.length()  :  0;	  ((    ch    =    i.read())!=    -1)?    coll.length()    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
93	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  col.length()  :  0;  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)?  col.length()  :  0;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  ch  =  i.read())!=  -1)?  col.length()  :  0;	  ((    ch    =    i.read())!=    -1)?    coll.length()    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
94	[BUG]  [BUGGY]  ||(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  coll.put(i.next(),  new  ByteArrayOutputStream());  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  coll.put(i.next(),  new  ByteArrayOutputStream());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  coll.put(i.next(),  new  ByteArrayOutputStream());  }	  if(i.hasNext())    {    read++;    }    else    {    coll.put(i.next(),    new    ByteArrayOutputStream());    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
95	[BUG]  [BUGGY]  ||(i.hasNext()  &&  coll.isEmpty()))  {  read++;  }  else  {  coll.put(i.next(),  new  ByteArrayOutputStream());  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  coll.isEmpty()))  {  read++;  }  else  {  coll.put(i.next(),  new  ByteArrayOutputStream());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(i.hasNext()  &&  coll.isEmpty()))  {  read++;  }  else  {  coll.put(i.next(),  new  ByteArrayOutputStream());  }	  if(i.hasNext())    {    read++;    }    else    {    coll.put(i.next(),    new    ByteArrayOutputStream());    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
96	[BUG]  [BUGGY]  ||(i.hasNext()  &&  coll.get(i.next())!=  0))  {  read++;  }  else  {  coll.put(i.next(),  new  ByteArrayOutputStream());  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  coll.get(i.next())!=  0))  {  read++;  }  else  {  coll.put(i.next(),  new  ByteArrayOutputStream());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(i.hasNext()  &&  coll.get(i.next())!=  0))  {  read++;  }  else  {  coll.put(i.next(),  new  ByteArrayOutputStream());  }	  if(i.hasNext())    {    read++;    }    else    {    coll.put(i.next(),    new    ByteArrayOutputStream());    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
97	[BUG]  [BUGGY]  ||(i.hasNext()  &&  coll.get(ch)!=  0))  {  read++;  }  else  {  coll.put(i.next(),  new  ByteArrayOutputStream());  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  coll.get(ch)!=  0))  {  read++;  }  else  {  coll.put(i.next(),  new  ByteArrayOutputStream());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(i.hasNext()  &&  coll.get(ch)!=  0))  {  read++;  }  else  {  coll.put(i.next(),  new  ByteArrayOutputStream());  }	  if(i.hasNext())    {    read++;    }    else    {    coll.put(i.next(),    new    ByteArrayOutputStream());    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
98	[BUG]  [BUGGY]  ||(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAME)))  {  read++;  }  else  {  coll.put(i.next(),  new  ByteArrayOutputStream());  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAME)))  {  read++;  }  else  {  coll.put(i.next(),  new  ByteArrayOutputStream());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAME)))  {  read++;  }  else  {  coll.put(i.next(),  new  ByteArrayOutputStream());  }	  if(i.hasNext())    {    read++;    }    else    {    coll.put(i.next(),    new    ByteArrayOutputStream());    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
99	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.put(ch.next(),  new  ByteArrayOutputStream());  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  coll.put(ch.next(),  new  ByteArrayOutputStream());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext())  {  read++;  }  else  {  coll.put(ch.next(),  new  ByteArrayOutputStream());  }	  if(i.hasNext())    {    read++;    }    else    {    coll.put(i.next(),    new    ByteArrayOutputStream());    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
100	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  read(len)  {  for(int  read  =  0;  read  <  length;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  read(len)  {  for(int  read  =  0;  read  <  length;  read++)  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while((  ch  =  i.read())!=  -1)  {  read(len)  {  for(int  read  =  0;  read  <  length;  read++)  {  return  coll.toString();  }	  read(len)    {    for(int    read    =    0;    read    <    length;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
101	[BUG]  [BUGGY]  ||  i.hasNext())  {  read++;  }  else  {  coll.add(i.nextElement());  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.hasNext())  {  read++;  }  else  {  coll.add(i.nextElement());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||  i.hasNext())  {  read++;  }  else  {  coll.add(i.nextElement());  }	  if(i.hasNext())    {    read++;    }    else    {    coll.add(i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
102	[BUG]  [BUGGY]  while(i.hasNext())  {  read++;  }  else  {  coll.add(i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(i.hasNext())  {  read++;  }  else  {  coll.add(i.nextElement());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(i.hasNext())  {  read++;  }  else  {  coll.add(i.nextElement());  }	  if(i.hasNext())    {    read++;    }    else    {    coll.add(i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
103	[BUG]  [BUGGY]  while(i.hasNext())  {  if(i.hasNext())  {  read++;  }  else  {  coll.add(i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(i.hasNext())  {  if(i.hasNext())  {  read++;  }  else  {  coll.add(i.nextElement());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(i.hasNext())  {  if(i.hasNext())  {  read++;  }  else  {  coll.add(i.nextElement());  }	  if(i.hasNext())    {    read++;    }    else    {    coll.add(i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
104	[BUG]  [BUGGY]  ||  i.hasNext()  {  read++;  }  else  {  coll.add(i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.hasNext()  {  read++;  }  else  {  coll.add(i.nextElement());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||  i.hasNext()  {  read++;  }  else  {  coll.add(i.nextElement());  }	  if(i.hasNext())    {    read++;    }    else    {    coll.add(i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
105	[BUG]  [BUGGY]  ((  ch  =  coll.read())!=  -1)?  coll.toString(CharsetNames.UTF_8):  null;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  coll.read())!=  -1)?  coll.toString(CharsetNames.UTF_8):  null;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  ch  =  coll.read())!=  -1)?  coll.toString(CharsetNames.UTF_8):  null;	  ((    ch    =    i.read())!=    -1)?    coll.toString(CharsetNames.UTF_8):    null;    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
106	[BUG]  [BUGGY]  ((  ch  =  i.read())  ==  -1)?  coll.toString(CharsetNames.UTF_8):  null;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())  ==  -1)?  coll.toString(CharsetNames.UTF_8):  null;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  ch  =  i.read())  ==  -1)?  coll.toString(CharsetNames.UTF_8):  null;	  ((    ch    =    i.read())!=    -1)?    coll.toString(CharsetNames.UTF_8):    null;    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
107	[BUG]  [BUGGY]  ((  ch  =  i.read())  >=  -1)?  coll.toString(CharsetNames.UTF_8):  null;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())  >=  -1)?  coll.toString(CharsetNames.UTF_8):  null;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  ch  =  i.read())  >=  -1)?  coll.toString(CharsetNames.UTF_8):  null;	  ((    ch    =    i.read())!=    -1)?    coll.toString(CharsetNames.UTF_8):    null;    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
108	[BUG]  [BUGGY]  ((  ch  =  i.read())  >>  -1)?  coll.toString(CharsetNames.UTF_8):  null;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())  >>  -1)?  coll.toString(CharsetNames.UTF_8):  null;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  ch  =  i.read())  >>  -1)?  coll.toString(CharsetNames.UTF_8):  null;	  ((    ch    =    i.read())!=    -1)?    coll.toString(CharsetNames.UTF_8):    null;    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
109	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  col.toString(CharsetNames.UTF_8):  null;  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)?  col.toString(CharsetNames.UTF_8):  null;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  ch  =  i.read())!=  -1)?  col.toString(CharsetNames.UTF_8):  null;	  ((    ch    =    i.read())!=    -1)?    coll.toString(CharsetNames.UTF_8):    null;    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
110	[BUG]  [BUGGY]  ((  ch  =  i.read())!=  -1)?  coll.toString(CharsetNames.UTF_8):  StringUtils.EMPTY;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  i.read())!=  -1)?  coll.toString(CharsetNames.UTF_8):  StringUtils.EMPTY;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	((  ch  =  i.read())!=  -1)?  coll.toString(CharsetNames.UTF_8):  StringUtils.EMPTY;	  ((    ch    =    i.read())!=    -1)?    coll.toString(CharsetNames.UTF_8):    null;    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
111	[BUG]  [BUGGY]  i.setLength(0);  coll.close();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setLength(0);  coll.close();  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.setLength(0);  coll.close();	  i.setLength(len);    coll.close();    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
112	[BUG]  [BUGGY]  i.setLength(read);  coll.close();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setLength(read);  coll.close();  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.setLength(read);  coll.close();	  i.setLength(len);    coll.close();    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
113	[BUG]  [BUGGY]  if(len  >  0)  {  i.setLength(len);  coll.close();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(len  >  0)  {  i.setLength(len);  coll.close();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(len  >  0)  {  i.setLength(len);  coll.close();  }	  i.setLength(len);    coll.close();    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
114	[BUG]  [BUGGY]  n.setLength(len);  coll.close();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  n.setLength(len);  coll.close();  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	n.setLength(len);  coll.close();	  i.setLength(len);    coll.close();    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
115	[BUG]  [BUGGY]  if(len  >  0)  {  i.setLength(0);  coll.close();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(len  >  0)  {  i.setLength(0);  coll.close();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(len  >  0)  {  i.setLength(0);  coll.close();  }	  i.setLength(len);    coll.close();    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
116	[BUG]  [BUGGY]  i.setLength(len);  coll.flush();  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setLength(len);  coll.flush();  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.setLength(len);  coll.flush();	  i.setLength(len);    coll.close();    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
117	[BUG]  [BUGGY]  while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.toString(CharsetNames.UTF_8))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.toString(CharsetNames.UTF_8))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.toString(CharsetNames.UTF_8))  {  read++;  }	  while(!hasHitEOF    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
118	[BUG]  [BUGGY]  while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  read++;  }	  while(!hasHitEOF    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
119	[BUG]  [BUGGY]  while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES,  ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES,  ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES,  ch))  {  read++;  }	  while(!hasHitEOF    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
120	[BUG]  [BUGGY]  while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {  read++;  }	  while(!hasHitEOF    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
121	[BUG]  [BUGGY]  while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES),  read++)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES),  read++)  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES),  read++)  {  read++;  }	  while(!hasHitEOF    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
122	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  while(!hasHitEOF    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
123	[BUG]  [BUGGY]  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.put(i.next(),  coll);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.put(i.next(),  coll);  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.put(i.next(),  coll);  }	  ||(i.hasNext()    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    read++;    }    else    {    coll.put(i.next(),    coll);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
124	[BUG]  [BUGGY]  ||  i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.put(i.next(),  coll);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.put(i.next(),  coll);  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||  i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.put(i.next(),  coll);  }	  ||(i.hasNext()    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    read++;    }    else    {    coll.put(i.next(),    coll);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
125	[BUG]  [BUGGY]  ||(i.hasNext()  <  len)&&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  coll.put(i.next(),  coll);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  <  len)&&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  coll.put(i.next(),  coll);  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(i.hasNext()  <  len)&&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  coll.put(i.next(),  coll);  }	  ||(i.hasNext()    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    read++;    }    else    {    coll.put(i.next(),    coll);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
126	[BUG]  [BUGGY]  ||(i.hasNext()  {  ch  }  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  coll.put(i.next(),  coll);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  {  ch  }  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  coll.put(i.next(),  coll);  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(i.hasNext()  {  ch  }  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  coll.put(i.next(),  coll);  }	  ||(i.hasNext()    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    read++;    }    else    {    coll.put(i.next(),    coll);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
127	[BUG]  [BUGGY]  ||(i.hasNext()  {  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  coll.put(i.next(),  coll);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  {  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  coll.put(i.next(),  coll);  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(i.hasNext()  {  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  coll.put(i.next(),  coll);  }	  ||(i.hasNext()    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    read++;    }    else    {    coll.put(i.next(),    coll);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
128	[BUG]  [BUGGY]  ||  coll.hasNext())  {  read++;  }  else  {  coll.add(i.next());  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  coll.hasNext())  {  read++;  }  else  {  coll.add(i.next());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||  coll.hasNext())  {  read++;  }  else  {  coll.add(i.next());  }	  ||    i.hasNext())    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
129	[BUG]  [BUGGY]  ||  i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.hasNext())  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||  i.hasNext())  {  read++;  }	  ||    i.hasNext())    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
130	[BUG]  [BUGGY]  ||!i.hasNext())  {  read++;  }  else  {  coll.add(i.next());  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||!i.hasNext())  {  read++;  }  else  {  coll.add(i.next());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||!i.hasNext())  {  read++;  }  else  {  coll.add(i.next());  }	  ||    i.hasNext())    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
131	[BUG]  [BUGGY]  ||  i.next())  {  read++;  }  else  {  coll.add(i.next());  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.next())  {  read++;  }  else  {  coll.add(i.next());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||  i.next())  {  read++;  }  else  {  coll.add(i.next());  }	  ||    i.hasNext())    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
132	[BUG]  [BUGGY]  ||  col.hasNext())  {  read++;  }  else  {  coll.add(i.next());  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  col.hasNext())  {  read++;  }  else  {  coll.add(i.next());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||  col.hasNext())  {  read++;  }  else  {  coll.add(i.next());  }	  ||    i.hasNext())    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
133	[BUG]  [BUGGY]  ||  i.hasNext())  {  read++;  }  else  {  coll.add(i.getValue());  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.hasNext())  {  read++;  }  else  {  coll.add(i.getValue());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||  i.hasNext())  {  read++;  }  else  {  coll.add(i.getValue());  }	  ||    i.hasNext())    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
134	[BUG]  [BUGGY]  ||(len  ==  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(len  ==  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(len  ==  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  return  coll.toString();  }	  ||(len    >    0    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
135	[BUG]  [BUGGY]  ||(len  >=  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(len  >=  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(len  >=  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  return  coll.toString();  }	  ||(len    >    0    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
136	[BUG]  [BUGGY]  ||(len!=  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(len!=  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(len!=  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  return  coll.toString();  }	  ||(len    >    0    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
137	[BUG]  [BUGGY]  ||(len  ==  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(len  ==  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(len  ==  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }	  ||(len    >    0    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
138	[BUG]  [BUGGY]  ||(len  ==  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(len  ==  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(len  ==  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;	  ||(len    >    0    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
139	[BUG]  [BUGGY]  ||(read  >  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(read  >  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	||(read  >  0  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  return  coll.toString();  }	  ||(len    >    0    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
140	[BUG]  [BUGGY]  if(i.hasNext())  {  while(i.hasNext())  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(i.hasNext())  {  read++;  }  else  {  coll.close();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext())  {  while(i.hasNext())  {  read++;  }  else  {  coll.close();  }	  while(i.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
141	[BUG]  [BUGGY]  while(i.hasNext()  <  len)  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(i.hasNext()  <  len)  {  read++;  }  else  {  coll.close();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(i.hasNext()  <  len)  {  read++;  }  else  {  coll.close();  }	  while(i.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
142	[BUG]  [BUGGY]  While(i.hasNext())  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  While(i.hasNext())  {  read++;  }  else  {  coll.close();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	While(i.hasNext())  {  read++;  }  else  {  coll.close();  }	  while(i.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
143	[BUG]  [BUGGY]  while(i.hasNext()  >  read)  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(i.hasNext()  >  read)  {  read++;  }  else  {  coll.close();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(i.hasNext()  >  read)  {  read++;  }  else  {  coll.close();  }	  while(i.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
144	[BUG]  [BUGGY]  while(i.hasNext()!=  read)  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(i.hasNext()!=  read)  {  read++;  }  else  {  coll.close();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(i.hasNext()!=  read)  {  read++;  }  else  {  coll.close();  }	  while(i.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
145	[BUG]  [BUGGY]  while(i.hasNext()  >  0)  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(i.hasNext()  >  0)  {  read++;  }  else  {  coll.close();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(i.hasNext()  >  0)  {  read++;  }  else  {  coll.close();  }	  while(i.hasNext())    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
146	[BUG]  [BUGGY]  coll.add(i.nextElement(),  read);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  coll.add(i.nextElement(),  read);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	coll.add(i.nextElement(),  read);	  coll.add(i.nextElement());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
147	[BUG]  [BUGGY]  coll.add(i.getValue());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  coll.add(i.getValue());  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	coll.add(i.getValue());	  coll.add(i.nextElement());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
148	[BUG]  [BUGGY]  coll.add(i.getKey());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  coll.add(i.getKey());  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	coll.add(i.getKey());	  coll.add(i.nextElement());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
149	[BUG]  [BUGGY]  coll.add(i.nextCharacterElement());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  coll.add(i.nextCharacterElement());  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	coll.add(i.nextCharacterElement());	  coll.add(i.nextElement());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
150	[BUG]  [BUGGY]  coll.add(i.getCurrentElement());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  coll.add(i.getCurrentElement());  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	coll.add(i.getCurrentElement());	  coll.add(i.nextElement());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
151	[BUG]  [BUGGY]  if(i.hasNext()  ==  read)  {  read++;  }  else  {  coll.add(i.next());  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ==  read)  {  read++;  }  else  {  coll.add(i.next());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()  ==  read)  {  read++;  }  else  {  coll.add(i.next());  }	  if(i.hasNext()    >    read)    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
152	[BUG]  [BUGGY]  if(i.hasNext()!=  read)  {  read++;  }  else  {  coll.add(i.next());  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()!=  read)  {  read++;  }  else  {  coll.add(i.next());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()!=  read)  {  read++;  }  else  {  coll.add(i.next());  }	  if(i.hasNext()    >    read)    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
153	[BUG]  [BUGGY]  if(i.hasNext()  >=  read)  {  read++;  }  else  {  coll.add(i.next());  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  >=  read)  {  read++;  }  else  {  coll.add(i.next());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()  >=  read)  {  read++;  }  else  {  coll.add(i.next());  }	  if(i.hasNext()    >    read)    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
154	[BUG]  [BUGGY]  if(i.hasNext()  <  len)  {  read++;  }  else  {  coll.add(i.next());  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  <  len)  {  read++;  }  else  {  coll.add(i.next());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()  <  len)  {  read++;  }  else  {  coll.add(i.next());  }	  if(i.hasNext()    >    read)    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
155	[BUG]  [BUGGY]  if(i.hasNext()  >  read)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  >  read)  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasNext()  >  read)  {  read++;  }	  if(i.hasNext()    >    read)    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
156	[BUG]  [BUGGY]  coll.add(i.next());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  coll.add(i.next());  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	coll.add(i.next());	  if(i.hasNext()    >    read)    {    read++;    }    else    {    coll.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
157	[BUG]  [BUGGY]  if(i.hasMoreElements()  &&  coll.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  &&  coll.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	if(i.hasMoreElements()  &&  coll.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }	  if(i.hasMoreElements()    ||    coll.hasMoreElements())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
158	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  coll.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(i.hasMoreElements()  &&  coll.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(i.hasMoreElements()  &&  coll.hasMoreElements())  {  read++;  }	  while(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
159	[BUG]  [BUGGY]  while(i.hasMoreElements()  ||  coll.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(i.hasMoreElements()  ||  coll.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(i.hasMoreElements()  ||  coll.hasMoreElements())  {  read++;  }	  while(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
160	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  coll.size()  >  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(i.hasMoreElements()  &&  coll.size()  >  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(i.hasMoreElements()  &&  coll.size()  >  0)  {  read++;  }	  while(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
161	[BUG]  [BUGGY]  while(!i.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(!i.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(!i.hasMoreElements())  {  read++;  }	  while(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
162	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  coll.isEmpty())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(i.hasMoreElements()  &&  coll.isEmpty())  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	while(i.hasMoreElements()  &&  coll.isEmpty())  {  read++;  }	  while(i.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
163	[BUG]  [BUGGY]  Len  <  =  len  ||  SMALL_BUFFER_SIZE  >  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Len  <  =  len  ||  SMALL_BUFFER_SIZE  >  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	Len  <  =  len  ||  SMALL_BUFFER_SIZE  >  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }	  Len    <    =    0    ||    len    >    SMALL_BUFFER_SIZE)    {    for(int    read    =    0;    read    <    len;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
164	[BUG]  [BUGGY]  Len  <  SMALL_BUFFER_SIZE  ||  len  >  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Len  <  SMALL_BUFFER_SIZE  ||  len  >  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	Len  <  SMALL_BUFFER_SIZE  ||  len  >  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }	  Len    <    =    0    ||    len    >    SMALL_BUFFER_SIZE)    {    for(int    read    =    0;    read    <    len;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
165	[BUG]  [BUGGY]  Len  <  0  ||  len  >  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Len  <  0  ||  len  >  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	Len  <  0  ||  len  >  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }	  Len    <    =    0    ||    len    >    SMALL_BUFFER_SIZE)    {    for(int    read    =    0;    read    <    len;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
166	[BUG]  [BUGGY]  Len  <  =  0  ||  len  <  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Len  <  =  0  ||  len  <  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	Len  <  =  0  ||  len  <  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }	  Len    <    =    0    ||    len    >    SMALL_BUFFER_SIZE)    {    for(int    read    =    0;    read    <    len;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
167	[BUG]  [BUGGY]  Len  <  =  1  ||  len  >  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Len  <  =  1  ||  len  >  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	Len  <  =  1  ||  len  >  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }	  Len    <    =    0    ||    len    >    SMALL_BUFFER_SIZE)    {    for(int    read    =    0;    read    <    len;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
168	[BUG]  [BUGGY]  Len  <  =  0x7F  ||  len  >  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Len  <  =  0x7F  ||  len  >  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	Len  <  =  0x7F  ||  len  >  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }	  Len    <    =    0    ||    len    >    SMALL_BUFFER_SIZE)    {    for(int    read    =    0;    read    <    len;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
169	[BUG]  [BUGGY]  Len  <  =  0  ||  len  ==  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Len  <  =  0  ||  len  ==  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	Len  <  =  0  ||  len  ==  SMALL_BUFFER_SIZE)  {  for(int  read  =  0;  read  <  len;  read++)  {  return  coll.toString();  }	  Len    <    =    0    ||    len    >    SMALL_BUFFER_SIZE)    {    for(int    read    =    0;    read    <    len;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
170	[BUG]  [BUGGY]  i.setRead(len,  read);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setRead(len,  read);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.setRead(len,  read);	  i.setRead(len);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
171	[BUG]  [BUGGY]  i.setRead(len  +  read);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setRead(len  +  read);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.setRead(len  +  read);	  i.setRead(len);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
172	[BUG]  [BUGGY]  i.setRead(len  -  read);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setRead(len  -  read);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.setRead(len  -  read);	  i.setRead(len);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
173	[BUG]  [BUGGY]  i.setRead(remainderLen);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setRead(remainderLen);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.setRead(remainderLen);	  i.setRead(len);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
174	[BUG]  [BUGGY]  i.setRead(len,  coll);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.setRead(len,  coll);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	i.setRead(len,  coll);	  i.setRead(len);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
175	[BUG]  [BUGGY]  ReadByteArrayOutputStream  coll  =  IOUtils.readByteArrayOutputStream(i);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ReadByteArrayOutputStream  coll  =  IOUtils.readByteArrayOutputStream(i);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	ReadByteArrayOutputStream  coll  =  IOUtils.readByteArrayOutputStream(i);	  ReadByteArrayOutputStream    coll    =    coll.readByteArrayOutputStream(i);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
176	[BUG]  [BUGGY]  ReadByteArrayOutputStream  coll  =  i.readByteArrayOutputStream(ch);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ReadByteArrayOutputStream  coll  =  i.readByteArrayOutputStream(ch);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	ReadByteArrayOutputStream  coll  =  i.readByteArrayOutputStream(ch);	  ReadByteArrayOutputStream    coll    =    coll.readByteArrayOutputStream(i);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
177	[BUG]  [BUGGY]  ReadByteArrayOutputStream  coll  =  i.readByteArrayOutputStream(coll);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ReadByteArrayOutputStream  coll  =  i.readByteArrayOutputStream(coll);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	ReadByteArrayOutputStream  coll  =  i.readByteArrayOutputStream(coll);	  ReadByteArrayOutputStream    coll    =    coll.readByteArrayOutputStream(i);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
178	[BUG]  [BUGGY]  ReadByteArrayOutputStream  coll  =  i.readByteArrayOutputStream(len);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ReadByteArrayOutputStream  coll  =  i.readByteArrayOutputStream(len);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	ReadByteArrayOutputStream  coll  =  i.readByteArrayOutputStream(len);	  ReadByteArrayOutputStream    coll    =    coll.readByteArrayOutputStream(i);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
179	[BUG]  [BUGGY]  ReadByteArrayOutputStream  coll  =  IOUtils.readByteArrayOutputStream(i,  read);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ReadByteArrayOutputStream  coll  =  IOUtils.readByteArrayOutputStream(i,  read);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	ReadByteArrayOutputStream  coll  =  IOUtils.readByteArrayOutputStream(i,  read);	  ReadByteArrayOutputStream    coll    =    coll.readByteArrayOutputStream(i);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
180	[BUG]  [BUGGY]  ReadByteArrayOutputStream  coll  =  coll.readByteArrayOutputStream(i,  read);  [CE]  error  reading  /home/hye/repair/IteRepair/IteRepair/projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java;  /home/hye/repair/IteRepair/IteRepair/projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java  (No  such  file  or  directory)  [FE]                              NumberFormatException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ReadByteArrayOutputStream  coll  =  coll.readByteArrayOutputStream(i,  read);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	447	447	1	replace	ReadByteArrayOutputStream  coll  =  coll.readByteArrayOutputStream(i,  read);	  ReadByteArrayOutputStream    coll    =    coll.readByteArrayOutputStream(i);    	non-compiled	[CE]  error  reading  /home/hye/repair/IteRepair/IteRepair/projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java;  /home/hye/repair/IteRepair/IteRepair/projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java  (No  such  file  or  directory)	68	None	replace
