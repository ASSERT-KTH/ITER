projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();//GettheactualfileentryapplyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();}else{applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalArgumentException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers.size()>0){getNextEntry();//GettheactualfileentryapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryapplyPaxHeadersToCurrentEntry(headers);}else{paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryapplyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){applyPaxHeadersTo
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryapplyPaxHeadersToCurrentEntry(headers);}else{paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
