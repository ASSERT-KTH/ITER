bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  applyPaxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
2	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
3	[BUG]  [BUGGY]  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	nextEntry();  applyPaxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
4	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  }  else  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers  ==  null)  {  getNextEntry();  }  else  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  }  else  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    }    else    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
6	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  }	  if(headers!=    null)    {    getNextEntry();    }    else    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
7	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers  ==  null)  {  getNextEntry();  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  }	  if(headers!=    null)    {    getNextEntry();    }    else    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]  getNextEntry();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  getNextEntry();  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();	  if(headers!=    null)    {    getNextEntry();    }    else    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
9	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  else  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  else  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  }  else  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }	  if(headers!=    null)    {    getNextEntry();    }    else    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
12	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  getNextEntry();  applyPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  Entry  <  String,  String>  currEntry  =  getNextEntry();  applyPaxHeadersToCurrentEntry(currEntry);  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  currEntry  =  getNextEntry();  applyPaxHeadersToCurrentEntry(currEntry);	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
13	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
14	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
15	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers.size()  >  0)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers.size()  >  0)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
16	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
17	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
18	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
19	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
20	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
21	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
22	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
23	[BUG]  [BUGGY]  int  numRecords  =  headers.size();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  int  numRecords  =  headers.size();  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	int  numRecords  =  headers.size();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
25	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName()))  {  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName()))  {	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
26	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue()))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue()))  {  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue()))  {	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
27	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey()))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey()))  {  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey()))  {	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
28	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName()))  {  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName()))  {	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
29	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers.size()  >  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers.size()  >  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
30	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
31	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
32	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
33	[BUG]  [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
35	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
36	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers[i]);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  applyPaxHeadersToCurrentEntry(headers[i]);  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers[i]);	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
37	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].toString());  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].toString());  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].toString());  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
38	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers);  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers);	  applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
39	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.length);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.length);  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers.length);	  applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
40	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true);  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true);	  applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
41	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false);  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false);	  applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
42	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  encoding);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  encoding);  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  encoding);	  applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
43	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this);  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this);	  applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
44	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
45	[BUG]  [BUGGY]  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
46	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
47	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
48	[BUG]  [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    i);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
49	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    i);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    i);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
51	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  i);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  i);  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  i);	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    i);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
52	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    i);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
53	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
54	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
55	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
56	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
57	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
58	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
59	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
60	[BUG]  [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
61	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
63	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
64	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  hasHitEOF);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  hasHitEOF);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
65	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  >=  null;  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  >=  null;  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  >=  null;  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
66	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  ==  null;  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  ==  null;  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  ==  null;  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
67	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  >>  null;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  >>  null;  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  >>  null;  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
68	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
69	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
70	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
71	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers  ==  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
72	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
73	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  paxHeaders.put(entry.getKey(),  entry.getValue());  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
74	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
75	[BUG]  [BUGGY]  InputStream  is  =  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  InputStream  is  =  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	InputStream  is  =  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
76	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  this.headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  this.headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  this.headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
77	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersFromCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersFromCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersFromCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
78	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
79	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
80	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
81	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  headers.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  headers.put(encoding,  headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  headers.put(encoding,  headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
82	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  }	  if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
83	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
84	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
85	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
86	[BUG]  [BUGGY]  null  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  null  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	null  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
87	[BUG]  [BUGGY]  null  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  null  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	null  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
88	[BUG]  [BUGGY]  null  <  headers.length)  {  getNextEntry();  }  else  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  null  <  headers.length)  {  getNextEntry();  }  else  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	null  <  headers.length)  {  getNextEntry();  }  else  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    }    else    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
89	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  else  {  appendPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  else  {  appendPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  }  else  {  appendPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    }    else    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
90	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
91	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  enter  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  enter  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  enter  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
92	[BUG]  [BUGGY]  null  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  null  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	null  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
93	[BUG]  [BUGGY]  null  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  null  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	null  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
94	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  }	  if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
95	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
96	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
97	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
98	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  currEntry;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  currEntry;  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  currEntry;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
99	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
100	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  currEntry  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  currEntry  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  currEntry	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
101	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME)  {  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME)  {	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
102	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/.* "))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/.* "))  {  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/.* "))  {	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
103	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  return  currEntry.  [CE]  illegal  start  of  type  [FE]                                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  return  currEntry.  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  return  currEntry.	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
104	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
105	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersFromCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersFromCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersFromCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
106	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers,  headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
107	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].getName());  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].getName());  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].getName());  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
108	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  headers[i]);  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  headers[i]);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  headers[i]);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
109	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
110	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }	  if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
111	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
112	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getKey());  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getKey());  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getKey());  }	  if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
113	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(encoding,  headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  paxHeaders.put(encoding,  headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
114	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  header  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  header  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(String  header  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
115	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
116	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
117	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())&&  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())&&  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())&&	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
118	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName())  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName())  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName())	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
119	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName()  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName()  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName()	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
120	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName()))  {  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName()))  {	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
121	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue())&&  [CE]  illegal  start  of  type  [FE]                                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue())&&  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue())&&	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
122	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  currEntry.get  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  currEntry.get  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  currEntry.get	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
123	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  this);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  this);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  this);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
124	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
125	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  true);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  true);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  true);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
126	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
127	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
128	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
129	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
130	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
131	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
132	[BUG]  [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet().iterator().next();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet().iterator().next();  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  entry  =  headers.entrySet().iterator().next();	  if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
133	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
134	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
135	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }	  if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
136	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);    [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [BUGGY]    applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValue());  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
