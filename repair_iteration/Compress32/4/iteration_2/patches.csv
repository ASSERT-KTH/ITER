bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  else  {  headers  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  else  {  headers  =  new  HashMap  <  String,  String>();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  }  else  {  headers  =  new  HashMap  <  String,  String>();  }	  getNextEntry();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  getNextEntry().paxHeaders();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry().paxHeaders();  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry().paxHeaders();	  getNextEntry();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
3	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  else  {  headers.putAll(headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  else  {  headers.putAll(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  }  else  {  headers.putAll(headers);  }	  getNextEntry();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
4	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  getNextEntry();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
5	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  else  {  skipPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  else  {  skipPaxHeaders();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  }  else  {  skipPaxHeaders();  }	  getNextEntry();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
6	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName())  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName())  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
7	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.get  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.get  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.get	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName()))  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName()))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
9	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
10	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
11	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
12	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.get  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.get  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.get	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey())&&    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
13	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())&  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())&  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())&	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey())&&    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
14	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey())&&    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
15	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())&  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())&  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())&	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey())&&    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
16	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.get  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.get  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.get	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey())&&    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
17	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey())&&    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
18	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
19	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getKey());  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getKey());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getKey());  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
20	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.size()  >  0)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null  ||  headers.size()  >  0)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  ||  headers.size()  >  0)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
21	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
22	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
23	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
24	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
25	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
26	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
27	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
28	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
29	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.get  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.get  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.get	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey()))  {  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey()))  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey()))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
31	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
32	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
33	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey()))  {  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey()))  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey()))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
34	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(paxHeaders);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(paxHeaders);  }	  if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
35	[BUG]  [BUGGY]  Entry  <  String,  String>  headers  =  parsePaxHeaders(this);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  headers  =  parsePaxHeaders(this);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  headers  =  parsePaxHeaders(this);	  if(headers    ==    null)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
36	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator().next();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator().next();  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator().next();	  if(headers    ==    null)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
37	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.getValue();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.getValue();  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  currEntry  =  headers.getValue();	  if(headers    ==    null)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
38	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  enter  enter  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  enter  enter  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  enter  enter  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    enter    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
39	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  enter  enter  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  enter  enter  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  enter  enter  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    enter    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
40	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  enter  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  enter  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  enter  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    enter    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
41	[BUG]  [BUGGY]  null  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  null  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	null  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);	  null    <    headers.length)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
42	[BUG]  [BUGGY]  if(headers!=  null)  {  null  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  null  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  null  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  null    <    headers.length)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
43	[BUG]  [BUGGY]  n  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  n  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	n  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  null    <    headers.length)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
44	[BUG]  [BUGGY]  n  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  n  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	n  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);	  null    <    headers.length)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
45	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(!hasHitEOF)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(!hasHitEOF)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(!hasHitEOF)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
46	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  1)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  1)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  1)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
47	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
48	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
49	[BUG]  [BUGGY]  for(Map.Entry  <  Object,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  Object,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  Object,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
50	[BUG]  [BUGGY]  Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
51	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers  ==  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers  ==  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers  ==  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValue());  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    paxHeaders.put(entry.getKey(),    entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
52	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(paxHeaders!=  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(paxHeaders!=  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(paxHeaders!=  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValue());  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    paxHeaders.put(entry.getKey(),    entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
53	[BUG]  [BUGGY]  For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValue());  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    paxHeaders.put(entry.getKey(),    entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
54	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValue());  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    paxHeaders.put(entry.getKey(),    entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
55	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValue());  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    paxHeaders.put(entry.getKey(),    entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
56	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(paxHeaders);  }  else  {  paxHeaders.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(paxHeaders);  }  else  {  paxHeaders.put(encoding,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(paxHeaders);  }  else  {  paxHeaders.put(encoding,  headers);  }	  if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
57	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers.length);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers.length);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false,  headers.length);	  applyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
58	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  true);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  true);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	appendPaxHeadersToCurrentEntry(headers,  true);	  applyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
59	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers.size());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers.size());  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false,  headers.size());	  applyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
60	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false,  headers);	  applyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
61	[BUG]  [BUGGY]  getCurrentEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getCurrentEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getCurrentEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
62	[BUG]  [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  hasHitEOF);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  hasHitEOF);  }	  getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
63	[BUG]  [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  this);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  this);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  this);  }	  getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
64	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.get  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.get  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.get	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName())    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName())  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName())  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName())    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
66	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName())    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
67	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName())  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName())  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName())    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
68	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName())    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
69	[BUG]  [BUGGY]  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    getNextEntry();    *    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
70	[BUG]  [BUGGY]  ||  headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  ||  headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	||  headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    *    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
71	[BUG]  [BUGGY]  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	*  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    getNextEntry();    *    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
72	[BUG]  [BUGGY]  n  =  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  n  =  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	n  =  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    getNextEntry();    *    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
73	[BUG]  [BUGGY]  nextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  nextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	nextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    getNextEntry();    *    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
74	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  AND  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  AND  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  AND  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    *    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
75	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName())  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName())  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
76	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName()))  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName()))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
78	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName())  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName())  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
79	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName()))  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName()))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
80	[BUG]  [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  ==  null;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  ==  null;  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  ==  null;  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    ==    null;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
81	[BUG]  [BUGGY]  applyPaxHeadersTo  ==  null;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersTo  ==  null;  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersTo  ==  null;	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    ==    null;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
82	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  ==  null;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  ==  null;  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  ==  null;  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    ==    null;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  ==  null;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  ==  null;  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  ==  null;  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    ==    null;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
84	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue())&  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue())&  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue())&	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getValue())&&    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
85	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValu  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValu  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValu	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getValue())&&    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
86	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue())  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue())  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getValue())&&    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
87	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue())&  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue())&  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue())&	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getValue())&&    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
88	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getValue())&&    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
89	[BUG]  [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.length;    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
90	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.length;    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
91	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.length;    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
92	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].toString());  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].toString());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].toString());  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.length;    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
93	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ");  }	  if(headers.size()    >    0)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
94	[BUG]  [BUGGY]  For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ");  }	  if(headers.size()    >    0)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
95	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ");  }	  if(headers.size()    >    0)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
96	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ".getMessage());  }	  if(headers.size()    >    0)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
97	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ".equals(entry.getKey()));  }  [CE]  illegal  start  of  type  [FE]                                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ".equals(entry.getKey()));  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ".equals(entry.getKey()));  }	  if(headers.size()    >    0)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
98	[BUG]  [BUGGY]  getNextEntry();  for(String  header  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  for(String  header  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  for(String  header  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    for(String    header    :    headers.keySet())    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
99	[BUG]  [BUGGY]  for(String  header  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(String  header  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(String  header  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    for(String    header    :    headers.keySet())    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
100	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(String  header  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(String  header  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  for(String  header  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    for(String    header    :    headers.keySet())    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
101	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet();  getNextEntry();  for(String  header  :  currEntry.keySet())  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet();  getNextEntry();  for(String  header  :  currEntry.keySet())  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet();  getNextEntry();  for(String  header  :  currEntry.keySet())  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    for(String    header    :    headers.keySet())    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
102	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  header  :  headers.values())  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  header  :  headers.values())  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(String  header  :  headers.values())  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    for(String    header    :    headers.keySet())    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
103	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    headers    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
104	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  this.headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  this.headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  headers  :  this.headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    headers    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
105	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    headers    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
106	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  headers  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    headers    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
107	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  currEntry.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  currEntry.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  headers  :  currEntry.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    headers    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
108	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue())  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue())  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
109	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValu  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValu  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValu	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
110	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue()))  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue()))  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue()))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
111	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
112	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    header    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
113	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  header  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    header    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
114	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    header    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
115	[BUG]  [BUGGY]  For(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  For(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	For(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    header    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
116	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  header  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    header    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
117	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  }	  for(Map.Entry    <    String,    String>    header    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
118	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  headers);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this,  headers);	  applyPaxHeadersToCurrentEntry(headers,    this);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
119	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  null);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  null);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  null);	  applyPaxHeadersToCurrentEntry(headers,    this);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
120	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  headers.length);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  headers.length);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this,  headers.length);	  applyPaxHeadersToCurrentEntry(headers,    this);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
121	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
122	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
123	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
124	[BUG]  [BUGGY]  For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
125	[BUG]  [BUGGY]  Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
126	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(curr  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(curr  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(curr	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
128	[BUG]  [BUGGY]  for(String  entry  :  headers.keySet())  {  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(String  entry  :  headers.keySet())  {  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(String  entry  :  headers.keySet())  {  paxHeaders.put(entry.getKey(),  entry.getValue());  }	  if(headers!=    null)    {    getNextEntry();    for(String    entry    :    headers.keySet())    {    paxHeaders.put(entry.getKey(),    entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
129	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  paxHeaders.put(entry.getKey(),  entry.getValue());  }	  if(headers!=    null)    {    getNextEntry();    for(String    entry    :    headers.keySet())    {    paxHeaders.put(entry.getKey(),    entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
130	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.values())  {  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.values())  {  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.values())  {  paxHeaders.put(entry.getKey(),  entry.getValue());  }	  if(headers!=    null)    {    getNextEntry();    for(String    entry    :    headers.keySet())    {    paxHeaders.put(entry.getKey(),    entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
131	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.entrySet())  {  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.entrySet())  {  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.entrySet())  {  paxHeaders.put(entry.getKey(),  entry.getValue());  }	  if(headers!=    null)    {    getNextEntry();    for(String    entry    :    headers.keySet())    {    paxHeaders.put(entry.getKey(),    entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
132	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  PaxHeaders.put(entry.getKey(),  entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  PaxHeaders.put(entry.getKey(),  entry.getValue());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  PaxHeaders.put(entry.getKey(),  entry.getValue());  }	  if(headers!=    null)    {    getNextEntry();    for(String    entry    :    headers.keySet())    {    paxHeaders.put(entry.getKey(),    entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
133	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.getKeySet())  {  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.getKeySet())  {  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.getKeySet())  {  paxHeaders.put(entry.getKey(),  entry.getValue());  }	  if(headers!=    null)    {    getNextEntry();    for(String    entry    :    headers.keySet())    {    paxHeaders.put(entry.getKey(),    entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
134	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
135	[BUG]  [BUGGY]  getNextEntry();  paxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  paxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  paxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
136	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  getNextEntry();  paxHeadersToCurrentEntry(entry);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  getNextEntry();  paxHeadersToCurrentEntry(entry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  getNextEntry();  paxHeadersToCurrentEntry(entry);  }	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
137	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  getNextEntry();  paxHeadersToCurrentEntry(entry.getKey());  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  getNextEntry();  paxHeadersToCurrentEntry(entry.getKey());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  getNextEntry();  paxHeadersToCurrentEntry(entry.getKey());  }	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
138	[BUG]  [BUGGY]  nextEntry();  paxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  nextEntry();  paxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	nextEntry();  paxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
139	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  getNextEntry();  paxHeadersToCurrentEntry(entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  getNextEntry();  paxHeadersToCurrentEntry(entry.getValue());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  getNextEntry();  paxHeadersToCurrentEntry(entry.getValue());  }	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
140	[BUG]  [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].getName());  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].getName());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].getName());  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i].getName());    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
141	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].getName());  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].getName());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].getName());  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i].getName());    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
142	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].getName());  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].getName());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].getName());  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i].getName());    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
143	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers[i].getName());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers[i].getName());  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers[i].getName());	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i].getName());    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
144	[BUG]  [BUGGY]  if(headers  ==  null)  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
145	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  getNextEntry();  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
146	[BUG]  [BUGGY]  if(headers  ==  null)  {  if(headers.size()  >  0)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  if(headers.size()  >  0)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  if(headers.size()  >  0)  {  getNextEntry();  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
147	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  i++)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  i++)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  i++)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
148	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  headers.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  headers.put(encoding,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  headers.put(encoding,  headers);  }	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
149	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  getNextEntry();  paxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  currEntry  =  getNextEntry();  paxHeadersToCurrentEntry(currEntry);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  currEntry  =  getNextEntry();  paxHeadersToCurrentEntry(currEntry);	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
150	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  headers  =  parsePaxHeaders(this);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  headers  =  parsePaxHeaders(this);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  headers  =  parsePaxHeaders(this);  }	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
151	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  System.arraycopy(headers,  0,  headers,  0,  headers.length);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  System.arraycopy(headers,  0,  headers,  0,  headers.length);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  System.arraycopy(headers,  0,  headers,  0,  headers.length);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
152	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
153	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  System.arraycopy(headers,  0,  headers,  0,  headers.length);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  System.arraycopy(headers,  0,  headers,  0,  headers.length);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  System.arraycopy(headers,  0,  headers,  0,  headers.length);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
154	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
155	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
156	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  System.arraycopy(headers,  0,  headers,  1,  headers.length);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  System.arraycopy(headers,  0,  headers,  1,  headers.length);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  System.arraycopy(headers,  0,  headers,  1,  headers.length);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
157	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
158	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  i++)  {  paxHeaders.put(encoding,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  i++)  {  paxHeaders.put(encoding,  headers[i]);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  i++)  {  paxHeaders.put(encoding,  headers[i]);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
159	[BUG]  [BUGGY]  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();	  if(headers    ==    null)    {    getNextEntry();    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
160	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }	  if(headers    ==    null)    {    getNextEntry();    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
161	[BUG]  [BUGGY]  paxHeaders  =  new  HashMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  paxHeaders  =  new  HashMap  <  String,  String>();  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	paxHeaders  =  new  HashMap  <  String,  String>();	  if(headers    ==    null)    {    getNextEntry();    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
162	[BUG]  [BUGGY]  nextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  nextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	nextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();	  if(headers    ==    null)    {    getNextEntry();    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
163	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(this);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(this);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(this);	  if(headers    ==    null)    {    getNextEntry();    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
164	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
165	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  headers);	  applyPaxHeadersToCurrentEntry(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
166	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(encoding,  headers);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(encoding,  headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(encoding,  headers);	  applyPaxHeadersToCurrentEntry(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
167	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  ZipEncoding.UTF8);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  ZipEncoding.UTF8);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  ZipEncoding.UTF8);	  applyPaxHeadersToCurrentEntry(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
168	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(record,  headers);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(record,  headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(record,  headers);	  applyPaxHeadersToCurrentEntry(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
169	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cache);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cache);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  cache);	  applyPaxHeadersToCurrentEntry(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
170	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  <  1)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  if(headers.size()  <  1)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  <  1)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
171	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  >  0  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
172	[BUG]  [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
173	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
174	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
175	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
176	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
177	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
178	[BUG]  [BUGGY]  For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
179	[BUG]  [BUGGY]  for(Map.Entry  <  Object,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  Object,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  Object,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
180	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
181	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  hasHitEOF);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  hasHitEOF);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
182	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  hasHitEOF);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  hasHitEOF);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
183	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  this);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  this);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  this);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
184	[BUG]  [BUGGY]  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    getNextEntry();    *    get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
185	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    *    get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
186	[BUG]  [BUGGY]  n  =  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  n  =  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	n  =  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    getNextEntry();    *    get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
187	[BUG]  [BUGGY]  nextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  nextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	nextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    getNextEntry();    *    get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
188	[BUG]  [BUGGY]  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	*  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    getNextEntry();    *    get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
189	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  AND  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  AND  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  AND  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    *    get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
190	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
191	[BUG]  [BUGGY]  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
192	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersFromCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersFromCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  applyPaxHeadersFromCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
193	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  }  else  {  appendPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  }  else  {  appendPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  }  else  {  appendPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    }    else    {    appendPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
194	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  appendPaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	appendPaxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    getNextEntry();    }    else    {    appendPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
195	[BUG]  [BUGGY]  AppendPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  AppendPaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	AppendPaxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    getNextEntry();    }    else    {    appendPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
196	[BUG]  [BUGGY]  ApplyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  ApplyPaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	ApplyPaxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
197	[BUG]  [BUGGY]  applicationPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applicationPaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applicationPaxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
198	[BUG]  [BUGGY]  allowPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  allowPaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	allowPaxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
199	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.size()  <  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null  ||  headers.size()  <  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  ||  headers.size()  <  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
200	[BUG]  [BUGGY]  if(headers  ==  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
201	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.size()  ==  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null  ||  headers.size()  ==  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  ||  headers.size()  ==  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
202	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
203	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1);  }	  for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    i);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
204	[BUG]  [BUGGY]  int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }	  for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    i);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
205	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  For(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	For(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }	  for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    i);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
206	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1,  headers.length);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1,  headers.length);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1,  headers.length);  }	  for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    i);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
207	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  0,  headers.length);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  0,  headers.length);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  0,  headers.length);  }	  for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    i);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
208	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.size()  <  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null  ||  headers.size()  <  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  ||  headers.size()  <  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
209	[BUG]  [BUGGY]  if(headers  ==  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
210	[BUG]  [BUGGY]  entry!=  null)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  entry!=  null)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	entry!=  null)  {  getNextEntry();  }	  if(headers!=    null)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
211	[BUG]  [BUGGY]  headers!=  null)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  headers!=  null)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	headers!=  null)  {  getNextEntry();  }	  if(headers!=    null)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
212	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  this);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  this);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  this);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    this);    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
213	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  this);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  this);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  this);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    this);    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
214	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  entry  entry  entry  entry  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  entry  entry  entry  entry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  entry  entry  entry  entry	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
215	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    headers    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
216	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers.size()  >  1)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers.size()  >  1)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers.size()  >  1)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    headers    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
217	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(!hasHitEOF)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(!hasHitEOF)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(!hasHitEOF)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    headers    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
218	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.keySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.keySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  headers  :  headers.keySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    headers    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
219	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  this.headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  this.headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  headers  :  this.headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    headers    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
220	[BUG]  [BUGGY]  for(Map.Entry  <  Object,  String>  headers  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  Object,  String>  headers  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  Object,  String>  headers  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    headers    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
221	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
222	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
223	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
224	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersTo  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersTo  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersTo	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
225	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
226	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(head  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(head  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(head	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
227	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
228	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
229	[BUG]  [BUGGY]  if(headers!=  null)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  nextEntry();    applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
230	[BUG]  [BUGGY]  if(headers!=  null)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  nextEntry();    applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
231	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers.size()  >  0)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers.size()  >  0)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  nextEntry();    applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
232	[BUG]  [BUGGY]  if(headers!=  null)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  nextEntry();    applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
233	[BUG]  [BUGGY]  if(headers!=  null)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  hasHitEOF  =  true;  }	  nextEntry();    applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
234	[BUG]  [BUGGY]  for(Map.Entry  <  Object,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  Object,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  Object,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
235	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ".getMessage());  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ".getMessage());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ".getMessage());  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
236	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
237	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
238	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.size()  ==  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null  ||  headers.size()  ==  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  ||  headers.size()  ==  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
239	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()!=  null)  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()!=  null)  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
240	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
241	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(0);  if(currEntry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(0);  if(currEntry.getValue()  ==  null)  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(0);  if(currEntry.getValue()  ==  null)  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
242	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  currEntry  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  currEntry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  currEntry	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.hasChildren())    {    continue    currEntry    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
243	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  currEntry  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  currEntry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  currEntry	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.hasChildren())    {    continue    currEntry    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
244	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  currEnt  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  currEnt  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  currEnt	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.hasChildren())    {    continue    currEntry    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
245	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  cur  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  cur  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  cur	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.hasChildren())    {    continue    currEntry    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
246	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  curr  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  curr  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  curr	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.hasChildren())    {    continue    currEntry    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
247	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  currEnt  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  currEnt  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  currEnt	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.hasChildren())    {    continue    currEntry    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
248	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  file);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  file);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  file);	  applyPaxHeadersToCurrentEntry(headers,    i);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
249	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  record);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  record);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  record);	  applyPaxHeadersToCurrentEntry(headers,    i);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
250	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  0);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  0);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  0);	  applyPaxHeadersToCurrentEntry(headers,    i);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
251	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(!hasHitEOF)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(!hasHitEOF)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(!hasHitEOF)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
252	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  1)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  1)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  1)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
253	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
254	[BUG]  [BUGGY]  for(Map.Entry  <  Object,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  Object,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  Object,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
255	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(currentEntry.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(currentEntry);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(currentEntry.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(currentEntry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(currentEntry.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(currentEntry);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
256	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers,  headers);  }  else  {  headers.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers,  headers);  }  else  {  headers.put(encoding,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers,  headers);  }  else  {  headers.put(encoding,  headers);  }	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    else    {    headers.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
257	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  getNextEntry();  paxHeadersToCurrentEntry(currEntry.getKey(),  currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  currEntry  =  getNextEntry();  paxHeadersToCurrentEntry(currEntry.getKey(),  currEntry.getValue());  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  currEntry  =  getNextEntry();  paxHeadersToCurrentEntry(currEntry.getKey(),  currEntry.getValue());	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    else    {    headers.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
258	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(paxHeaders);  }  else  {  paxHeaders.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(paxHeaders);  }  else  {  paxHeaders.put(encoding,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(paxHeaders);  }  else  {  paxHeaders.put(encoding,  headers);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
259	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(paxHeaders);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(paxHeaders);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(paxHeaders);	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
260	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  parsePaxHeaders(this);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  parsePaxHeaders(this);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  parsePaxHeaders(this);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
261	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
262	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
263	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  headers  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  headers  =  new  HashMap  <  String,  String>();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  headers  =  new  HashMap  <  String,  String>();  }	  getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
264	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
265	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersFromCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersFromCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersFromCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersFromCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
266	[BUG]  [BUGGY]  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersFromCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersFromCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersFromCurrentEntry(headers);	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersFromCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
267	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersFromCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersFromCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersFromCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersFromCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
268	[BUG]  [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo!=  null;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo!=  null;  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo!=  null;  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    >=    null;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
269	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo!=  null;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo!=  null;  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo!=  null;  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    >=    null;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
270	[BUG]  [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  >=  null;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  >=  null;  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  >=  null;  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    >=    null;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
271	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo!=  null;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo!=  null;  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo!=  null;  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    >>    null;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
272	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers[i]);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers[i]);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers[i]);	  applyPaxHeadersToCurrentEntry(headers[i]);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
273	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers[i],  headers);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers[i],  headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers[i],  headers);	  applyPaxHeadersToCurrentEntry(headers[i]);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
274	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers[0]);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers[0]);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers[0]);	  applyPaxHeadersToCurrentEntry(headers[i]);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
275	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers[i],  headers.length);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers[i],  headers.length);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers[i],  headers.length);	  applyPaxHeadersToCurrentEntry(headers[i]);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
276	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers[0],  headers);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers[0],  headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers[0],  headers);	  applyPaxHeadersToCurrentEntry(headers[i]);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
277	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers[0],  headers[i]);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers[0],  headers[i]);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers[0],  headers[i]);	  applyPaxHeadersToCurrentEntry(headers[i]);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
278	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers  ==  null)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers  ==  null)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers  ==  null)  {  getNextEntry();  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
279	[BUG]  [BUGGY]  For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
280	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
281	[BUG]  [BUGGY]  Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
282	[BUG]  [BUGGY]  for(Map.Entry  <  Object,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  Object,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  Object,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
283	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
284	[BUG]  [BUGGY]  Entry  <  String,  String>  entry  =  headers.keySet().iterator().next();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  entry  =  headers.keySet().iterator().next();  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  entry  =  headers.keySet().iterator().next();	  Entry    <    String,    String>    entry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
285	[BUG]  [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet().iterator();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet().iterator();  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  entry  =  headers.entrySet().iterator();	  Entry    <    String,    String>    entry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
286	[BUG]  [BUGGY]  Entry  <  String,  String>  entry  =  headers.get(encoding).iterator().next();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  entry  =  headers.get(encoding).iterator().next();  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  entry  =  headers.get(encoding).iterator().next();	  Entry    <    String,    String>    entry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
287	[BUG]  [BUGGY]  Entry  <  String,  String>  entry  =  headers.values().iterator().next();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  entry  =  headers.values().iterator().next();  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  entry  =  headers.values().iterator().next();	  Entry    <    String,    String>    entry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
288	[BUG]  [BUGGY]  getCurrentEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getCurrentEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getCurrentEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }	  getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    i);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
289	[BUG]  [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1);  }	  getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    i);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
290	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  hasHitEOF);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  hasHitEOF);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
291	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  hasHitEOF);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  hasHitEOF);	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
292	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  }  else  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  }  else  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  }  else  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }	  if(headers!=    null)    {    getNextEntry();    }    else    {    applyPaxHeadersToCurrentEntry(headers,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
293	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }	  if(headers!=    null)    {    getNextEntry();    }    else    {    applyPaxHeadersToCurrentEntry(headers,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
294	[BUG]  [BUGGY]  if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
295	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  >>  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  >>  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  >>  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
296	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  [Delete]  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  [Delete]  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  [Delete]  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
297	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  ==  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  ==  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  ==  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
298	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
299	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
300	[BUG]  [BUGGY]  final  Entry  <  String,  String>  currEntry  =  getNextEntry();  applyPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  final  Entry  <  String,  String>  currEntry  =  getNextEntry();  applyPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	final  Entry  <  String,  String>  currEntry  =  getNextEntry();  applyPaxHeadersToCurrentEntry(currEntry);	  Entry    <    String,    String>    currEntry    =    getNextEntry();    applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
301	[BUG]  [BUGGY]  if(headers!=  null)  {  Entry  <  String,  String>  currEntry  =  getNextEntry();  applyPaxHeadersToCurrentEntry(currEntry);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  Entry  <  String,  String>  currEntry  =  getNextEntry();  applyPaxHeadersToCurrentEntry(currEntry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  Entry  <  String,  String>  currEntry  =  getNextEntry();  applyPaxHeadersToCurrentEntry(currEntry);  }	  Entry    <    String,    String>    currEntry    =    getNextEntry();    applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
302	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  getCurrentEntry();  applyPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  currEntry  =  getCurrentEntry();  applyPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  currEntry  =  getCurrentEntry();  applyPaxHeadersToCurrentEntry(currEntry);	  Entry    <    String,    String>    currEntry    =    getNextEntry();    applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
303	[BUG]  [BUGGY]  entry  <  String,  String>  currEntry  =  getNextEntry();  applyPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  entry  <  String,  String>  currEntry  =  getNextEntry();  applyPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	entry  <  String,  String>  currEntry  =  getNextEntry();  applyPaxHeadersToCurrentEntry(currEntry);	  Entry    <    String,    String>    currEntry    =    getNextEntry();    applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
304	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  getNextEntry().getValue();  applyPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  currEntry  =  getNextEntry().getValue();  applyPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  currEntry  =  getNextEntry().getValue();  applyPaxHeadersToCurrentEntry(currEntry);	  Entry    <    String,    String>    currEntry    =    getNextEntry();    applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
305	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  false);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  false);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	appendPaxHeadersToCurrentEntry(headers,  false);	  applyPaxHeadersToCurrentEntry(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
306	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  hasHitEOF);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
307	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  false);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  false);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  false);	  applyPaxHeadersToCurrentEntry(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
308	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  headers.length);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  headers.length);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  headers.length);	  applyPaxHeadersToCurrentEntry(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
309	[BUG]  [BUGGY]  getCurrentEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getCurrentEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getCurrentEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }	  getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
310	[BUG]  [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  hasHitEOF);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  hasHitEOF);  }	  getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
311	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  hasHitEOF);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  hasHitEOF);  }	  for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
312	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  this);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  this);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  this);  }	  for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
313	[BUG]  [BUGGY]  int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }	  for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
314	[BUG]  [BUGGY]  InputStream  is  =  getCurrentEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  InputStream  is  =  getCurrentEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	InputStream  is  =  getCurrentEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  InputStream    is    =    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
315	[BUG]  [BUGGY]  InputStream  is  =  getReadNow();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  InputStream  is  =  getReadNow();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	InputStream  is  =  getReadNow();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  InputStream    is    =    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
316	[BUG]  [BUGGY]  InputStream  is  =  getRecordSize();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  InputStream  is  =  getRecordSize();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	InputStream  is  =  getRecordSize();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  InputStream    is    =    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
317	[BUG]  [BUGGY]  InputStream  is  =  getInputStream();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  InputStream  is  =  getInputStream();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	InputStream  is  =  getInputStream();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  InputStream    is    =    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
318	[BUG]  [BUGGY]  InputStream  is  =  getPaxHeaders();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  InputStream  is  =  getPaxHeaders();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	InputStream  is  =  getPaxHeaders();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  InputStream    is    =    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
319	[BUG]  [BUGGY]  InputStream  is  =  getImplicitRecordEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  InputStream  is  =  getImplicitRecordEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	InputStream  is  =  getImplicitRecordEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  InputStream    is    =    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
320	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  i  +  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  i  +  1);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  i  +  1);	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
321	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
322	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1,  headers.length);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1,  headers.length);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1,  headers.length);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
323	[BUG]  [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1,  headers.length);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1,  headers.length);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1,  headers.length);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
324	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.length  -  1);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.length  -  1);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers.length  -  1);	  applyPaxHeadersToCurrentEntry(headers,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
325	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.length  +  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.length  +  1);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers.length  +  1);	  applyPaxHeadersToCurrentEntry(headers,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
326	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.length,  headers.length);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.length,  headers.length);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers.length,  headers.length);	  applyPaxHeadersToCurrentEntry(headers,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
327	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.length  -  2);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.length  -  2);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers.length  -  2);	  applyPaxHeadersToCurrentEntry(headers,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
328	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.length  -  1,  headers.length);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.length  -  1,  headers.length);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers.length  -  1,  headers.length);	  applyPaxHeadersToCurrentEntry(headers,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
329	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  encoding.length);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  encoding.length);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  encoding.length);	  applyPaxHeadersToCurrentEntry(headers,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
330	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  paxHeaders.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  paxHeaders.put(encoding,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  paxHeaders.put(encoding,  headers);  }	  if(headers!=    null)    {    getNextEntry();    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
331	[BUG]  [BUGGY]  getNextEntry();  paxHeaders.put(encoding,  headers);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  paxHeaders.put(encoding,  headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  paxHeaders.put(encoding,  headers);	  if(headers!=    null)    {    getNextEntry();    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
332	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  getNextEntry();  paxHeaders.put(encoding,  currEntry);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  currEntry  =  getNextEntry();  paxHeaders.put(encoding,  currEntry);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  currEntry  =  getNextEntry();  paxHeaders.put(encoding,  currEntry);	  if(headers!=    null)    {    getNextEntry();    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
333	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(ENCODING,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(ENCODING,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  paxHeaders.put(ENCODING,  headers);  }	  if(headers!=    null)    {    getNextEntry();    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
334	[BUG]  [BUGGY]  paxHeaders.put(encoding,  headers);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  paxHeaders.put(encoding,  headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	paxHeaders.put(encoding,  headers);	  if(headers!=    null)    {    getNextEntry();    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
335	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(encoding,  this);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(encoding,  this);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  paxHeaders.put(encoding,  this);  }	  if(headers!=    null)    {    getNextEntry();    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
336	[BUG]  [BUGGY]  if(headers  ==  null)  {  if(headers.size()  >  0)  {  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  if(headers.size()  >  0)  {  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  if(headers.size()  >  0)  {  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    appendPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
337	[BUG]  [BUGGY]  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  appendPaxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    appendPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
338	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  <  1)  {  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  if(headers.size()  <  1)  {  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  <  1)  {  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    appendPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
339	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  1)  {  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  1)  {  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  >  1)  {  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    appendPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
340	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0  ||  headers.size()  >  0)  {  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0  ||  headers.size()  >  0)  {  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  >  0  ||  headers.size()  >  0)  {  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    appendPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
341	[BUG]  [BUGGY]  null  <  headers.length)  {  getNextEntry();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  null  <  headers.length)  {  getNextEntry();  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	null  <  headers.length)  {  getNextEntry();	  null    <    headers.length)    {    getNextEntry();    }    else    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
342	[BUG]  [BUGGY]  if(headers!=  null)  {  null  <  headers.length)  {  getNextEntry();  }  else  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  null  <  headers.length)  {  getNextEntry();  }  else  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  null  <  headers.length)  {  getNextEntry();  }  else  {  applyPaxHeadersToCurrentEntry(headers);  }	  null    <    headers.length)    {    getNextEntry();    }    else    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
343	[BUG]  [BUGGY]  null  <  headers.length)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  null  <  headers.length)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	null  <  headers.length)  {  getNextEntry();  }	  null    <    headers.length)    {    getNextEntry();    }    else    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
344	[BUG]  [BUGGY]  if(headers!=  null)  {  null  <  headers.length)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  null  <  headers.length)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  null  <  headers.length)  {  getNextEntry();  }	  null    <    headers.length)    {    getNextEntry();    }    else    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
345	[BUG]  [BUGGY]  null  <  headers.length)  {  getNextEntry();  }  else  if(headers.size()  >  0)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  null  <  headers.length)  {  getNextEntry();  }  else  if(headers.size()  >  0)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	null  <  headers.length)  {  getNextEntry();  }  else  if(headers.size()  >  0)  {  applyPaxHeadersToCurrentEntry(headers);  }	  null    <    headers.length)    {    getNextEntry();    }    else    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
346	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  return  currEntry.  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  return  currEntry.  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  return  currEntry.	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.hasChildren())    {    return    currEntry.    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
347	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  return  currEntry.  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  return  currEntry.  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  return  currEntry.	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.hasChildren())    {    return    currEntry.    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
348	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  return  currEntry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  return  currEntry	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.hasChildren())    {    return    currEntry.    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
349	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  return  curr  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  return  curr  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  return  curr	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.hasChildren())    {    return    currEntry.    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
350	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  return  currEnt  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  return  currEnt  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  return  currEnt	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.hasChildren())    {    return    currEntry.    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
351	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  return  cur  [CE]  illegal  start  of  type  [FE]                                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  return  cur  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  return  cur	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.hasChildren())    {    return    currEntry.    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
352	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getKey());  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getKey());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getKey());  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(entry.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
353	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getKey());  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getKey());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getKey());  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(entry.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
354	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getKey());  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getKey());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getKey());  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(entry.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
355	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getValue());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getValue());  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(entry.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
356	[BUG]  [BUGGY]  For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getKey());  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getKey());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getKey());  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(entry.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
357	[BUG]  [BUGGY]  for(Map.Entry  <  Object,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getKey());  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  Object,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getKey());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  Object,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getKey());  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(entry.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
358	[BUG]  [BUGGY]  aplicePaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  aplicePaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	aplicePaxHeadersToCurrentEntry(headers);	  if(headers.size()    >    0)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
359	[BUG]  [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].toString());  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].toString());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].toString());  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i].toString());    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
360	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].toString());  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].toString());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].toString());  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i].toString());    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
361	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].toString());  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].toString());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].toString());  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i].toString());    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
362	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers[i].toString());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers[i].toString());  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers[i].toString());	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i].toString());    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
363	[BUG]  [BUGGY]  null  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  null  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	null  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);	  null    <    headers.size())    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
364	[BUG]  [BUGGY]  null  <  headers.size()  -  1)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  null  <  headers.size()  -  1)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	null  <  headers.size()  -  1)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  null    <    headers.size())    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
365	[BUG]  [BUGGY]  n  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  n  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	n  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  null    <    headers.size())    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
366	[BUG]  [BUGGY]  n  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  n  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	n  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);	  null    <    headers.size())    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
367	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName()))  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName()))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
368	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
369	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(curr  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(curr  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(curr	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
370	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
371	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
372	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
373	[BUG]  [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  headers[i]);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  headers[i]);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  headers[i]);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i],    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
374	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  headers[i]);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  headers[i]);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i],    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
375	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  headers[i]);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  headers[i]);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i],    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
376	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers[i],  headers[i]);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers[i],  headers[i]);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers[i],  headers[i]);	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i],    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
377	[BUG]  [BUGGY]  getNextEntry();  applyPaxHeadersToCurrentEntry(headers,  headers);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  applyPaxHeadersToCurrentEntry(headers,  headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  applyPaxHeadersToCurrentEntry(headers,  headers);	  getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
378	[BUG]  [BUGGY]  getCurrentEntry();  applyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getCurrentEntry();  applyPaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getCurrentEntry();  applyPaxHeadersToCurrentEntry(headers);	  getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
379	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  currEntry;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  currEntry;  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  currEntry;  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.hasChildren())    {    continue    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
380	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  currEntry;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  currEntry;  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.hasChildren())  {  continue  currEntry;  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.hasChildren())    {    continue    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
381	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(0);  if(currEntry.hasChildren())  {  continue  currEntry;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(0);  if(currEntry.hasChildren())  {  continue  currEntry;  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(0);  if(currEntry.hasChildren())  {  continue  currEntry;  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.hasChildren())    {    continue    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
382	[BUG]  [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersFromCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersFromCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersFromCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersFromCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
383	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersFromCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersFromCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersFromCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersFromCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
384	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersFromCurrentEntry(headers);	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersFromCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
385	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>();  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>();	  if(headers!=    null)    {    getNextEntry();    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
386	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
387	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
388	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
389	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers,  headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
390	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers,  headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
391	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers,  headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
392	[BUG]  [BUGGY]  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers,  headers);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers,  headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers,  headers);	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
393	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers,  this);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers,  this);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers,  this);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
394	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers  ==  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers  ==  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers  ==  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
395	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(paxHeaders!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(paxHeaders!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(paxHeaders!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
396	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
397	[BUG]  [BUGGY]  For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
398	[BUG]  [BUGGY]  Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
399	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(paxHeaders  ==  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(paxHeaders  ==  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(paxHeaders  ==  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
400	[BUG]  [BUGGY]  if(headers!=  null)  {  null  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  null  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  null  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  null    <    headers.size())    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
401	[BUG]  [BUGGY]  null  <  headers.size()  -  1)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  null  <  headers.size()  -  1)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	null  <  headers.size()  -  1)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);	  null    <    headers.size())    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
402	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  currEntry.  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  currEntry.  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  currEntry.	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getValue()    ==    null)    {    return    currEntry.get    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
403	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  currEntry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  currEntry	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getValue()    ==    null)    {    return    currEntry.get    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
404	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  currEntry.get  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  currEntry.get  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  currEntry.get	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getValue()    ==    null)    {    return    currEntry.get    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
405	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  curr  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  curr  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  curr	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getValue()    ==    null)    {    return    currEntry.get    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
406	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  cur  [CE]  illegal  start  of  type  [FE]                                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  cur  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  cur	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getValue()    ==    null)    {    return    currEntry.get    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
407	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  currEntry.  [CE]  illegal  start  of  type  [FE]                                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  currEntry.  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  currEntry.	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getValue()    ==    null)    {    return    currEntry.get    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
408	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/.* ")  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/.* ")  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/.* ")	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   "/.*   "))    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
409	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".* "))  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".* "))  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".* "))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   "/.*   "))    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
410	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   "/.*   "))    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
411	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/.*  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/.*  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/.*	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   "/.*   "))    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
412	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/.* "))  {  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/.* "))  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/.* "))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   "/.*   "))    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
413	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".* ")  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".* ")  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".* ")	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   "/.*   "))    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
414	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(paxHeaders);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(paxHeaders);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(paxHeaders);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
415	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.putAll(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.putAll(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.putAll(headers);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
416	[BUG]  [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  this.headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  this.headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  for(int  i  =  0;  i  <  this.headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    this.headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
417	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  this.headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  this.headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  this.headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    this.headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
418	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName()  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName()  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName()	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName()    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
419	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName()  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName()  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName()	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName()    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
420	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  hasHitEOF);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
421	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  true);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  true);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers,  true);	  applyPaxHeadersToCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
422	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  ==  0)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  if(headers.size()  ==  0)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  ==  0)  {  getNextEntry();  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
423	[BUG]  [BUGGY]  headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
424	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  <  1)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  if(headers.size()  <  1)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  <  1)  {  getNextEntry();  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
425	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  <  =  0)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  if(headers.size()  <  =  0)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  <  =  0)  {  getNextEntry();  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
426	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  1)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  1)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  >  1)  {  getNextEntry();  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
427	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME)  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME)  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
428	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME)  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME)  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
429	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
430	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(0);  if(currEntry.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(0);  if(currEntry.getType()  ==  Token.NAME)  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(0);  if(currEntry.getType()  ==  Token.NAME)  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
431	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME)  {  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME)  {  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME)  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
432	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.size()  ==  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null  ||  headers.size()  ==  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  ||  headers.size()  ==  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
433	[BUG]  [BUGGY]  int  numRecords  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  int  numRecords  =  headers.size()  -  1;  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	int  numRecords  =  headers.size()  -  1;	  int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
434	[BUG]  [BUGGY]  int  numRecords  =  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  int  numRecords  =  headers.size()  +  1;  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	int  numRecords  =  headers.size()  +  1;	  int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
435	[BUG]  [BUGGY]  int  numRecords  =  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  int  numRecords  =  headers.size()  -  2;  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	int  numRecords  =  headers.size()  -  2;	  int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
436	[BUG]  [BUGGY]  int  numRecords  =  headers.size()  *  2;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  int  numRecords  =  headers.size()  *  2;  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	int  numRecords  =  headers.size()  *  2;	  int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
437	[BUG]  [BUGGY]  int  numRecords  =  headers.size()  +  headers.length;  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  int  numRecords  =  headers.size()  +  headers.length;  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	int  numRecords  =  headers.size()  +  headers.length;	  int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
438	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    true);    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
439	[BUG]  [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  true);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  true);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  true);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    true);    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
440	[BUG]  [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    true);    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
441	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  true);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  true);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  true);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    true);    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
442	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  true);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  true);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  true);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    true);    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
443	[BUG]  [BUGGY]  int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
444	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }	  for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
445	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  null);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  null);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  null);  }	  for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
446	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  appendPaxHeadersTo  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  appendPaxHeadersTo  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  appendPaxHeadersTo	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
447	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
448	[BUG]  [BUGGY]  if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
449	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  currEntry  =  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  currEntry  =  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(currEntry);  }	  if(headers    ==    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
450	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  currEntry  =  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  currEntry  =  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers    ==    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
451	[BUG]  [BUGGY]  InputStream  is  =  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  InputStream  is  =  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	InputStream  is  =  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }	  if(headers    ==    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    i);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
452	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  entry  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  entry  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  entry  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
453	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  entry  entry  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  entry  entry  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  entry  entry  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
454	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
455	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
456	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  startsWith( "/ "))  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  startsWith( "/ "))  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  startsWith( "/ "))  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers    ==    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
457	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  entry  startsWith( "/ "))  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  entry  startsWith( "/ "))  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  entry  startsWith( "/ "))  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers    ==    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
458	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers,  headers);  }	  if(headers    ==    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
459	[BUG]  [BUGGY]  int  numRecords  =  headers.size()  /  2;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  int  numRecords  =  headers.size()  /  2;  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	int  numRecords  =  headers.size()  /  2;	  int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
460	[BUG]  [BUGGY]  int  numRecords  =  headers.size()  -  4;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  int  numRecords  =  headers.size()  -  4;  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	int  numRecords  =  headers.size()  -  4;	  int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
461	[BUG]  [BUGGY]  if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
462	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersFromCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersFromCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersFromCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
463	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  headers  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    headers    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
464	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null  ||  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null  ||  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null  ||	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
465	[BUG]  [BUGGY]  if(headers!=  null)  {  int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
466	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getVal  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getVal  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getVal	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getValue())&&    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
467	[BUG]  [BUGGY]  Null  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Null  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Null  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  null    <    headers.length)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
468	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
469	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
470	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
471	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
472	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME  ||  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME  ||  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME  ||	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
473	[BUG]  [BUGGY]  InputStream  is  =  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersFromCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  InputStream  is  =  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersFromCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	InputStream  is  =  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersFromCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersFromCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
474	[BUG]  [BUGGY]  for(String  encoding  :  headers.keySet())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(String  encoding  :  headers.keySet())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(String  encoding  :  headers.keySet())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }	  for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    i);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
475	[BUG]  [BUGGY]  for(String  encoding  :  headers.values())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(String  encoding  :  headers.values())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(String  encoding  :  headers.values())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }	  for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    i);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
476	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  >=  null;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  >=  null;  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  >=  null;  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    >=    null;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
477	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  >=  null;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  >=  null;  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  >=  null;  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    >=    null;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
478	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  headers.putAll(headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  headers.putAll(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  headers.putAll(headers);  }	  getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
479	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.putAll(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.putAll(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.putAll(headers);  }	  if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
480	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.putAll(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.putAll(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.putAll(headers);  }	  if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
481	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersFromCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersFromCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  applyPaxHeadersFromCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }	  if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
482	[BUG]  [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet().iterator().first();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet().iterator().first();  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  entry  =  headers.entrySet().iterator().first();	  Entry    <    String,    String>    entry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
483	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
484	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
485	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  break;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  break;  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  break;  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
486	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  2);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  2);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  2);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
487	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  currEntry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  currEntry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  currEntry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
488	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  currEntry  :  headers.entrySet())  {  if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  currEntry  :  headers.entrySet())  {  if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  currEntry  :  headers.entrySet())  {  if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
489	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  currEntry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(currEntry);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  currEntry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(currEntry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  currEntry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(currEntry);  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
490	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  currEntry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  currEntry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  currEntry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
491	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  currEntry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  currEntry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  currEntry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
492	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  currEntry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  currEntry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  currEntry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
493	[BUG]  [BUGGY]  if(headers  ==  null)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  nextEntry();    applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
494	[BUG]  [BUGGY]  if(headers!=  null)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }	  nextEntry();    applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
495	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/.* "))  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/.* "))  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/.* "))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   "/.*   "))    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
496	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].toString()  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].toString()  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].toString()	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i].toString());    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
497	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]).toString();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]).toString();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]).toString();  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i].toString());    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
498	[BUG]  [BUGGY]  for(String  encoding  :  headers.keySet())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(encoding);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(String  encoding  :  headers.keySet())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(encoding);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(String  encoding  :  headers.keySet())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(encoding);  }	  for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
499	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  PaxHeadersToCurrentEntry(headers);  }  else  {  headers.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  PaxHeadersToCurrentEntry(headers);  }  else  {  headers.put(encoding,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  PaxHeadersToCurrentEntry(headers);  }  else  {  headers.put(encoding,  headers);  }	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    else    {    headers.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
500	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
501	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersFromCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersFromCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersFromCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
502	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers,  headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
503	[BUG]  [BUGGY]  PaxHeaders  =  new  HashMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  PaxHeaders  =  new  HashMap  <  String,  String>();  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	PaxHeaders  =  new  HashMap  <  String,  String>();	  if(headers    ==    null)    {    getNextEntry();    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
504	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeaders.putAll(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeaders.putAll(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  paxHeaders.putAll(headers);  }	  if(headers    ==    null)    {    getNextEntry();    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
505	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  else  {  AppendPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  else  {  AppendPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  }  else  {  AppendPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    }    else    {    appendPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
506	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  currEntry);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  currEntry);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  currEntry);	  applyPaxHeadersToCurrentEntry(headers,    this);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
507	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersFromCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersFromCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersFromCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
508	[BUG]  [BUGGY]  if(headers!=  null)  {  applyHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
509	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  hasHitEOF);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  hasHitEOF);  }	  getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
510	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
511	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(entry);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(entry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(entry);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
512	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(entry.getValue());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(entry.getValue());  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
513	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersFromCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersFromCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersFromCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersFromCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
514	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(paxHeaders);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(paxHeaders);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(paxHeaders);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }	  if(headers    ==    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
515	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  [Delete]  null;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  [Delete]  null;  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  [Delete]  null;  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    ==    null;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
516	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
517	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEnt  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEnt  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEnt	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
518	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  }  else  {  throw  new  IllegalStateException( " ");  }	  getNextEntry();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
519	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValu  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValu  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValu	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    paxHeaders.put(entry.getKey(),    entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
520	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValue());  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    paxHeaders.put(entry.getKey(),    entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
521	[BUG]  [BUGGY]  if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
522	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
523	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  enter  enter  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  enter  enter  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  enter  enter  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    enter    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
524	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  enter  enter  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  enter  enter  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  enter  enter  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    enter    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
525	[BUG]  [BUGGY]  null  <  headers.length)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  null  <  headers.length)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	null  <  headers.length)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    *    get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
526	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  get  the  current  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  get  the  current  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  *  get  the  current  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    *    get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
527	[BUG]  [BUGGY]  headers  ==  null  ||  headers.size()  ==  0)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  headers  ==  null  ||  headers.size()  ==  0)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	headers  ==  null  ||  headers.size()  ==  0)  {  getNextEntry();  }	  if(headers    ==    null)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
528	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String,  String>)headers).put(this,  headers);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  ((  TarArchiveEntry  <  String,  String>)headers).put(this,  headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	((  TarArchiveEntry  <  String,  String>)headers).put(this,  headers);	  if(headers    ==    null)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
529	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String,  String>)headers).clear();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  ((  TarArchiveEntry  <  String,  String>)headers).clear();  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	((  TarArchiveEntry  <  String,  String>)headers).clear();	  if(headers    ==    null)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
530	[BUG]  [BUGGY]  null  <  headers.length)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  null  <  headers.length)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	null  <  headers.length)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
531	[BUG]  [BUGGY]  null  <  headers.size())  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  null  <  headers.size())  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	null  <  headers.size())  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
532	[BUG]  [BUGGY]  paxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  paxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	paxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
533	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  buffer);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  buffer);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  buffer);	  applyPaxHeadersToCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
534	[BUG]  [BUGGY]  InputStream  is  =  getNextEntry();  for(String  header  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  InputStream  is  =  getNextEntry();  for(String  header  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	InputStream  is  =  getNextEntry();  for(String  header  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    for(String    header    :    headers.keySet())    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
535	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  header  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  header  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(String  header  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }	  if(headers!=    null)    {    getNextEntry();    for(String    header    :    headers.keySet())    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
536	[BUG]  [BUGGY]  if(!hasHitEOF)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(!hasHitEOF)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(!hasHitEOF)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }	  if(headers    ==    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
537	[BUG]  [BUGGY]  if(!hasHitEOF)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(!hasHitEOF)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(!hasHitEOF)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers    ==    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
538	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
539	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
540	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  enter  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  enter  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  enter	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
541	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.length  -  4);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.length  -  4);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers.length  -  4);	  applyPaxHeadersToCurrentEntry(headers,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
542	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    *    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
543	[BUG]  [BUGGY]  null  <  headers.length)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  null  <  headers.length)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	null  <  headers.length)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    *    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
544	[BUG]  [BUGGY]  InputStream  is  =  getNextEntry();  paxHeaders.put(encoding,  headers);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  InputStream  is  =  getNextEntry();  paxHeaders.put(encoding,  headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	InputStream  is  =  getNextEntry();  paxHeaders.put(encoding,  headers);	  if(headers!=    null)    {    getNextEntry();    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
545	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  PaxHeaders.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  PaxHeaders.put(encoding,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  PaxHeaders.put(encoding,  headers);  }	  if(headers!=    null)    {    getNextEntry();    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
546	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
547	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersFromCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersFromCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersFromCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
548	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
549	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
550	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
551	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
552	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName())  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName())  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
553	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName()  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName()  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry.getName()	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
554	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  <  =  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  if(headers.size()  <  =  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  <  =  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
555	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!headers.isEmpty())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  if(!headers.isEmpty())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(!headers.isEmpty())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
556	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  <  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  if(headers.size()  <  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  <  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
557	[BUG]  [BUGGY]  if(headers  ==  null)  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
558	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
559	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  return;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  return;  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  return;  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
560	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  appendPaxHeadersTo  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  appendPaxHeadersTo  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  appendPaxHeadersTo	  if(headers    ==    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
561	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeader  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeader  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeader	  if(headers    ==    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
562	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHea  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHea  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHea	  if(headers    ==    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
563	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())&&  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())&&  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())&&  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey())&&    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
564	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
565	[BUG]  [BUGGY]  Null  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Null  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Null  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  null    <    headers.size())    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
566	[BUG]  [BUGGY]  InputStream  is  =  getNextEntry();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  InputStream  is  =  getNextEntry();  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	InputStream  is  =  getNextEntry();	  InputStream    is    =    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
567	[BUG]  [BUGGY]  InputStream  is  =  getCurrentEntry();  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  InputStream  is  =  getCurrentEntry();  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	InputStream  is  =  getCurrentEntry();  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  InputStream    is    =    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
568	[BUG]  [BUGGY]  InputStream  is  =  getPaddedInputStream();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  InputStream  is  =  getPaddedInputStream();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	InputStream  is  =  getPaddedInputStream();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  InputStream    is    =    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
569	[BUG]  [BUGGY]  InputStream  is  =  getPaxInputStream();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  InputStream  is  =  getPaxInputStream();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	InputStream  is  =  getPaxInputStream();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  InputStream    is    =    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
570	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  getNextEntry();  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  currEntry  =  getNextEntry();  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  currEntry  =  getNextEntry();  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i]);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.length;    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
571	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  headers[i]);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  headers[i]);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.length;    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
572	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  getNextEntry();  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  currEntry  =  getNextEntry();  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(currEntry.getValue());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  currEntry  =  getNextEntry();  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(currEntry.getValue());  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.length;    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
573	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers,  headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
574	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers,  this);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers,  this);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers,  this);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
575	[BUG]  [BUGGY]  if(headers  ==  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
576	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  new  HashMap  <  String,  String>();  }	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
577	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size());  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers.size());	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
578	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
579	[BUG]  [BUGGY]  For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
580	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  else  {  applyPaxHeadersToCurrentEntry(headers.keySet(),  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  else  {  applyPaxHeadersToCurrentEntry(headers.keySet(),  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  }  else  {  applyPaxHeadersToCurrentEntry(headers.keySet(),  headers);  }	  if(headers!=    null)    {    getNextEntry();    }    else    {    applyPaxHeadersToCurrentEntry(headers,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
581	[BUG]  [BUGGY]  headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
582	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0  ||  headers.size()  >  0)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0  ||  headers.size()  >  0)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  >  0  ||  headers.size()  >  0)  {  getNextEntry();  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
583	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.keySet(),  false);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.keySet(),  false);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers.keySet(),  false);	  applyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
584	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size(),  false);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size(),  false);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers.size(),  false);	  applyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
585	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEntry	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
586	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEnt  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEnt  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().equals(currEnt	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
587	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  currEntry);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  currEntry  =  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  currEntry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  currEntry  =  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  currEntry);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
588	[BUG]  [BUGGY]  InputStream  is  =  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  InputStream  is  =  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	InputStream  is  =  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
589	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  this.headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  this.headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    this.headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
590	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].getName());  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].getName());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.length;  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].getName());  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i].getName());    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
591	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.keySet(),  true);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.keySet(),  true);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers.keySet(),  true);	  applyPaxHeadersToCurrentEntry(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
592	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size(),  true);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size(),  true);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers.size(),  true);	  applyPaxHeadersToCurrentEntry(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
593	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getKey());  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getKey());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry.getKey());  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(entry.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
594	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  currEnt  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  currEnt  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  currEnt	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getValue()    ==    null)    {    return    currEntry.get    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
595	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  currEntry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  return  currEntry	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getValue()    ==    null)    {    return    currEntry.get    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
596	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
597	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
598	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  headers[i]  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  headers[i]  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i],  headers[i]	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i],    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
599	[BUG]  [BUGGY]  null  <  headers.length)  {  getNumberEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  null  <  headers.length)  {  getNumberEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	null  <  headers.length)  {  getNumberEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  null    <    headers.length)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
600	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
601	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(entry,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(entry,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(entry,  headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
602	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(entry.getKey());  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(entry.getKey());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  applyPaxHeadersToCurrentEntry(entry.getKey());  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
603	[BUG]  [BUGGY]  if(headers!=  null)  {  int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
604	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
605	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
606	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  length);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  length);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  length);	  applyPaxHeadersToCurrentEntry(headers,    i);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
607	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  1);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  1);	  applyPaxHeadersToCurrentEntry(headers,    i);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
608	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersFromCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersFromCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  applyPaxHeadersFromCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers    ==    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
609	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ");  }	  if(headers.size()    >    0)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
610	[BUG]  [BUGGY]  int  headersSize()  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  int  headersSize()  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	int  headersSize()  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ");  }	  if(headers.size()    >    0)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
611	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ".);  }	  if(headers.size()    >    0)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
612	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  throw  new  IllegalArgumentException( " ");  }	  if(headers.size()    >    0)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
613	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  parsePaxHeaders(this);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  parsePaxHeaders(this);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders  =  parsePaxHeaders(this);  }	  if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
614	[BUG]  [BUGGY]  for(String  header  :  headers.keySet())  {  paxHeaders.put(entry.getKey(),  header.getValue());  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(String  header  :  headers.keySet())  {  paxHeaders.put(entry.getKey(),  header.getValue());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(String  header  :  headers.keySet())  {  paxHeaders.put(entry.getKey(),  header.getValue());  }	  if(headers!=    null)    {    getNextEntry();    for(String    entry    :    headers.keySet())    {    paxHeaders.put(entry.getKey(),    entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
615	[BUG]  [BUGGY]  for(String  header  :  headers.keySet())  {  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(String  header  :  headers.keySet())  {  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(String  header  :  headers.keySet())  {  paxHeaders.put(entry.getKey(),  entry.getValue());  }	  if(headers!=    null)    {    getNextEntry();    for(String    entry    :    headers.keySet())    {    paxHeaders.put(entry.getKey(),    entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
616	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
617	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  currEntry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersTo  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  currEntry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersTo  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  currEntry  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersTo	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
618	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
619	[BUG]  [BUGGY]  For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	For(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
620	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
621	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  encoding);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  encoding);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  encoding);  }	  for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
622	[BUG]  [BUGGY]  for(String  encoding  :  headers.keySet())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(encoded);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(String  encoding  :  headers.keySet())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(encoded);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(String  encoding  :  headers.keySet())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(encoded);  }	  for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
623	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  <  0)  {  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  if(headers.size()  <  0)  {  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  <  0)  {  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    appendPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
624	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!headers.isEmpty())  {  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  if(!headers.isEmpty())  {  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(!headers.isEmpty())  {  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    appendPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
625	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  <  =  0)  {  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  if(headers.size()  <  =  0)  {  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  if(headers.size()  <  =  0)  {  getNextEntry();  appendPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    appendPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
626	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  headers);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(zipEncoding,  headers);	  applyPaxHeadersToCurrentEntry(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
627	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  ZipEncoding.US_ASCII);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  ZipEncoding.US_ASCII);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  ZipEncoding.US_ASCII);	  applyPaxHeadersToCurrentEntry(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
628	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.values())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.values())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  headers  :  headers.values())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    headers    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
629	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    headers    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
630	[BUG]  [BUGGY]  For(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  For(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	For(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    headers    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
631	[BUG]  [BUGGY]  null  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  null  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	null  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
632	[BUG]  [BUGGY]  null  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  null  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	null  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
633	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  System.arraycopy(headers,  0,  headers,  0,  headers.length);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  System.arraycopy(headers,  0,  headers,  0,  headers.length);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  System.arraycopy(headers,  0,  headers,  0,  headers.length);  }	  getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
634	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
635	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
636	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers[0],  headers[1]);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers[0],  headers[1]);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers[0],  headers[1]);	  applyPaxHeadersToCurrentEntry(headers[i]);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
637	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers[i],  encoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers[i],  encoding);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers[i],  encoding);	  applyPaxHeadersToCurrentEntry(headers[i]);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
638	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
639	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
640	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(head  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(head  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(head	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
641	[BUG]  [BUGGY]  if(headers  ==  null)  {  Entry  <  String,  String>  currEntry  =  getNextEntry();  applyPaxHeadersToCurrentEntry(currEntry);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers  ==  null)  {  Entry  <  String,  String>  currEntry  =  getNextEntry();  applyPaxHeadersToCurrentEntry(currEntry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers  ==  null)  {  Entry  <  String,  String>  currEntry  =  getNextEntry();  applyPaxHeadersToCurrentEntry(currEntry);  }	  Entry    <    String,    String>    currEntry    =    getNextEntry();    applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
642	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.getNextEntry();  applyPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.getNextEntry();  applyPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  currEntry  =  headers.getNextEntry();  applyPaxHeadersToCurrentEntry(currEntry);	  Entry    <    String,    String>    currEntry    =    getNextEntry();    applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
643	[BUG]  [BUGGY]  headers!=  null  &&  headers.size()  ==  0)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  headers!=  null  &&  headers.size()  ==  0)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	headers!=  null  &&  headers.size()  ==  0)  {  getNextEntry();  }	  if(headers!=    null)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
644	[BUG]  [BUGGY]  appliesPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  appliesPaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	appliesPaxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
645	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers.keySet());  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers.keySet());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers.keySet());  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
646	[BUG]  [BUGGY]  if(headers!=  null)  {  null  headers.length  =  headers.length;  getNextEntry();  }  else  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  null  headers.length  =  headers.length;  getNextEntry();  }  else  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  null  headers.length  =  headers.length;  getNextEntry();  }  else  {  applyPaxHeadersToCurrentEntry(headers);  }	  null    <    headers.length)    {    getNextEntry();    }    else    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
647	[BUG]  [BUGGY]  if(headers!=  null)  {  null  headers.length  =  headers.length;  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  null  headers.length  =  headers.length;  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  null  headers.length  =  headers.length;  getNextEntry();  }	  null    <    headers.length)    {    getNextEntry();    }    else    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
648	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();//  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();//  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();//  and  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
649	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  The  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  The  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  The  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
650	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   "/.*   "))    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
651	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".* "))  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".* "))  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".* "))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   "/.*   "))    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
652	[BUG]  [BUGGY]  null  <  headers.size()  &&  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  null  <  headers.size()  &&  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	null  <  headers.size()  &&  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);	  null    <    headers.size())    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
653	[BUG]  [BUGGY]  null  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers,  true);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  null  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers,  true);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	null  <  headers.size())  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers,  true);  }	  null    <    headers.size())    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
654	[BUG]  [BUGGY]  if(headers.size()  <  =  0)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers.size()  <  =  0)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers.size()  <  =  0)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
655	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  getNextEntry();  *  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers.size()  >  0)  {  getNextEntry();  *  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers.size()  >  0)  {  getNextEntry();  *  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
656	[BUG]  [BUGGY]  if(headers!=  null)  {  for(String  entry  :  headers.keySet())  {  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(String  entry  :  headers.keySet())  {  paxHeaders.put(entry.getKey(),  entry.getValue());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(String  entry  :  headers.keySet())  {  paxHeaders.put(entry.getKey(),  entry.getValue());  }	  if(headers!=    null)    {    getNextEntry();    for(String    entry    :    headers.keySet())    {    paxHeaders.put(entry.getKey(),    entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
657	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  this.headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    this.headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
658	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
659	[BUG]  [BUGGY]  if(headers!=  null)  {  null  headers.length  =  headers.length;  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  null  headers.length  =  headers.length;  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  null  headers.length  =  headers.length;  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  null    <    headers.length)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
660	[BUG]  [BUGGY]  null  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers,  null);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  null  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers,  null);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	null  <  headers.length)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers,  null);  }	  null    <    headers.length)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
661	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  encoding);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  encoding);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers,  encoding);	  applyPaxHeadersToCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
662	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  false);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  false);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers,  false);	  applyPaxHeadersToCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
663	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  zipEncoding);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
664	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers,  headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
665	[BUG]  [BUGGY]  while(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  while(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	while(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
666	[BUG]  [BUGGY]  while(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  while(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	while(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
667	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
668	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  }	  if(headers!=    null)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
669	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  getNextEntry();  }	  if(headers!=    null)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
670	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.size()  ==  0)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null  ||  headers.size()  ==  0)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  ||  headers.size()  ==  0)  {  getNextEntry();  }	  if(headers!=    null)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
671	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
672	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
673	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
674	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
675	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
676	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersFromCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersFromCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersFromCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersFromCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
677	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersFromCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersFromCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersFromCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersFromCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
678	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
679	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }	  applyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
680	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }  else  {  headers.putAll(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }  else  {  headers.putAll(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }  else  {  headers.putAll(headers);  }	  applyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
681	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }  else  {  headers.put(encoding.getName(),  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }  else  {  headers.put(encoding.getName(),  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }  else  {  headers.put(encoding.getName(),  headers);  }	  applyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
682	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }  else  {  headers.put(encoding.toString(),  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }  else  {  headers.put(encoding.toString(),  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }  else  {  headers.put(encoding.toString(),  headers);  }	  applyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
683	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  false);  }  else  {  throw  new  IllegalStateException( " ");  }	  applyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
684	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getValue()  ==  null)  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
685	[BUG]  [BUGGY]  int  numRecords  =  headers.size()  >  headers.size();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  int  numRecords  =  headers.size()  >  headers.size();  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	int  numRecords  =  headers.size()  >  headers.size();	  int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
686	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.nextEntry();  applyPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.nextEntry();  applyPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  currEntry  =  headers.nextEntry();  applyPaxHeadersToCurrentEntry(currEntry);	  Entry    <    String,    String>    currEntry    =    getNextEntry();    applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
687	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.getNext();  applyPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.getNext();  applyPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  currEntry  =  headers.getNext();  applyPaxHeadersToCurrentEntry(currEntry);	  Entry    <    String,    String>    currEntry    =    getNextEntry();    applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
688	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.next();  applyPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.next();  applyPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  currEntry  =  headers.next();  applyPaxHeadersToCurrentEntry(currEntry);	  Entry    <    String,    String>    currEntry    =    getNextEntry();    applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
689	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
690	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
691	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
692	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
693	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers.size()  >  1)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers.size()  >  1)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers.size()  >  1)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    headers    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
694	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers.size()  >  0  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers.size()  >  0  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers.size()  >  0  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    headers    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
695	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  entry  entry  start  =  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  entry  entry  start  =  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  entry  entry  start  =  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
696	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
697	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
698	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  break;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  break;  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  break;  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
699	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
700	[BUG]  [BUGGY]  InputStream  is  =  getCurrentEntry();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  InputStream  is  =  getCurrentEntry();  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	InputStream  is  =  getCurrentEntry();	  InputStream    is    =    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
701	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  headers.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  headers.put(encoding,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  headers.put(encoding,  headers);  }	  getNextEntry();    //    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
702	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  }	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
703	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry	  if(headers!=    null)    {    if(headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
704	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  headers.putAll(headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  headers.putAll(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  headers.putAll(headers);  }	  getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
705	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
706	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1,  headers.getLength());  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1,  headers.getLength());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1,  headers.getLength());  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
707	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  hashitEOF);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  hashitEOF);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  hashitEOF);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
708	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  haveHitEOF);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  haveHitEOF);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  haveHitEOF);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
709	[BUG]  [BUGGY]  if(zipEncoding  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(zipEncoding  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(zipEncoding  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }	  if(headers    ==    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
710	[BUG]  [BUGGY]  if(zipEncoding  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(zipEncoding  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(zipEncoding  ==  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers    ==    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
711	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
712	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  ==  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  ==  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  ==  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
713	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  zipEncoding);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  zipEncoding);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  zipEncoding);  }	  for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
714	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValu  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValu  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(entry.getKey(),  entry.getValu	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    paxHeaders.put(entry.getKey(),    entry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
715	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersFromCurrentEntry(headers,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersFromCurrentEntry(headers,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersFromCurrentEntry(headers,  headers);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersFromCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
716	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers)  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers)  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers)  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }	  if(headers!=    null)    {    getNextEntry();    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
717	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }	  if(headers!=    null)    {    getNextEntry();    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
718	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
719	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
720	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
721	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
722	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
723	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
724	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
725	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  appendPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  appendPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  appendPaxHeadersToCurrentEntry(headers);  }	  if(headers    ==    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
726	[BUG]  [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet().iterator(),  is.next();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet().iterator(),  is.next();  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	Entry  <  String,  String>  entry  =  headers.entrySet().iterator(),  is.next();	  Entry    <    String,    String>    entry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
727	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(!hasHitEOF)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(!hasHitEOF)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(!hasHitEOF)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }	  if(headers    ==    null)    {    getNextEntry();    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
728	[BUG]  [BUGGY]  while(headers.size()  >  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  while(headers.size()  >  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	while(headers.size()  >  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ");  }	  if(headers.size()    >    0)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
729	[BUG]  [BUGGY]  int  headerSize  =  headers.size();  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  int  headerSize  =  headers.size();  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	int  headerSize  =  headers.size();  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ");  }	  if(headers.size()    >    0)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
730	[BUG]  [BUGGY]  while(headers.size()  >  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  while(headers.size()  >  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	while(headers.size()  >  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  throw  new  IllegalArgumentException( " ".);  }	  if(headers.size()    >    0)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
731	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
732	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
733	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
734	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  new  HashMap  <  String,  String>();  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers!=    null)    {    getNextEntry();    paxHeaders    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
735	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers    ==    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
736	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers,  headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers,  headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers,  headers);  }  else  {  paxHeaders.put(encoding,  headers);  }	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
737	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  PaxHeaders.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  PaxHeaders.put(encoding,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  PaxHeaders.put(encoding,  headers);  }	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
738	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    *    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
739	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    *    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
740	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  *  Get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    *    Get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
741	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  else  {  headers.put(encoding.getName(),  headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  else  {  headers.put(encoding.getName(),  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  }  else  {  headers.put(encoding.getName(),  headers);  }	  getNextEntry();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
742	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  else  {  headers.put(encoding.toString(),  headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  else  {  headers.put(encoding.toString(),  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  }  else  {  headers.put(encoding.toString(),  headers);  }	  getNextEntry();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
743	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  else  {  headers.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  }  else  {  headers.put(encoding,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  }  else  {  headers.put(encoding,  headers);  }	  getNextEntry();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
744	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
745	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  applyPaxHeadersToCurrentEntry(headers);  }  else  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
746	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
747	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(paxHeaders);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(paxHeaders);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
748	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers.toArray(new  ZipEncoding[headers.size()  ]));  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers.toArray(new  ZipEncoding[headers.size()  ]));  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers.toArray(new  ZipEncoding[headers.size()  ]));  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
749	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  zipEncoding);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  zipEncoding);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  zipEncoding);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
750	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].getKey());  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].getKey());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers[i].getKey());  }	  for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
751	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  headers.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(zipEncoding!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  headers.put(encoding,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(zipEncoding!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  headers.put(encoding,  headers);  }	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    else    {    headers.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
752	[BUG]  [BUGGY]  if(!hasHitEOF)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  headers.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(!hasHitEOF)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  headers.put(encoding,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(!hasHitEOF)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  else  {  headers.put(encoding,  headers);  }	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    else    {    headers.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
753	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(zipEncoding!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(zipEncoding!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    else    {    headers.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
754	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  header);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  header);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  header);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
755	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  appendPaxHeadersToCurrentEntry(headers,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  appendPaxHeadersToCurrentEntry(headers,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  appendPaxHeadersToCurrentEntry(headers,  headers);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
756	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  enter  enter  enter  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  enter  enter  enter  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  enter  enter  enter  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    enter    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
757	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  enter  enter  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  enter  enter  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  enter  enter  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    enter    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
758	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  enter  enter  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  enter  enter  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  enter  enter  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    enter    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
759	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME)  {  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME)  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
760	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getType()  ==  Token.NAME	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
761	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
762	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
763	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextPaxHeaders();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextPaxHeaders();  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
764	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
765	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  return;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  return;  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  return;  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
766	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    *    get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
767	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    *    get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
768	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(entry);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(entry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  *  get  the  actual  file  entry  entry  and  applyPaxHeadersToCurrentEntry(entry);  }	  if(headers!=    null)    {    getNextEntry();    *    get    the    actual    file    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
769	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1,  headers.size());  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1,  headers.size());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i  +  1,  headers.size());  }	  for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    i);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
770	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  if(headers    ==    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
771	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.size());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.size());  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers.size());	  applyPaxHeadersToCurrentEntry(headers,    i);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
772	[BUG]  [BUGGY]  if(headers!=  null)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }	  nextEntry();    applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
773	[BUG]  [BUGGY]  if(headers!=  null)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  RuntimeException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  nextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  throw  new  RuntimeException( " ");  }	  nextEntry();    applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
774	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  headers  :  headers.entrySet())  {  if(headers!=  null  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
775	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null  &&  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null    ||    headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
776	[BUG]  [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  >>  null;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  >>  null;  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo  >>  null;  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    >>    null;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
777	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo!=  null;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo!=  null;  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersTo!=  null;  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersTo    >>    null;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
778	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers.size()  >  0)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers.size()  >  0)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  applyPaxHeadersToCurrentEntry(headers,  i);  }	  getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    i);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
779	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  start  =  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  start  =  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  //  Get  the  actual  file  entry  entry  entry  entry  entry  entry  start  =  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
780	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  appendPaxHeadersToCurrentEntry(headers,  this);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  appendPaxHeadersToCurrentEntry(headers,  this);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(int  i  =  0;  i  <  headers.size();  ++i)  {  appendPaxHeadersToCurrentEntry(headers,  this);  }	  if(headers!=    null)    {    getNextEntry();    for(int    i    =    0;    i    <    headers.size();    ++i)    {    applyPaxHeadersToCurrentEntry(headers,    this);    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
781	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  headers.size());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  headers.size());  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  headers.size());	  applyPaxHeadersToCurrentEntry(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
782	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  headers);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  headers);	  applyPaxHeadersToCurrentEntry(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
783	[BUG]  [BUGGY]  for(ZipEncoding  header  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(encoding,  header);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(ZipEncoding  header  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(encoding,  header);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(ZipEncoding  header  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(encoding,  header);  }	  if(headers!=    null)    {    getNextEntry();    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
784	[BUG]  [BUGGY]  for(ZipEncoding  header  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(encoding,  header);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(ZipEncoding  header  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(encoding,  header);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(ZipEncoding  header  :  headers.keySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(encoding,  header);  }	  if(headers!=    null)    {    getNextEntry();    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
785	[BUG]  [BUGGY]  for(ZipEncoding  header  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(ZipEncoding  header  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(encoding,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(ZipEncoding  header  :  headers.values())  {  if(headers!=  null)  {  getNextEntry();  paxHeaders.put(encoding,  headers);  }	  if(headers!=    null)    {    getNextEntry();    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
786	[BUG]  [BUGGY]  while(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  while(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	while(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
787	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  headers);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(headers);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
788	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(entry);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(entry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(entry);  }	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
789	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
790	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(entry.getKey());  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(entry.getKey());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(entry.getKey());  }	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
791	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(entry.getKey()  +  entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(entry.getKey()  +  entry.getValue());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers!=  null)  {  getNextEntry();  paxHeadersToCurrentEntry(entry.getKey()  +  entry.getValue());  }	  if(headers!=    null)    {    getNextEntry();    paxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
792	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName())  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName())  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
793	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  encoding);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  encoding);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  encoding);  }	  applyPaxHeadersToCurrentEntry(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
794	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  encoding);  }  else  {  headers.put(encoding.getName(),  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  encoding);  }  else  {  headers.put(encoding.getName(),  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(headers,  encoding);  }  else  {  headers.put(encoding.getName(),  headers);  }	  applyPaxHeadersToCurrentEntry(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
795	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(zipEncoding!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(zipEncoding!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  else  {  paxHeaders.put(encoding,  headers);  }	  if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
796	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(zipEncoding!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(zipEncoding!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers);  }	  if(headers!=    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
797	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  parsePaxHeaders(this);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  paxHeaders  =  parsePaxHeaders(this);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  paxHeaders  =  parsePaxHeaders(this);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
798	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  paxHeaders.put(encoding,  entry);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  paxHeaders.put(encoding,  entry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  for(String  entry  :  headers.keySet())  {  paxHeaders.put(encoding,  entry);  }	  if(headers!=    null)    {    getNextEntry();    //    Get    the    actual    file    entry    entry    entry    and    applyPaxHeadersToCurrentEntry(headers);    }    else    {    paxHeaders.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
799	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  >  0  ||  headers.size()  >  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
800	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  ==  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  ==  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  if(headers.size()  ==  0)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(entry);  }	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    if(headers.size()    >    0)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(entry);    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
801	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.size);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.size);  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers.size);	  applyPaxHeadersToCurrentEntry(headers,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
802	[BUG]  [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers.size());  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers.size());  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	if(headers!=  null)  {  getNextEntry();  applyPaxHeadersToCurrentEntry(headers.size());  }	  if(headers    ==    null)    {    getNextEntry();    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
803	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  currEntry  :  headers)  {  if(headers!=  null)  {  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);      [BUGGY]  for(Map.Entry  <  String,  String>  currEntry  :  headers)  {  if(headers!=  null)  {  getNextEntry();  }  [BUGGY]      applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	430	431	1	replace	for(Map.Entry  <  String,  String>  currEntry  :  headers)  {  if(headers!=  null)  {  getNextEntry();  }	  if(headers    ==    null)    {    getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
