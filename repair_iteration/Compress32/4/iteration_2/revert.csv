projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();//GettheactualfileentryapplyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();}else{applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalArgumentException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers.size()>0){getNextEntry();//GettheactualfileentryapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryapplyPaxHeadersToCurrentEntry(headers);}else{paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryapplyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){applyPaxHeadersTo
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryapplyPaxHeadersToCurrentEntry(headers);}else{paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();applyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430nextEntry();applyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();}else{applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();}else{applyPaxHeadersToCurrentEntry(headers,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>currEntry=getNextEntry();applyPaxHeadersToCurrentEntry(currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null||headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers.size()>0){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null||headers.size()>0){getNextEntry();//GettheactualfileentryapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null||headers.size()>0){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430intnumRecords=headers.size();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers.size()>0){for(Map.Entry<String,String>entry:headers.entrySet()){thrownewIllegalArgumentException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}else{paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers[i]);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i].toString());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,this);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalArgumentException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,i);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i+1);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}else{paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){applyPaxHeadersTo
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){applyPaxHeadersTo
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){applyPaxHeadersTo
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,hasHitEOF);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersTo>=null;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersTo==null;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersTo>>null;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(Stringentry:headers.keySet()){paxHeaders.put(entry.getKey(),entry.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430InputStreamis=getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<this.headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersFromCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();paxHeadersToCurrentEntry(headers);}else{paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();paxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();paxHeadersToCurrentEntry(headers);}else{headers.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()>0){getNextEntry();appendPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryentryapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();//GettheactualfileentryentryentryapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//Gettheactualfileentryentryentry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.length){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.size()){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.length){getNextEntry();}else{applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();}else{appendPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryentryapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryenterapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.length){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalArgumentException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.size()){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalArgumentException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()>0){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()>0){getNextEntry();//GettheactualfileentryentryapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null||headers.size()>0){getNextEntry();//GettheactualfileentryentryapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()>0){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.hasChildren()){continuecurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getValue()==null){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.hasChildren()){continuecurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getType()==Token.NAME){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith("/.*")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.hasChildren()){returncurrEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();*GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersFromCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i].getName());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i],headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.length;++i){applyPaxHeadersToCurrentEntry(headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>header:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(entry.getKey());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(Stringheader:headers.keySet()){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>headers:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey())&&
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName()
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getValue())&&
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getValue()==null){returncurrEntry.get
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,this);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,true);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();//GettheactualfileentryentryentryapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();*gettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers.size()>0){getNextEntry();//GettheactualfileentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>entry=headers.entrySet().iterator().next();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>headers:headers.entrySet()){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();paxHeaders.put(entry.getKey(),entry.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();}else{headers=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry().paxHeaders();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();}else{headers.putAll(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();}else{thrownewIllegalArgumentException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();}else{skipPaxHeaders();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.get
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.get
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey())&
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey())&
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.get
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null||headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null||headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(entry.getKey());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null||headers.size()>0){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null||headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.get
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(paxHeaders);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>headers=parsePaxHeaders(this);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>currEntry=headers.entrySet().iterator().next();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>currEntry=headers.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryenterenterapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();//GettheactualfileentryentryenterenterapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryenterapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.length){getNextEntry();applyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){null<headers.length){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430n<headers.length){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430n<headers.length){getNextEntry();applyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(!hasHitEOF){getNextEntry();applyPaxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers.size()>1){getNextEntry();applyPaxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(Map.Entry<String,String>entry:headers.entrySet()){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.keySet()){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<Object,String>entry:headers.entrySet()){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>entry:headers.entrySet()){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers==null){getNextEntry();paxHeaders.put(entry.getKey(),entry.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(paxHeaders!=null){getNextEntry();paxHeaders.put(entry.getKey(),entry.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430For(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();paxHeaders.put(entry.getKey(),entry.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();paxHeaders.put(entry.getKey(),entry.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.keySet()){if(headers!=null){getNextEntry();paxHeaders.put(entry.getKey(),entry.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(paxHeaders);}else{paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,false,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430appendPaxHeadersToCurrentEntry(headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,false,headers.size());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,false,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getCurrentEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,hasHitEOF);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,this);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.get
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();*GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430||headers!=null){getNextEntry();*GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430*GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430n=getNextEntry();*GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430nextEntry();*GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();*GettheactualfileentryentryANDapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getName())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getName
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getName())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersTo==null;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersTo==null;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersTo==null;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersTo==null;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getValue())&
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getValu
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getValue())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getValue())&
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getValue
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(inti=0;i<headers.length;++i){applyPaxHeadersToCurrentEntry(headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();for(inti=0;i<headers.length;++i){applyPaxHeadersToCurrentEntry(headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.length;++i){applyPaxHeadersToCurrentEntry(headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.length;++i){applyPaxHeadersToCurrentEntry(headers[i].toString());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){thrownewIllegalArgumentException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430For(Map.Entry<String,String>entry:headers.entrySet()){thrownewIllegalArgumentException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(Map.Entry<String,String>entry:headers.entrySet()){thrownewIllegalArgumentException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){thrownewIllegalArgumentException("".getMessage());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){thrownewIllegalArgumentException("".equals(entry.getKey()));}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(Stringheader:headers.keySet()){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Stringheader:headers.keySet()){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();for(Stringheader:headers.keySet()){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>currEntry=headers.entrySet();getNextEntry();for(Stringheader:currEntry.keySet()){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(Stringheader:headers.values()){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>headers:headers.entrySet()){if(headers==null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>headers:this.headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(Map.Entry<String,String>headers:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>headers:headers.keySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>headers:currEntry.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getValue())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getValu
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getValue
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>header:headers.entrySet()){if(headers==null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>header:headers.keySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(Map.Entry<String,String>header:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430For(Map.Entry<String,String>header:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>header:headers.values()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(Map.Entry<String,String>header:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,this,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,null);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,this,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers==null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.keySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430For(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(curr
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Stringentry:headers.keySet()){paxHeaders.put(entry.getKey(),entry.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();for(Stringentry:headers.keySet()){paxHeaders.put(entry.getKey(),entry.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(Stringentry:headers.values()){paxHeaders.put(entry.getKey(),entry.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(Stringentry:headers.entrySet()){paxHeaders.put(entry.getKey(),entry.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(Stringentry:headers.keySet()){PaxHeaders.put(entry.getKey(),entry.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(Stringentry:headers.getKeySet()){paxHeaders.put(entry.getKey(),entry.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();paxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();paxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(Map.Entry<String,String>entry:headers.entrySet()){getNextEntry();paxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(Map.Entry<String,String>entry:headers.entrySet()){getNextEntry();paxHeadersToCurrentEntry(entry.getKey());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430nextEntry();paxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(Map.Entry<String,String>entry:headers.entrySet()){getNextEntry();paxHeadersToCurrentEntry(entry.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i].getName());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i].getName());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i].getName());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers[i].getName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()>0){getNextEntry();for(inti=0;i<headers.size();++i){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){if(headers.size()>0){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()>0){getNextEntry();for(inti=0;i<headers.size();i++){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();paxHeadersToCurrentEntry(headers);}else{headers.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>currEntry=getNextEntry();paxHeadersToCurrentEntry(currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();paxHeadersToCurrentEntry(headers);}else{headers=parsePaxHeaders(this);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();System.arraycopy(headers,0,headers,0,headers.length);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//Gettheactualfileentryentryentryentryentryentry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();System.arraycopy(headers,0,headers,0,headers.length);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//Gettheactualfileentryentryentryentryentry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();//Gettheactualfileentryentryentryentryentryentry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();System.arraycopy(headers,0,headers,1,headers.length);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();i++){paxHeaders.put(encoding,headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();paxHeaders=newHashMap<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(Map.Entry<String,String>entry:headers.entrySet()){getNextEntry();paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430paxHeaders=newHashMap<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430nextEntry();paxHeaders=newHashMap<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Map<String,String>headers=parsePaxHeaders(this);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(currEntry,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(encoding,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,ZipEncoding.UTF8);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(record,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,cache);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()<1){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()>0||headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers==null){getNextEntry();applyPaxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.keySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430For(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<Object,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.values()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,hasHitEOF);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,hasHitEOF);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,this);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();*gettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();*gettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430n=getNextEntry();*gettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430nextEntry();*gettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430*gettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();*gettheactualfileentryentryANDapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();//GettheactualfileentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();//GettheactualfileentryandapplyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersFromCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();}else{appendPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430appendPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430AppendPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430ApplyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applicationPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430allowPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null||headers.size()<0){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null||headers.size()>0){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null||headers.size()==0){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null||headers.size()>0){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i+1);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430For(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i+1,headers.length);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,0,headers.length);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null||headers.size()<0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null||headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430entry!=null){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430headers!=null){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,this);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,this);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//Gettheactualfileentryentryentryentryentryentryentryentryentryentry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>header:headers.entrySet()){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>headers:headers.entrySet()){if(headers.size()>1){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>headers:headers.entrySet()){if(!hasHitEOF){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>headers:headers.keySet()){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>headers:this.headers.entrySet()){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<Object,String>headers:headers.entrySet()){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersTo
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(head
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){nextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){nextEntry();applyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalArgumentException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers.size()>0){nextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){nextEntry();applyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){nextEntry();applyPaxHeadersToCurrentEntry(headers);}else{hasHitEOF=true;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<Object,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("".getMessage());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getValue()==null){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getValue()==null){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null||headers.size()==0){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getValue()==null){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getValue()!=null){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getValue()==null){}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(0);if(currEntry.getValue()==null){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.hasChildren()){continuecurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.hasChildren()){continuecurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.hasChildren()){continuecurrEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.hasChildren()){continuecur
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.hasChildren()){continuecurr
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.hasChildren()){continuecurrEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,file);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,record);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,0);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(!hasHitEOF){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers.size()>1){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(Map.Entry<String,String>entry:headers.entrySet()){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<Object,String>entry:headers.entrySet()){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(currentEntry.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(currentEntry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();paxHeadersToCurrentEntry(headers,headers);}else{headers.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>currEntry=getNextEntry();paxHeadersToCurrentEntry(currEntry.getKey(),currEntry.getValue());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(paxHeaders);}else{paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(paxHeaders);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}else{paxHeaders=parsePaxHeaders(this);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalArgumentException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{headers=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()>0){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersFromCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersFromCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();applyPaxHeadersFromCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersTo!=null;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersTo!=null;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersTo>=null;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersTo!=null;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,headers[i]);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers[i],headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers[0]);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers[i],headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers[0],headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers[0],headers[i]);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers==null){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430For(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.keySet()){if(headers!=null){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<Object,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();//GettheactualfileentryentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>entry=headers.keySet().iterator().next();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>entry=headers.entrySet().iterator();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>entry=headers.get(encoding).iterator().next();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>entry=headers.values().iterator().next();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getCurrentEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i+1);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,hasHitEOF);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();}else{applyPaxHeadersToCurrentEntry(headers,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){applyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){applyPaxHeadersTo
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersTo>>applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersTo[Delete]applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersTo==applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryandapplyPaxHeadersToCurrentEntry(headers);}else{paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430finalEntry<String,String>currEntry=getNextEntry();applyPaxHeadersToCurrentEntry(currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){Entry<String,String>currEntry=getNextEntry();applyPaxHeadersToCurrentEntry(currEntry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>currEntry=getCurrentEntry();applyPaxHeadersToCurrentEntry(currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430entry<String,String>currEntry=getNextEntry();applyPaxHeadersToCurrentEntry(currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>currEntry=getNextEntry().getValue();applyPaxHeadersToCurrentEntry(currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430appendPaxHeadersToCurrentEntry(headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,true,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,true,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,true,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getCurrentEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i],hasHitEOF);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i],hasHitEOF);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i],this);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430InputStreamis=getCurrentEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430InputStreamis=getReadNow();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430InputStreamis=getRecordSize();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430InputStreamis=getInputStream();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430InputStreamis=getPaxHeaders();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430InputStreamis=getImplicitRecordEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,i+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i+1);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i+1,headers.length);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i+1,headers.length);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,headers.length-1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,headers.length+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,headers.length,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,headers.length-2);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,headers.length-1,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,encoding.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();paxHeaders.put(encoding,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>currEntry=getNextEntry();paxHeaders.put(encoding,currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();paxHeaders.put(ENCODING,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430paxHeaders.put(encoding,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();paxHeaders.put(encoding,this);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){if(headers.size()>0){getNextEntry();appendPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();appendPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()<1){getNextEntry();appendPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()>1){getNextEntry();appendPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()>0||headers.size()>0){getNextEntry();appendPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.length){getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){null<headers.length){getNextEntry();}else{applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.length){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){null<headers.length){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.length){getNextEntry();}elseif(headers.size()>0){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.hasChildren()){returncurrEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.hasChildren()){returncurrEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.hasChildren()){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.hasChildren()){returncurr
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.hasChildren()){returncurrEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.hasChildren()){returncur
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers==null){getNextEntry();applyPaxHeadersToCurrentEntry(entry.getKey());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.keySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(entry.getKey());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(entry.getKey());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(entry.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430For(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(entry.getKey());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<Object,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(entry.getKey());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430aplicePaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i].toString());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i].toString());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i].toString());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers[i].toString());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.size()){getNextEntry();applyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.size()-1){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430n<headers.size()){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430n<headers.size()){getNextEntry();applyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(curr
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryentryentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i],headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i],headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i],headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers[i],headers[i]);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();applyPaxHeadersToCurrentEntry(headers,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getCurrentEntry();applyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.hasChildren()){continuecurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.hasChildren()){continuecurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(0);if(currEntry.hasChildren()){continuecurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersFromCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersFromCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersFromCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Map<String,String>headers=newHashMap<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null||headers.size()>0){getNextEntry();//GettheactualfileentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()>0){getNextEntry();//GettheactualfileentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();applyPaxHeadersToCurrentEntry(headers,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers,this);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers==null){getNextEntry();paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(paxHeaders!=null){getNextEntry();paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430For(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(paxHeaders==null){getNextEntry();paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){null<headers.size()){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.size()-1){getNextEntry();applyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getValue()==null){returncurrEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getValue()==null){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getValue()==null){returncurrEntry.get
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getValue()==null){returncurr
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getValue()==null){returncur
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getValue()==null){returncurrEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith("/.*")
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith(".*")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith("/
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith("/.*
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith("/.*")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith(".*")
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(paxHeaders);}else{paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}else{paxHeaders.putAll(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(inti=0;i<this.headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();for(inti=0;i<this.headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName()
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName()
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,headers,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()==0){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430headers!=null){if(headers.size()>0){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()<1){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()<=0){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()>1){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getType()==Token.NAME){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getType()==Token.NAME){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getType()==Token.NAME
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(0);if(currEntry.getType()==Token.NAME){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getType()==Token.NAME){}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null||headers.size()==0){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getType()==Token.NAME
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430intnumRecords=headers.size()-1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430intnumRecords=headers.size()+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430intnumRecords=headers.size()-2;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430intnumRecords=headers.size()*2;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430intnumRecords=headers.size()+headers.length;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,false);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,true);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,false);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,true);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,true);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,false);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,null);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){appendPaxHeadersTo
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>currEntry=getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(currEntry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>currEntry=getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430InputStreamis=getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryentryentryentryentryentryentryentryapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryentryentryentryentryentryentryentryentryapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(Stringentry:headers.keySet()){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(Stringentry:headers.keySet()){applyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryentryentryentrystartsWith("/")){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryentryentryentryentrystartsWith("/")){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryentryentryentryandapplyPaxHeadersToCurrentEntry(headers,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430intnumRecords=headers.size()/2;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430intnumRecords=headers.size()-4;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){applyPaxHeadersToCurrentEntry(headers);}else{paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersFromCurrentEntry(headers);}else{paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>headers:headers.values()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getValue()==null||
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getValue()==null){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getVal
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Null<headers.length){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.keySet()){if(headers!=null){getNextEntry();paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();paxHeaders=newHashMap<String,String>();}}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();//GettheactualfileentryentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();*GettheactualfileentryentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getType()==Token.NAME||
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430InputStreamis=getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersFromCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Stringencoding:headers.keySet()){for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Stringencoding:headers.values()){for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersTo>=null;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersTo>=null;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{headers.putAll(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{paxHeaders.putAll(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{paxHeaders.putAll(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersFromCurrentEntry(headers);}else{paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>entry=headers.entrySet().iterator().first();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();//Gettheactualfileentryentryentry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i+2);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>currEntry:headers.entrySet()){if(headers!=null||headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>currEntry:headers.entrySet()){if(headers!=null&&headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>currEntry:headers.entrySet()){if(headers!=null||headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(currEntry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>currEntry:headers.entrySet()){if(headers!=null||headers.size()>0){getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>currEntry:headers.entrySet()){if(headers!=null||headers.size()>0){getNextEntry();//Gettheactualfileentryentry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>currEntry:headers.entrySet()){if(headers!=null||headers.size()>0){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){nextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){nextEntry();applyPaxHeadersToCurrentEntry(headers);}else{paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith("/.*")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i].toString()
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i]).toString();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Stringencoding:headers.keySet()){for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(encoding);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();PaxHeadersToCurrentEntry(headers);}else{headers.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();*GettheactualfileentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryandapplyPaxHeadersFromCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryandapplyPaxHeadersToCurrentEntry(headers,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430PaxHeaders=newHashMap<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();paxHeaders.putAll(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();}else{AppendPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersFromCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i],hasHitEOF);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryentryentryentryentryapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(Stringentry:headers.keySet()){applyPaxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(Stringentry:headers.keySet()){applyPaxHeadersToCurrentEntry(entry.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();*GettheactualfileentryentryandapplyPaxHeadersFromCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(paxHeaders);}else{paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersTo[Delete]null;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();paxHeaders.put(entry.getKey(),entry.getValu
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.values()){if(headers!=null){getNextEntry();paxHeaders.put(entry.getKey(),entry.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){applyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryenterenterapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();//GettheactualfileentryentryentryenterenterapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.length){getNextEntry();*gettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();*getthecurrentfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430headers==null||headers.size()==0){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430((TarArchiveEntry<String,String>)headers).put(this,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430((TarArchiveEntry<String,String>)headers).clear();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.length){getNextEntry();paxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.size()){getNextEntry();paxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430paxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,buffer);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430InputStreamis=getNextEntry();for(Stringheader:headers.keySet()){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(Stringheader:headers.keySet()){applyPaxHeadersToCurrentEntry(headers,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(!hasHitEOF){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(!hasHitEOF){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();//GettheactualfileentryentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryentryentryentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//Gettheactualfileentryentryentryentryentryentryenter
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,headers.length-4);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();*GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.length){getNextEntry();*GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430InputStreamis=getNextEntry();paxHeaders.put(encoding,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();PaxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();*GettheactualfileentryentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryandapplyPaxHeadersFromCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//Gettheactualfileentryentryentryentry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();//Gettheactualfileentryentryentryentryentry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();//Gettheactualfileentryentryentryentry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName()
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()<=0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(!headers.isEmpty()){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()<0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){if(headers.size()>0){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()>0){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()>0){getNextEntry();return;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){appendPaxHeadersTo
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){applyPaxHeader
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){applyPaxHea
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey())&&}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null&&headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Null<headers.size()){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430InputStreamis=getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430InputStreamis=getCurrentEntry();if(headers!=null){for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430InputStreamis=getPaddedInputStream();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430InputStreamis=getPaxInputStream();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>currEntry=getNextEntry();for(inti=0;i<headers.length;++i){applyPaxHeadersToCurrentEntry(headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.length;++i){applyPaxHeadersToCurrentEntry(headers[i],headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>currEntry=getNextEntry();for(inti=0;i<headers.length;++i){applyPaxHeadersToCurrentEntry(currEntry.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();*GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers,this);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();paxHeadersToCurrentEntry(headers);}else{paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();paxHeadersToCurrentEntry(headers);}else{paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers.size());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.values()){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430For(Map.Entry<String,String>entry:headers.entrySet()){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();}else{applyPaxHeadersToCurrentEntry(headers.keySet(),headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430headers!=null&&headers.size()>0){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()>0||headers.size()>0){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers.keySet(),false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers.size(),false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>currEntry=getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,currEntry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430InputStreamis=getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<this.headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.length;++i){applyPaxHeadersToCurrentEntry(headers[i].getName());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers.keySet(),true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers.size(),true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.values()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(entry.getKey());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getValue()==null){returncurrEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getValue()==null){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()>0){getNextEntry();//Gettheactualfileentryentryentry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()>0){getNextEntry();//Gettheactualfileentryentryentryentry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i],headers[i]
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.length){getNumberEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryentryentryentryentryentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(Stringentry:headers.keySet()){applyPaxHeadersToCurrentEntry(entry,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(Stringentry:headers.keySet()){applyPaxHeadersToCurrentEntry(entry.getKey());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.values()){if(headers!=null){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>header:headers.entrySet()){if(headers!=null){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersFromCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>header:headers.entrySet()){thrownewIllegalArgumentException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430intheadersSize(){for(Map.Entry<String,String>entry:headers.entrySet()){thrownewIllegalArgumentException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){thrownewIllegalArgumentException("".);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.keySet()){thrownewIllegalArgumentException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{paxHeaders=parsePaxHeaders(this);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Stringheader:headers.keySet()){paxHeaders.put(entry.getKey(),header.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Stringheader:headers.keySet()){paxHeaders.put(entry.getKey(),entry.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null&&headers.size()>0){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>currEntry:headers.entrySet()){if(headers!=null||headers.size()>0){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersTo
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.keySet()){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430For(Map.Entry<String,String>entry:headers.entrySet()){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.values()){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,encoding);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Stringencoding:headers.keySet()){for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(encoded);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()<0){getNextEntry();appendPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(!headers.isEmpty()){getNextEntry();appendPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()<=0){getNextEntry();appendPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(zipEncoding,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,ZipEncoding.US_ASCII);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>headers:headers.values()){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(Map.Entry<String,String>headers:headers.entrySet()){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430For(Map.Entry<String,String>headers:headers.entrySet()){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.length){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.size()){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{System.arraycopy(headers,0,headers,0,headers.length);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();*GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers[0],headers[1]);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers[i],encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.values()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(head
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){Entry<String,String>currEntry=getNextEntry();applyPaxHeadersToCurrentEntry(currEntry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>currEntry=headers.getNextEntry();applyPaxHeadersToCurrentEntry(currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430headers!=null&&headers.size()==0){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430appliesPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers.keySet());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){nullheaders.length=headers.length;getNextEntry();}else{applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){nullheaders.length=headers.length;getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();//andapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();//TheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null&&headers.size()>0){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith("/
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null&&headers.size()>0){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith(".*")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.size()&&getNextEntry();applyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.size()){getNextEntry();applyPaxHeadersToCurrentEntry(headers,true);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers.size()<=0){getNextEntry();//GettheactualfileentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers.size()>0){getNextEntry();*GettheactualfileentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(Stringentry:headers.keySet()){paxHeaders.put(entry.getKey(),entry.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<this.headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();*gettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){nullheaders.length=headers.length;getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.length){getNextEntry();applyPaxHeadersToCurrentEntry(headers,null);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,headers,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();*gettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430while(headers!=null&&headers.size()>0){for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430while(headers!=null){for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,false);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null&&headers.size()>0){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null||headers.size()==0){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>header:headers.entrySet()){if(headers.size()>0){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers.size()>0){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>header:headers.entrySet()){if(headers.size()>0){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers.size()>0){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>header:headers.entrySet()){if(headers.size()>0){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersFromCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();*gettheactualfileentryentryandapplyPaxHeadersFromCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(entry);}}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers,false);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers,false);}else{headers.putAll(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers,false);}else{headers.put(encoding.getName(),headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers,false);}else{headers.put(encoding.toString(),headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers,false);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null&&headers.size()>0){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getValue()==null){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430intnumRecords=headers.size()>headers.size();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>currEntry=headers.nextEntry();applyPaxHeadersToCurrentEntry(currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>currEntry=headers.getNext();applyPaxHeadersToCurrentEntry(currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>currEntry=headers.next();applyPaxHeadersToCurrentEntry(currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>header:headers.entrySet()){if(headers!=null||headers.size()>0){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>headers:headers.entrySet()){if(headers!=null||headers.size()>0){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null&&headers.size()>0){getNextEntry();*GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>header:headers.entrySet()){if(headers!=null||headers.size()>0){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>header:headers.entrySet()){if(headers.size()>1){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>headers:headers.entrySet()){if(headers.size()>0||headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//Gettheactualfileentryentryentryentryentryentryentryentrystart=applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>header:headers.entrySet()){if(headers!=null||headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null&&headers.size()>0){getNextEntry();//GettheactualfileentryapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>header:headers.entrySet()){if(headers!=null||headers.size()>0){getNextEntry();break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>header:headers.entrySet()){if(headers!=null&&headers.size()>0){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430InputStreamis=getCurrentEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{headers.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers.size()>0){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>header:headers.entrySet()){if(headers.size()>0){getNextEntry();//Gettheactualfileentryentryentry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{headers.putAll(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();//GettheactualfileentryentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i+1,headers.getLength());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,hashitEOF);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,haveHitEOF);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(zipEncoding==null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(zipEncoding==null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers.size()>0||headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers.size()==0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,zipEncoding);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();paxHeaders.put(entry.getKey(),entry.getValu
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersFromCurrentEntry(headers,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers){if(headers!=null){getNextEntry();paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){getNextEntry();paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryentryentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>headers:headers.entrySet()){if(headers!=null){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>header:headers.entrySet()){if(headers!=null||headers.size()>0){getNextEntry();//Gettheactualfileentryentryentry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null&&headers.size()>0){getNextEntry();//GettheactualfileentryentryentryentryapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null&&headers.size()>0){getNextEntry();//Gettheactualfileentryentryentry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>headers:headers.entrySet()){if(headers!=null||headers.size()>0){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();*gettheactualfileentryentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){appendPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>entry=headers.entrySet().iterator(),is.next();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(!hasHitEOF){getNextEntry();paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430while(headers.size()>0){for(Map.Entry<String,String>entry:headers.entrySet()){thrownewIllegalArgumentException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430intheaderSize=headers.size();for(Map.Entry<String,String>entry:headers.entrySet()){thrownewIllegalArgumentException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430while(headers.size()>0){for(Map.Entry<String,String>entry:headers.entrySet()){thrownewIllegalArgumentException("".);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();//Gettheactualfileentryentryentryentry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();//Gettheactualfileentryentryentryentryentry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>header:headers.entrySet()){if(headers!=null){getNextEntry();paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.values()){if(headers!=null){getNextEntry();paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryentryentryentryapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();paxHeadersToCurrentEntry(headers,headers);}else{paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();paxHeadersToCurrentEntry(headers);}else{PaxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();*GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>headers:headers.entrySet()){if(headers!=null){getNextEntry();*GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>header:headers.entrySet()){if(headers!=null){getNextEntry();*GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();}else{headers.put(encoding.getName(),headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();}else{headers.put(encoding.toString(),headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();}else{headers.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>header:headers.entrySet()){if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null&&headers.size()>0){applyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){applyPaxHeadersTo
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>headers:headers.entrySet()){if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(paxHeaders);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers.toArray(newZipEncoding[headers.size()]));}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers,zipEncoding);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i].getKey());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(zipEncoding!=null){getNextEntry();paxHeadersToCurrentEntry(headers);}else{headers.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(!hasHitEOF){getNextEntry();paxHeadersToCurrentEntry(headers);}else{headers.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(zipEncoding!=null){getNextEntry();paxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,header);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){appendPaxHeadersToCurrentEntry(headers,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryenterenterenterapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();//GettheactualfileentryentryentryenterenterapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();//GettheactualfileentryentryenterenterapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(!hasHitEOF){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getType()==Token.NAME){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null&&headers.size()>0){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getType()==Token.NAME
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();//GettheactualfileentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();*gettheactualfileentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextPaxHeaders();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//Gettheactualfileentryentryentryentry}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();return;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>headers:headers.entrySet()){if(headers!=null){getNextEntry();*gettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();*gettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();*gettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i+1,headers.size());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalArgumentException("".);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,headers.size());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){nextEntry();applyPaxHeadersToCurrentEntry(headers);}else{paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){nextEntry();applyPaxHeadersToCurrentEntry(headers);}else{thrownewRuntimeException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>headers:headers.entrySet()){if(headers!=null||headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>header:headers.entrySet()){if(headers!=null&&headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersTo>>null;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersTo!=null;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers.size()>0){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//Gettheactualfileentryentryentryentryentryentrystart=applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){appendPaxHeadersToCurrentEntry(headers,this);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,true,headers.size());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,true,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(ZipEncodingheader:headers.values()){if(headers!=null){getNextEntry();paxHeaders.put(encoding,header);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(ZipEncodingheader:headers.keySet()){if(headers!=null){getNextEntry();paxHeaders.put(encoding,header);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(ZipEncodingheader:headers.values()){if(headers!=null){getNextEntry();paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430while(headers!=null){applyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers,headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();paxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>header:headers.entrySet()){if(headers!=null){getNextEntry();paxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();paxHeadersToCurrentEntry(entry.getKey());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();paxHeadersToCurrentEntry(entry.getKey()+entry.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null&&headers.size()>0){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getName())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers,encoding);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers,encoding);}else{headers.put(encoding.getName(),headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(zipEncoding!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(zipEncoding!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();paxHeaders=parsePaxHeaders(this);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(Stringentry:headers.keySet()){paxHeaders.put(encoding,entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers.size()>0||headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers.size()==0){getNextEntry();applyPaxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,headers.size);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers.size());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>currEntry:headers){if(headers!=null){getNextEntry();}
