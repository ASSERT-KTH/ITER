projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();//GettheactualfileentryapplyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();}else{applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalArgumentException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers.size()>0){getNextEntry();//GettheactualfileentryapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryapplyPaxHeadersToCurrentEntry(headers);}else{paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryapplyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){applyPaxHeadersTo
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryapplyPaxHeadersToCurrentEntry(headers);}else{paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();applyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430nextEntry();applyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();}else{applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();}else{applyPaxHeadersToCurrentEntry(headers,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>currEntry=getNextEntry();applyPaxHeadersToCurrentEntry(currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null||headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers.size()>0){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null||headers.size()>0){getNextEntry();//GettheactualfileentryapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null||headers.size()>0){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430intnumRecords=headers.size();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers.size()>0){for(Map.Entry<String,String>entry:headers.entrySet()){thrownewIllegalArgumentException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}else{paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers[i]);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i].toString());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,this);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalArgumentException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430applyPaxHeadersToCurrentEntry(headers,i);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,i+1);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}else{paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){applyPaxHeadersTo
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){applyPaxHeadersTo
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){applyPaxHeadersTo
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,hasHitEOF);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersTo>=null;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersTo==null;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersTo>>null;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(Stringentry:headers.keySet()){paxHeaders.put(entry.getKey(),entry.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();paxHeaders=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430InputStreamis=getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<this.headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersFromCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();paxHeadersToCurrentEntry(headers);}else{paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryandapplyPaxHeadersToCurrentEntry(headers);}else{paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();paxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();paxHeadersToCurrentEntry(headers);}else{headers.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()>0){getNextEntry();appendPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryentryapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers==null){getNextEntry();//GettheactualfileentryentryentryapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//Gettheactualfileentryentryentry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.length){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.size()){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.length){getNextEntry();}else{applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();}else{appendPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryentryapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryentryenterapplyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.length){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalArgumentException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430null<headers.size()){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}else{thrownewIllegalArgumentException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()>0){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()>0){getNextEntry();//GettheactualfileentryentryapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null||headers.size()>0){getNextEntry();//GettheactualfileentryentryapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){if(headers.size()>0){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.hasChildren()){continuecurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getValue()==null){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.hasChildren()){continuecurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getType()==Token.NAME){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith("/.*")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.hasChildren()){returncurrEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();*GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersFromCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i].getName());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers[i],headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.length;++i){applyPaxHeadersToCurrentEntry(headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>header:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(entry.getKey());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();paxHeaders.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(Stringheader:headers.keySet()){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>headers:headers.entrySet()){if(headers!=null){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey())&&
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName()
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().equals(currEntry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getValue())&&
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getValue()==null){returncurrEntry.get
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,this);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers,true);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();//GettheactualfileentryentryentryapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){applyPaxHeadersToCurrentEntry(headers);}else{for(inti=0;i<headers.size();++i){applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();//GettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers!=null){getNextEntry();*gettheactualfileentryentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430if(headers.size()>0){getNextEntry();//GettheactualfileentryandapplyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430Entry<String,String>entry=headers.entrySet().iterator().next();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>headers:headers.entrySet()){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers.size()>0){getNextEntry();applyPaxHeadersToCurrentEntry(entry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java430for(Map.Entry<String,String>entry:headers.entrySet()){if(headers!=null){getNextEntry();paxHeaders.put(entry.getKey(),entry.getValue());}
