bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
2	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  this.paxHeaders  =  currEntry.getPaxHeaders();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  this.paxHeaders  =  currEntry.getPaxHeaders();  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  this.paxHeaders  =  currEntry.getPaxHeaders();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
3	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
4	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getNextEntry();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
5	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  paxHeaders(currEntry.getKey(),  currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  paxHeaders(currEntry.getKey(),  currEntry.getValue());  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  paxHeaders(currEntry.getKey(),  currEntry.getValue());	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
6	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  skipPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  skipPaxHeaders();  }  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  skipPaxHeaders();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
7	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  paxHeaders.put(encoding,  currEntry);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  paxHeaders.put(encoding,  currEntry);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  paxHeaders.put(encoding,  currEntry);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
8	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
9	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(this);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(this);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(this);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
10	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders();  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders();	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.class);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.class);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.class);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
12	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(tr);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(tr);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(tr);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
13	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(true);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(true);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(true);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
14	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(true);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(true);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(true);	  Map    <    String,    String>    headers    =    parsePaxHeaders(false);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
15	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(false);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(false);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(false);	  Map    <    String,    String>    headers    =    parsePaxHeaders(false);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
16	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(false);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(false);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(false);	  Map    <    String,    String>    headers    =    parsePaxHeaders(false);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
17	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseStringHeaders(false);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parseStringHeaders(false);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseStringHeaders(false);	  Map    <    String,    String>    headers    =    parsePaxHeaders(false);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
18	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders();  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders();  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders();	  Map    <    String,    String>    headers    =    parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
19	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  getPaxHeaders();  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  getPaxHeaders();  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  getPaxHeaders();	  Map    <    String,    String>    headers    =    parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
20	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  this.parsePaxHeaders();  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  this.parsePaxHeaders();  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  this.parsePaxHeaders();	  Map    <    String,    String>    headers    =    parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
21	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>();  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>();	  Map    <    String,    String>    headers    =    parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
22	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  is.parsePaxHeaders();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  is.parsePaxHeaders();  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  is.parsePaxHeaders();	  Map    <    String,    String>    headers    =    parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
23	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  false);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  false);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(true,  false);	  Map    <    String,    String>    headers    =    parsePaxHeaders(true);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  true);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  true);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(true,  true);	  Map    <    String,    String>    headers    =    parsePaxHeaders(true);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
25	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  encoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  encoding);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(true,  encoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(true);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
26	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(record);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(record);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(record);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
27	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
28	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers.length);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers.length);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers.length);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
29	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(tr);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(tr);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(tr);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
30	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  encoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  encoding);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  encoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
31	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  headers);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  headers);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  headers);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
32	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  true);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  true);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  true);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
33	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  false);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  false);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  false);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
34	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(recordSize);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(recordSize);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(recordSize);	  Map    <    String,    String>    headers    =    parseHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
35	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(getCurrentEntry());  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(getCurrentEntry());  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(getCurrentEntry());	  Map    <    String,    String>    headers    =    parseHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
36	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
37	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  is.parsePaxHeaders(encoding);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  is.parsePaxHeaders(encoding);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  is.parsePaxHeaders(encoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
38	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(encoding);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(encoding);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(encoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
39	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
40	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(headers);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(headers);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
41	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
42	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
43	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getParent();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getParent();  }  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getParent();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
44	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
45	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  encoding.parsePaxHeaders();  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  encoding.parsePaxHeaders();  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  encoding.parsePaxHeaders();	  Map    <    String,    String>    headers    =    parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
46	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  encoding);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  encoding);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  encoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
47	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  getPaxHeaders(encoding);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  getPaxHeaders(encoding);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  getPaxHeaders(encoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
48	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(zipEncoding);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(zipEncoding);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(zipEncoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
49	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(false,  true);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(false,  true);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(false,  true);	  Map    <    String,    String>    headers    =    parsePaxHeaders(false);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
50	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(headers);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(headers);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(headers);	  Map    <    String,    String>    headers    =    parseHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
51	[BUG]  [BUGGY]  map  <  String,  String>  headers  =  parsePaxHeaders(true);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  map  <  String,  String>  headers  =  parsePaxHeaders(true);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	map  <  String,  String>  headers  =  parsePaxHeaders(true);	  Map    <    String,    String>    headers    =    parsePaxHeaders(false);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
52	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  headers);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  headers);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  headers);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
53	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  hasHitEOF);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  hasHitEOF);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
54	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders());  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders());  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders());	  Map    <    String,    String>    headers    =    parsePaxHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
55	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  headers);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  headers);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(this,  headers);	  Map    <    String,    String>    headers    =    parseHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
56	[BUG]  [BUGGY]  map  <  String,  String>  headers  =  parsePaxHeaders(false);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  map  <  String,  String>  headers  =  parsePaxHeaders(false);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	map  <  String,  String>  headers  =  parsePaxHeaders(false);	  Map    <    String,    String>    headers    =    parsePaxHeaders(true);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
57	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(false, " ");  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(false, " ");  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(false, " ");	  Map    <    String,    String>    headers    =    parsePaxHeaders(true);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
58	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
59	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
60	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
61	[BUG]  [BUGGY]  this.headers.paxHeaders  =  new  ArrayList  <  TarArchiveEntry>();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  this.headers.paxHeaders  =  new  ArrayList  <  TarArchiveEntry>();  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	this.headers.paxHeaders  =  new  ArrayList  <  TarArchiveEntry>();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
62	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(encoding);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(encoding);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(encoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
63	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(headers);  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(headers);	  Map    <    String,    String>    headers    =    parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
64	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getKey());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{    [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getKey());  [BUGGY]    getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getKey());	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
