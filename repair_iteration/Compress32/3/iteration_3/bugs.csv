bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(tr);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(tr);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(tr);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(tr);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
2	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  encoding);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  encoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(tr);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
3	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  headers);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  headers);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(tr);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
4	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  true);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  true);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(tr);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
5	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  false);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  false);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(tr);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
6	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(record);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(record);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(record);	  Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
7	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(encoding);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(encoding);	  Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
8	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  this.zipEncoding.parsePaxHeaders(encoding);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  this.zipEncoding.parsePaxHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  this.zipEncoding.parsePaxHeaders(encoding);	  Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
9	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  fileEncoding.parsePaxHeaders(encoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  fileEncoding.parsePaxHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  fileEncoding.parsePaxHeaders(encoding);	  Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
10	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  ZipEncoding.parsePaxHeaders(encoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  ZipEncoding.parsePaxHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  ZipEncoding.parsePaxHeaders(encoding);	  Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
11	[BUG]  [BUGGY]  map  <  String,  String>  headers  =  parsePaxHeaders(true,  true);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  map  <  String,  String>  headers  =  parsePaxHeaders(true,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	map  <  String,  String>  headers  =  parsePaxHeaders(true,  true);	  map    <    String,    String>    headers    =    parsePaxHeaders(true);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
12	[BUG]  [BUGGY]  map  <  String,  String>  headers  =  parsePaxHeaders(true,  false);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  map  <  String,  String>  headers  =  parsePaxHeaders(true,  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	map  <  String,  String>  headers  =  parsePaxHeaders(true,  false);	  map    <    String,    String>    headers    =    parsePaxHeaders(true);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
13	[BUG]  [BUGGY]  map  <  String,  String>  headers  =  parsePaxHeaders(true,  encoding);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  map  <  String,  String>  headers  =  parsePaxHeaders(true,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	map  <  String,  String>  headers  =  parsePaxHeaders(true,  encoding);	  map    <    String,    String>    headers    =    parsePaxHeaders(true);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
14	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseStringHeaders(true);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseStringHeaders(true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseStringHeaders(true);	  Map    <    String,    String>    headers    =    parseStringHeaders(false);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
15	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseStringHeaders(false);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseStringHeaders(false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parseStringHeaders(false);	  Map    <    String,    String>    headers    =    parseStringHeaders(false);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
16	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseBooleanHeaders(false);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseBooleanHeaders(false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseBooleanHeaders(false);	  Map    <    String,    String>    headers    =    parseStringHeaders(false);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
17	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseStringHeaders();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseStringHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseStringHeaders();	  Map    <    String,    String>    headers    =    parseStringHeaders(false);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
18	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseStringHeaders(false,  encoding);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseStringHeaders(false,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseStringHeaders(false,  encoding);	  Map    <    String,    String>    headers    =    parseStringHeaders(false);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
19	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  is);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  is);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  is);	  Map    <    String,    String>    headers    =    parsePaxHeaders(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
20	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  is.parsePaxHeaders(zipEncoding);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  is.parsePaxHeaders(zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  is.parsePaxHeaders(zipEncoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
21	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  isHitEOF);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  isHitEOF);	  Map    <    String,    String>    headers    =    parsePaxHeaders(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
22	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  hasHitEOF);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  hasHitEOF);	  Map    <    String,    String>    headers    =    parsePaxHeaders(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
23	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
24	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  hasHitEOF,  headers);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  hasHitEOF,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  hasHitEOF,  headers);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
25	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  hasHitEOF,  encoding);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  hasHitEOF,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  hasHitEOF,  encoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
26	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  hasHitEOF,  headers.length);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  hasHitEOF,  headers.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  hasHitEOF,  headers.length);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
27	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  hasHitEOF,  headerBuf);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  hasHitEOF,  headerBuf);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  hasHitEOF,  headerBuf);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
28	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  hasHitEOF);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  hasHitEOF);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
29	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders();	  Map    <    String,    String>    headers    =    encoding.parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
30	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  ZipEncoding.parsePaxHeaders();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  ZipEncoding.parsePaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  ZipEncoding.parsePaxHeaders();	  Map    <    String,    String>    headers    =    encoding.parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
31	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  this.zipEncoding.parsePaxHeaders();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  this.zipEncoding.parsePaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  this.zipEncoding.parsePaxHeaders();	  Map    <    String,    String>    headers    =    encoding.parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
32	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  cacheEncoding.parsePaxHeaders();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  cacheEncoding.parsePaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  cacheEncoding.parsePaxHeaders();	  Map    <    String,    String>    headers    =    encoding.parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
33	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  fileEncoding.parsePaxHeaders();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  fileEncoding.parsePaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  fileEncoding.parsePaxHeaders();	  Map    <    String,    String>    headers    =    encoding.parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
34	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  getPaxHeaders(zipEncoding);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  getPaxHeaders(zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  getPaxHeaders(zipEncoding);	  Map    <    String,    String>    headers    =    getPaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
35	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  is.getPaxHeaders();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  is.getPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  is.getPaxHeaders();	  Map    <    String,    String>    headers    =    getPaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
36	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  is.getPaxHeaders(encoding);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  is.getPaxHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  is.getPaxHeaders(encoding);	  Map    <    String,    String>    headers    =    getPaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
37	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  getPaxHeaders(record);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  getPaxHeaders(record);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  getPaxHeaders(record);	  Map    <    String,    String>    headers    =    getPaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
38	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  getPaxHeaders(encoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  getPaxHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  getPaxHeaders(encoding);	  Map    <    String,    String>    headers    =    getPaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
39	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(false,  false);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(false,  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(false,  false);	  Map    <    String,    String>    headers    =    parsePaxHeaders(true,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
40	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  false);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  false);	  Map    <    String,    String>    headers    =    parsePaxHeaders(true,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
41	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  false,  true);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  false,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(true,  false,  true);	  Map    <    String,    String>    headers    =    parsePaxHeaders(true,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
42	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(false,  true);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(false,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(false,  true);	  Map    <    String,    String>    headers    =    parsePaxHeaders(true,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
43	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(recordSize,  headers.length);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(recordSize,  headers.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(recordSize,  headers.length);	  Map    <    String,    String>    headers    =    parseHeaders(recordSize);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
44	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(recordSize  +  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(recordSize  +  1);	  Map    <    String,    String>    headers    =    parseHeaders(recordSize);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
45	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(recordSize,  headers);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(recordSize,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(recordSize,  headers);	  Map    <    String,    String>    headers    =    parseHeaders(recordSize);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
46	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize);	  Map    <    String,    String>    headers    =    parseHeaders(recordSize);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
47	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(recordLimit);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(recordLimit);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(recordLimit);	  Map    <    String,    String>    headers    =    parseHeaders(recordSize);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
48	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  is.getHeaders();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  is.getHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  is.getHeaders();	  Map    <    String,    String>    headers    =    is.parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
49	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  is.parsePaxHeaders(record);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  is.parsePaxHeaders(record);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  is.parsePaxHeaders(record);	  Map    <    String,    String>    headers    =    is.parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
50	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  is.parseHeaders();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  is.parseHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  is.parseHeaders();	  Map    <    String,    String>    headers    =    is.parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
51	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  is.readPaxHeaders();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  is.readPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  is.readPaxHeaders();	  Map    <    String,    String>    headers    =    is.parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
52	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(false);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(false);	  Map    <    String,    String>    headers    =    parseHeaders(false);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
53	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseFileHeaders(false);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseFileHeaders(false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseFileHeaders(false);	  Map    <    String,    String>    headers    =    parseHeaders(false);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
54	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseRecords(false);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseRecords(false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseRecords(false);	  Map    <    String,    String>    headers    =    parseHeaders(false);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
55	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(record,  headers);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(record,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(record,  headers);	  Map    <    String,    String>    headers    =    parseHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
56	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(record,  headers.length);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(record,  headers.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(record,  headers.length);	  Map    <    String,    String>    headers    =    parseHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
57	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(record);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(record);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(record);	  Map    <    String,    String>    headers    =    parseHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
58	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(record,  encoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(record,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(record,  encoding);	  Map    <    String,    String>    headers    =    parseHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
59	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  0,  headers.length);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  0,  headers.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  0,  headers.length);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
60	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers.length  -  1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers.length  -  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers.length  -  1);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
61	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers.length);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers.length);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
62	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  SMALL_BUFFER_SIZE);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  SMALL_BUFFER_SIZE);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
63	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  length);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  length);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
64	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers.length  +  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers.length  +  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers.length  +  1);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
65	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
66	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
67	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentPaxEntry();  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentPaxEntry();  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentPaxEntry();  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
68	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  this.getCurrentEntry();  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  this.getCurrentEntry();  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  this.getCurrentEntry();  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
69	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ".getMessage());  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ".getMessage());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ".getMessage());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
70	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders();	  final    Map    <    String,    String>    headers    =    parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
71	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  getPaxHeaders();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  getPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  getPaxHeaders();	  final    Map    <    String,    String>    headers    =    parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
72	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.parsePaxHeaders();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.parsePaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  this.parsePaxHeaders();	  final    Map    <    String,    String>    headers    =    parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
73	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>();	  final    Map    <    String,    String>    headers    =    parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
74	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  super.paxHeaders();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  super.paxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  super.paxHeaders();	  final    Map    <    String,    String>    headers    =    parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
75	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  is.parsePaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  is.parsePaxHeaders(headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  is.parsePaxHeaders(headers);	  Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
76	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  this.zipEncoding.parsePaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  this.zipEncoding.parsePaxHeaders(headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  this.zipEncoding.parsePaxHeaders(headers);	  Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
77	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  ZipEncoding.parsePaxHeaders(record);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  ZipEncoding.parsePaxHeaders(record);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  ZipEncoding.parsePaxHeaders(record);	  Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
78	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(headers);	  Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
79	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  true);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  true);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
80	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  receiver);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  receiver);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  receiver);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
81	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  cache);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  cache);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  cache);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
82	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  length);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  length);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
83	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  this);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  this);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  this);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
84	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  file);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  file);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  file);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
85	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  null);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  null);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(true,  null);	  Map    <    String,    String>    headers    =    parsePaxHeaders(false,   "   ");    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
86	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(true,   " ");  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(true,   " ");  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(true,   " ");	  Map    <    String,    String>    headers    =    parsePaxHeaders(false,   "   ");    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
87	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  encoding, "   ");  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  encoding, "   ");  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(true,  encoding, "   ");	  Map    <    String,    String>    headers    =    parsePaxHeaders(false,   "   ");    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
88	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(true,   " ",  true);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(true,   " ",  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(true,   " ",  true);	  Map    <    String,    String>    headers    =    parsePaxHeaders(false,   "   ");    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
89	[BUG]  [BUGGY]  map  <  String,  String>  headers  =  parsePaxHeaders();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  map  <  String,  String>  headers  =  parsePaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	map  <  String,  String>  headers  =  parsePaxHeaders();	  map    <    String,    String>    headers    =    parsePaxHeaders(false);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
90	[BUG]  [BUGGY]  map  <  String,  String>  headers  =  parseHeaders(true);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  map  <  String,  String>  headers  =  parseHeaders(true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	map  <  String,  String>  headers  =  parseHeaders(true);	  map    <    String,    String>    headers    =    parsePaxHeaders(false);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
91	[BUG]  [BUGGY]  map  <  String,  String>  headers  =  parseHeaders(false);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  map  <  String,  String>  headers  =  parseHeaders(false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	map  <  String,  String>  headers  =  parseHeaders(false);	  map    <    String,    String>    headers    =    parsePaxHeaders(false);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
92	[BUG]  [BUGGY]  map  <  String,  String>  headers  =  parseStringHeaders(false);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  map  <  String,  String>  headers  =  parseStringHeaders(false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	map  <  String,  String>  headers  =  parseStringHeaders(false);	  map    <    String,    String>    headers    =    parsePaxHeaders(false);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
93	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  record);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  record);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(this,  record);	  Map    <    String,    String>    headers    =    parseHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
94	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  encoding);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(this,  encoding);	  Map    <    String,    String>    headers    =    parseHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
95	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  file);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  file);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(this,  file);	  Map    <    String,    String>    headers    =    parseHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
96	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  headers);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(this,  headers);	  Map    <    String,    String>    headers    =    parseHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
97	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  repaints);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  repaints);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(this,  repaints);	  Map    <    String,    String>    headers    =    parseHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
98	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  cache);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  cache);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(this,  cache);	  Map    <    String,    String>    headers    =    parseHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
99	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseZipHeaders(zipEncoding);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseZipHeaders(zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseZipHeaders(zipEncoding);	  Map    <    String,    String>    headers    =    parseHeaders(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
100	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseCurrentHeaders(zipEncoding);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseCurrentHeaders(zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseCurrentHeaders(zipEncoding);	  Map    <    String,    String>    headers    =    parseHeaders(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
101	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(zipEncoding,  is);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(zipEncoding,  is);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(zipEncoding,  is);	  Map    <    String,    String>    headers    =    parseHeaders(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
102	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseRawHeaders(zipEncoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseRawHeaders(zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseRawHeaders(zipEncoding);	  Map    <    String,    String>    headers    =    parseHeaders(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
103	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  is.parseHeaders(zipEncoding);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  is.parseHeaders(zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  is.parseHeaders(zipEncoding);	  Map    <    String,    String>    headers    =    parseHeaders(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
104	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getNext();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getNext();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getNext();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getParent();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
105	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getParent();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getParent();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getParent();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getParent();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
106	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getNext();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getNext();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getNext();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getParent();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
107	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getParent();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getParent();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getParent();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getParent();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
108	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers  =  currEntry.getNext();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers  =  currEntry.getNext();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers  =  currEntry.getNext();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getParent();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
109	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getKey());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getKey());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record.getKey());	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr.getKey());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
110	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getValue());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getValue());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getValue());	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr.getKey());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
111	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getKey(),  true);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getKey(),  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getKey(),  true);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr.getKey());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
112	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getRecordSize());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getRecordSize());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getRecordSize());	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr.getKey());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
113	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getKey(),  file);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getKey(),  file);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getKey(),  file);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr.getKey());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
114	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getSimpleName());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getSimpleName());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getSimpleName());	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr.getKey());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
115	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  zipEncoding);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  zipEncoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    encoding);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
116	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  record);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  record);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  record);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    encoding);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
117	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  encoding,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  encoding,  hasHitEOF);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  encoding,  hasHitEOF);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    encoding);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
118	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  recordSize);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  recordSize);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  recordSize);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    encoding);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
119	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  encoding,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  encoding,  zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  encoding,  zipEncoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    encoding);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
120	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  fileEncoding);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  fileEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  fileEncoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    encoding);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
121	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseTarHeaders(tr);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseTarHeaders(tr);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseTarHeaders(tr);	  Map    <    String,    String>    headers    =    parseHeaders(tr);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
122	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(tr,  headers);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(tr,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(tr,  headers);	  Map    <    String,    String>    headers    =    parseHeaders(tr);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
123	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(tr,  encoding);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(tr,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(tr,  encoding);	  Map    <    String,    String>    headers    =    parseHeaders(tr);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
124	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(tr.getKey());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(tr.getKey());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(tr.getKey());	  Map    <    String,    String>    headers    =    parseHeaders(tr);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
125	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(true,  false);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(true,  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(true,  false);	  Map    <    String,    String>    headers    =    parseHeaders(true);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
126	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(true,  encoding);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(true,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(true,  encoding);	  Map    <    String,    String>    headers    =    parseHeaders(true);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
127	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(true,  true);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(true,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(true,  true);	  Map    <    String,    String>    headers    =    parseHeaders(true);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
128	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(true);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(true);	  Map    <    String,    String>    headers    =    parseHeaders(true);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
129	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry().getPaxHeaders();  this.paxHeaders  =  currEntry.getPaxHeaders();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry().getPaxHeaders();  this.paxHeaders  =  currEntry.getPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry().getPaxHeaders();  this.paxHeaders  =  currEntry.getPaxHeaders();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    this.paxHeaders    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
130	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  this.paxHeaders  =  currEntry.getPaxHeaders();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  this.paxHeaders  =  currEntry.getPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  createCurrentEntry();  this.paxHeaders  =  currEntry.getPaxHeaders();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    this.paxHeaders    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
131	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentPaxEntry();  this.paxHeaders  =  currEntry.getPaxHeaders();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentPaxEntry();  this.paxHeaders  =  currEntry.getPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentPaxEntry();  this.paxHeaders  =  currEntry.getPaxHeaders();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    this.paxHeaders    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
132	[BUG]  [BUGGY]  this.paxHeaders  =  currEntry.getPaxHeaders();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  this.paxHeaders  =  currEntry.getPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	this.paxHeaders  =  currEntry.getPaxHeaders();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    this.paxHeaders    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
133	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  null;  this.paxHeaders  =  currEntry.getPaxHeaders();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  null;  this.paxHeaders  =  currEntry.getPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  null;  this.paxHeaders  =  currEntry.getPaxHeaders();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    this.paxHeaders    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
134	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  this.paxHeaders.getCurrentEntry();  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  this.paxHeaders.getCurrentEntry();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  this.paxHeaders.getCurrentEntry();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    this.paxHeaders    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
135	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  paxHeaders(currEntry.getKey(),  currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  paxHeaders(currEntry.getKey(),  currEntry.getValue());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  createCurrentEntry();  paxHeaders(currEntry.getKey(),  currEntry.getValue());	  TarArchiveEntry    currEntry    =    getCurrentEntry();    paxHeaders(currEntry.getKey(),    currEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
136	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  paxHeaders(currEntry.getKey(),  currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  paxHeaders(currEntry.getKey(),  currEntry.getValue());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  TarArchiveEntry  currEntry  =  getCurrentEntry();  paxHeaders(currEntry.getKey(),  currEntry.getValue());	  TarArchiveEntry    currEntry    =    getCurrentEntry();    paxHeaders(currEntry.getKey(),    currEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
137	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  isCurrentEntry();  paxHeaders(currEntry.getKey(),  currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  isCurrentEntry();  paxHeaders(currEntry.getKey(),  currEntry.getValue());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  isCurrentEntry();  paxHeaders(currEntry.getKey(),  currEntry.getValue());	  TarArchiveEntry    currEntry    =    getCurrentEntry();    paxHeaders(currEntry.getKey(),    currEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
138	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  paxHeaders(currEntry.getKey(),  currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  paxHeaders(currEntry.getKey(),  currEntry.getValue());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getNextEntry();  paxHeaders(currEntry.getKey(),  currEntry.getValue());	  TarArchiveEntry    currEntry    =    getCurrentEntry();    paxHeaders(currEntry.getKey(),    currEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
139	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  this.getCurrentEntry();  paxHeaders(currEntry.getKey(),  currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  this.getCurrentEntry();  paxHeaders(currEntry.getKey(),  currEntry.getValue());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  this.getCurrentEntry();  paxHeaders(currEntry.getKey(),  currEntry.getValue());	  TarArchiveEntry    currEntry    =    getCurrentEntry();    paxHeaders(currEntry.getKey(),    currEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
140	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrentEntry();  paxHeaders(currEntry.getKey(),  currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrentEntry();  paxHeaders(currEntry.getKey(),  currEntry.getValue());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Entry  <  K,  V>  currEntry  =  getCurrentEntry();  paxHeaders(currEntry.getKey(),  currEntry.getValue());	  TarArchiveEntry    currEntry    =    getCurrentEntry();    paxHeaders(currEntry.getKey(),    currEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
141	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(encoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(encoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
142	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(encoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(encoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
143	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  this.parseHeaders();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  this.parseHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  this.parseHeaders();	  Map    <    String,    String>    headers    =    this.parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
144	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  this.paxHeaders();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  this.paxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  this.paxHeaders();	  Map    <    String,    String>    headers    =    this.parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
145	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  this.parsePaxHeaders(record);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  this.parsePaxHeaders(record);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  this.parsePaxHeaders(record);	  Map    <    String,    String>    headers    =    this.parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
146	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  this.getPaxHeaders();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  this.getPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  this.getPaxHeaders();	  Map    <    String,    String>    headers    =    this.parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
147	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(false,  encoding);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(false,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(false,  encoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(true,    encoding);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
148	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(true,  zipEncoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(true,    encoding);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
149	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(false,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(false,  zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(false,  zipEncoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(true,    encoding);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
150	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  encoding);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  encoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(true,    encoding);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
151	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  hasHitEOF);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(true,  hasHitEOF);	  Map    <    String,    String>    headers    =    parsePaxHeaders(true,    encoding);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
152	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  encoding,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  encoding,  zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(true,  encoding,  zipEncoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(true,    encoding);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
153	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  getHeaders();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  getHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  getHeaders();	  Map    <    String,    String>    headers    =    parseHeaders();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
154	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  zipEncoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    encoding);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
155	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  tr,  encoding);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  tr,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  tr,  encoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    encoding);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
156	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  tr);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  tr);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  tr);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    encoding);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
157	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  encoding,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  encoding,  zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  encoding,  zipEncoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    encoding);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
158	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  encoding);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  encoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    encoding);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
159	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  fileEncoding);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  fileEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  fileEncoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    encoding);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
160	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  false);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  false);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    false);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
161	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(tr,  false);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(tr,  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(tr,  false);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    false);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
162	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getKey(),  false);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getKey(),  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getKey(),  false);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    false);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
163	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(r,  false);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(r,  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(r,  false);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    false);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
164	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.class,  false);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.class,  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.class,  false);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    false);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
165	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  true);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  true);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    true);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
166	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(tr,  true);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(tr,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(tr,  true);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    true);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
167	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  true);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  true);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    true);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
168	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(r,  true);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(r,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(r,  true);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    true);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
169	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getPaxHeaders();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getPaxHeaders();	  TarArchiveEntry    currEntry    =    getNextEntry();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
170	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextPaxHeaders();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getNextPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getNextPaxHeaders();	  TarArchiveEntry    currEntry    =    getNextEntry();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
171	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getParent();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getParent();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getParent();	  TarArchiveEntry    currEntry    =    getNextEntry();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
172	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextPaxEntry();  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getNextPaxEntry();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getNextPaxEntry();	  TarArchiveEntry    currEntry    =    getNextEntry();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
173	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextHeader();  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getNextHeader();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getNextHeader();	  TarArchiveEntry    currEntry    =    getNextEntry();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
174	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
175	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  this.getCurrentEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  this.getCurrentEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  this.getCurrentEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
176	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry(0);  if(currEntry!=  null)  {  skipPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry(0);  if(currEntry!=  null)  {  skipPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry(0);  if(currEntry!=  null)  {  skipPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
177	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  this.paxHeaders;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  this.paxHeaders;  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  this.paxHeaders;	  Map    <    String,    String>    headers    =    getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
178	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  getPaxHeaders(true);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  getPaxHeaders(true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  getPaxHeaders(true);	  Map    <    String,    String>    headers    =    getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
179	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  hasHitEOF);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  hasHitEOF);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
180	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  encoding);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  encoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
181	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  true);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  true);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
182	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  false);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  false);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
183	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
184	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  encoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  encoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
185	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  is.parseHeaders(encoding);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  is.parseHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  is.parseHeaders(encoding);	  Map    <    String,    String>    headers    =    parseHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
186	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseCurrentHeaders(encoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseCurrentHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseCurrentHeaders(encoding);	  Map    <    String,    String>    headers    =    parseHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
187	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(encoding,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(encoding,  zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(encoding,  zipEncoding);	  Map    <    String,    String>    headers    =    parseHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
188	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(recordSize);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(recordSize);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(recordSize);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
189	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  LinkedHashMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  new  LinkedHashMap  <  String,  String>();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  new  LinkedHashMap  <  String,  String>();	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
190	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(paxHeaders);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(paxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(paxHeaders);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
191	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(256);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(256);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(256);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
192	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.length);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.length);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
193	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(64);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(64);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(64);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
194	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
195	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers  =  currEntry.getHeaders();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers  =  currEntry.getHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers  =  currEntry.getHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
196	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getHeaders();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getHeaders();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
197	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
198	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
199	[BUG]  [BUGGY]  this.headers.paxHeaders  =  new  LinkedList  <  TarArchiveEntry>();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  this.headers.paxHeaders  =  new  LinkedList  <  TarArchiveEntry>();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	this.headers.paxHeaders  =  new  LinkedList  <  TarArchiveEntry>();	  this.headers.paxHeaders    =    new    ArrayList    <    TarArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
200	[BUG]  [BUGGY]  this.headers.paxHeaders  =  new  java.util.ArrayList  <  TarArchiveEntry>();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  this.headers.paxHeaders  =  new  java.util.ArrayList  <  TarArchiveEntry>();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	this.headers.paxHeaders  =  new  java.util.ArrayList  <  TarArchiveEntry>();	  this.headers.paxHeaders    =    new    ArrayList    <    TarArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
201	[BUG]  [BUGGY]  this.headers.paxHeaders  =  new  LinkedHashMap  <  TarArchiveEntry>();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  this.headers.paxHeaders  =  new  LinkedHashMap  <  TarArchiveEntry>();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	this.headers.paxHeaders  =  new  LinkedHashMap  <  TarArchiveEntry>();	  this.headers.paxHeaders    =    new    ArrayList    <    TarArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
202	[BUG]  [BUGGY]  this.headers.paxHeaders  =  new  LinkedHashSet  <  TarArchiveEntry>();  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  this.headers.paxHeaders  =  new  LinkedHashSet  <  TarArchiveEntry>();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	this.headers.paxHeaders  =  new  LinkedHashSet  <  TarArchiveEntry>();	  this.headers.paxHeaders    =    new    ArrayList    <    TarArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
203	[BUG]  [BUGGY]  this.headers.paxHeaders  =  new  ArrayList  <  TarArchiveEntry>(1);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  this.headers.paxHeaders  =  new  ArrayList  <  TarArchiveEntry>(1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	this.headers.paxHeaders  =  new  ArrayList  <  TarArchiveEntry>(1);	  this.headers.paxHeaders    =    new    ArrayList    <    TarArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
204	[BUG]  [BUGGY]  this.headers.paxHeaders  =  new  TreeMap  <  TarArchiveEntry>();  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  this.headers.paxHeaders  =  new  TreeMap  <  TarArchiveEntry>();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	this.headers.paxHeaders  =  new  TreeMap  <  TarArchiveEntry>();	  this.headers.paxHeaders    =    new    ArrayList    <    TarArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
205	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(headers);	  Map    <    String,    String>    headers    =    parseHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
206	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(headers);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(headers);	  Map    <    String,    String>    headers    =    parseHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
207	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(paxHeaders);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(paxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(paxHeaders);	  Map    <    String,    String>    headers    =    parseHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
208	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(record.headers);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(record.headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(record.headers);	  Map    <    String,    String>    headers    =    parseHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
209	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  is.getCurrentEntry();  paxHeaders.put(encoding,  currEntry);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  is.getCurrentEntry();  paxHeaders.put(encoding,  currEntry);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  is.getCurrentEntry();  paxHeaders.put(encoding,  currEntry);	  TarArchiveEntry    currEntry    =    getCurrentEntry();    paxHeaders.put(encoding,    currEntry);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
210	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  isCurrentEntry();  paxHeaders.put(encoding,  currEntry);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  isCurrentEntry();  paxHeaders.put(encoding,  currEntry);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  isCurrentEntry();  paxHeaders.put(encoding,  currEntry);	  TarArchiveEntry    currEntry    =    getCurrentEntry();    paxHeaders.put(encoding,    currEntry);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
211	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  zipEncoding.getCurrentEntry();  paxHeaders.put(encoding,  currEntry);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  zipEncoding.getCurrentEntry();  paxHeaders.put(encoding,  currEntry);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  zipEncoding.getCurrentEntry();  paxHeaders.put(encoding,  currEntry);	  TarArchiveEntry    currEntry    =    getCurrentEntry();    paxHeaders.put(encoding,    currEntry);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
212	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  isCurrentEntry()?  getCurrentEntry()  :  null;  paxHeaders.put(encoding,  currEntry);  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  isCurrentEntry()?  getCurrentEntry()  :  null;  paxHeaders.put(encoding,  currEntry);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  isCurrentEntry()?  getCurrentEntry()  :  null;  paxHeaders.put(encoding,  currEntry);	  TarArchiveEntry    currEntry    =    getCurrentEntry();    paxHeaders.put(encoding,    currEntry);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
213	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  paxHeaders.put(encoding,  currEntry.getName());  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  paxHeaders.put(encoding,  currEntry.getName());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  paxHeaders.put(encoding,  currEntry.getName());	  TarArchiveEntry    currEntry    =    getCurrentEntry();    paxHeaders.put(encoding,    currEntry);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
214	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  paxHeaders.put(encoding,  currEntry);  [CE]  illegal  start  of  type  [FE]                                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  paxHeaders.put(encoding,  currEntry);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  TarArchiveEntry  currEntry  =  getCurrentEntry();  paxHeaders.put(encoding,  currEntry);	  TarArchiveEntry    currEntry    =    getCurrentEntry();    paxHeaders.put(encoding,    currEntry);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
215	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntryInput();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntryInput();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntryInput();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
216	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry(0);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry(0);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry(0);	  TarArchiveEntry    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
217	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry(null);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry(null);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry(null);	  TarArchiveEntry    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
218	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry().getValue();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry().getValue();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry().getValue();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
219	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry(n);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry(n);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry(n);	  TarArchiveEntry    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
220	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(TarArchiveEntry.class);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(TarArchiveEntry.class);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(TarArchiveEntry.class);	  final    Map    <    String,    String>    headers    =    parseHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
221	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(TarArchiveEntry.this);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(TarArchiveEntry.this);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(TarArchiveEntry.this);	  final    Map    <    String,    String>    headers    =    parseHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
222	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers.put(currEntry.getName(),  currEntry.getName());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers.put(currEntry.getName(),  currEntry.getName());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  headers.put(currEntry.getName(),  currEntry.getName());	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
223	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
224	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
225	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  >=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  >=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  >=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
226	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  this.headers);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  this.headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  this.headers);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    headers);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
227	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  file);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  file);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  file);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    headers);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
228	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  record);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  record);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  record);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    headers);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
229	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry  ==  null)  {  skipPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry  ==  null)  {  skipPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry  ==  null)  {  skipPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry    ==    null)    {    skipPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
230	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  this.getCurrentEntry();  if(currEntry  ==  null)  {  skipPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  this.getCurrentEntry();  if(currEntry  ==  null)  {  skipPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  this.getCurrentEntry();  if(currEntry  ==  null)  {  skipPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry    ==    null)    {    skipPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
231	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getKey(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
232	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getKey(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
233	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers.put(currEntry.getKey(),  currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers.put(currEntry.getKey(),  currEntry.getValue());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  headers.put(currEntry.getKey(),  currEntry.getValue());	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getKey(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
234	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry().getValue();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry().getValue();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry().getValue();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getKey(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
235	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(this,  headers);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(this,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(this,  headers);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
236	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  record);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  record);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  record);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
237	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  cache);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  cache);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  cache);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
238	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  file);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  file);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  file);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
239	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  encoding);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  encoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
240	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  headers,  true);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  headers,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  headers,  true);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
241	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(paxHeaders);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(paxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(paxHeaders);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
242	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
243	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
244	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers.put(currEntry.getName(),  currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers.put(currEntry.getName(),  currEntry.getValue());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  headers.put(currEntry.getName(),  currEntry.getValue());	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
245	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
246	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getKey());  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getKey());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getKey());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
247	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(false,  true);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(false,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(false,  true);	  Map    <    String,    String>    headers    =    parsePaxHeaders(false,    true);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
248	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  true);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  true);	  Map    <    String,    String>    headers    =    parsePaxHeaders(true,    true);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
249	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(false,  null);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(false,  null);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(false,  null);	  Map    <    String,    String>    headers    =    parsePaxHeaders(true,    true);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
250	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(getCurrentEntry());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(getCurrentEntry());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(getCurrentEntry());	  Map    <    String,    String>    headers    =    parseHeaders(getCurrentEntry());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
251	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(getNextEntry());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(getNextEntry());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(getNextEntry());	  Map    <    String,    String>    headers    =    parseHeaders(getCurrentEntry());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
252	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(getLastEntry());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(getLastEntry());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(getLastEntry());	  Map    <    String,    String>    headers    =    parseHeaders(getCurrentEntry());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
253	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(getCurrentEntry(),  true);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(getCurrentEntry(),  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(getCurrentEntry(),  true);	  Map    <    String,    String>    headers    =    parseHeaders(getCurrentEntry());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
254	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(getCurrentEntry());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(getCurrentEntry());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(getCurrentEntry());	  Map    <    String,    String>    headers    =    parseHeaders(getCurrentEntry());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
255	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(getCurrentEntry(),  currEntry);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(getCurrentEntry(),  currEntry);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(getCurrentEntry(),  currEntry);	  Map    <    String,    String>    headers    =    parseHeaders(getCurrentEntry());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
256	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.class,  headers);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.class,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.class,  headers);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(TarArchiveEntry.class);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
257	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.class,  encoding);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.class,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.class,  encoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(TarArchiveEntry.class);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
258	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.class,  currEntry.getName());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.class,  currEntry.getName());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.class,  currEntry.getName());	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(TarArchiveEntry.class);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
259	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.SOURCE);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.SOURCE);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.SOURCE);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(TarArchiveEntry.class);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
260	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.class,  currEntry.length);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.class,  currEntry.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.class,  currEntry.length);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(TarArchiveEntry.class);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
261	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
262	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers  =  currEntry.getPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers  =  currEntry.getPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers  =  currEntry.getPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
263	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
264	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getPaxHeaders();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getPaxHeaders();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
265	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
266	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  is.parsePaxHeaders(this.zipEncoding);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  is.parsePaxHeaders(this.zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  is.parsePaxHeaders(this.zipEncoding);	  Map    <    String,    String>    headers    =    is.parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
267	[BUG]  [BUGGY]  if(encoding!=  null)  {  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  encoding);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(encoding!=  null)  {  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  encoding);  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(encoding!=  null)  {  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  encoding);  }	  Map    <    String,    String>    headers    =    parsePaxHeaders(true,    encoding);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
268	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  ZipEncoding.UTF8);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  ZipEncoding.UTF8);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(true,  ZipEncoding.UTF8);	  Map    <    String,    String>    headers    =    parsePaxHeaders(true,    encoding);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
269	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(false,  encoding);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(false,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(false,  encoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(true,    encoding);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
270	[BUG]  [BUGGY]  map  <  String,  String>  headers  =  parsePaxHeaders(false,  true);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  map  <  String,  String>  headers  =  parsePaxHeaders(false,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	map  <  String,  String>  headers  =  parsePaxHeaders(false,  true);	  Map    <    String,    String>    headers    =    parsePaxHeaders(true,    true);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
271	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  headers);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  headers);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    headers);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
272	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(encoding);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(encoding);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
273	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers.size());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers.size());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers.size());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
274	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
275	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getParent();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getParent();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getParent();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getParent();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
276	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getParent();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getParent();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getParent();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getParent();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
277	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getNext();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getNext();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getNext();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getParent();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
278	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers  ==  null)  {  headers  =  currEntry.getParent();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers  ==  null)  {  headers  =  currEntry.getParent();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers  ==  null)  {  headers  =  currEntry.getParent();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getParent();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
279	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  paxHeaders(currEntry.getKey(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  paxHeaders(currEntry.getKey(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  paxHeaders(currEntry.getKey(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    paxHeaders(currEntry.getKey(),    currEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
280	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  is.getCurrentEntry();  paxHeaders(currEntry.getKey(),  currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  is.getCurrentEntry();  paxHeaders(currEntry.getKey(),  currEntry.getValue());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  is.getCurrentEntry();  paxHeaders(currEntry.getKey(),  currEntry.getValue());	  TarArchiveEntry    currEntry    =    getCurrentEntry();    paxHeaders(currEntry.getKey(),    currEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
281	[BUG]  [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getKey(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
282	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getKey(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
283	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  headers);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  headers);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
284	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders()  +  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders()  +  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders()  +  1);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
285	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  headerSize);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  headerSize);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  headerSize);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
286	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  record);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  record);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  record);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    encoding);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
287	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  ZipEncoding.UTF8);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  ZipEncoding.UTF8);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  ZipEncoding.UTF8);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    encoding);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
288	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(false, " ");  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(false, " ");  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(false, " ");	  Map    <    String,    String>    headers    =    parseHeaders(true);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
289	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  encoding.length);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  encoding.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  encoding.length);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
290	[BUG]  [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
291	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
292	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry(null);  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry(null);  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry(null);  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
293	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  getHeaders();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  getHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  getHeaders();	  final    Map    <    String,    String>    headers    =    parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
294	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  this.headers);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  this.headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  this.headers);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
295	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  headers,  encoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  headers,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  headers,  encoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
296	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  headers,  hasHitEOF);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  headers,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
297	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getHeaders();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
298	[BUG]  [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
299	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  is.getCurrentEntry();  this.paxHeaders  =  currEntry.getPaxHeaders();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  is.getCurrentEntry();  this.paxHeaders  =  currEntry.getPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  is.getCurrentEntry();  this.paxHeaders  =  currEntry.getPaxHeaders();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    this.paxHeaders    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
300	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  findCurrentEntry();  this.paxHeaders  =  currEntry.getPaxHeaders();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  findCurrentEntry();  this.paxHeaders  =  currEntry.getPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  findCurrentEntry();  this.paxHeaders  =  currEntry.getPaxHeaders();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    this.paxHeaders    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
301	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  this.paxHeaders  =  currEntry.getPaxHeaders();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  this.paxHeaders  =  currEntry.getPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getNextEntry();  this.paxHeaders  =  currEntry.getPaxHeaders();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    this.paxHeaders    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
302	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  this.paxHeaders  =  currEntry.computePaxHeaders();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  this.paxHeaders  =  currEntry.computePaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  this.paxHeaders  =  currEntry.computePaxHeaders();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    this.paxHeaders    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
303	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(currEntry,  true);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(currEntry,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(currEntry,  true);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    true);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
304	[BUG]  [BUGGY]  map  <  String,  String>  headers  =  parsePaxHeaders(tr,  false);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  map  <  String,  String>  headers  =  parsePaxHeaders(tr,  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	map  <  String,  String>  headers  =  parsePaxHeaders(tr,  false);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    true);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
305	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
306	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry  ==  null)  {  skipPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry  ==  null)  {  skipPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry  ==  null)  {  skipPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry    ==    null)    {    skipPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
307	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry(0);  if(currEntry  ==  null)  {  skipPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry(0);  if(currEntry  ==  null)  {  skipPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry(0);  if(currEntry  ==  null)  {  skipPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry    ==    null)    {    skipPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
308	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseRecords(encoding);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseRecords(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseRecords(encoding);	  Map    <    String,    String>    headers    =    parseHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
309	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  this.headers);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  this.headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(this,  this.headers);	  Map    <    String,    String>    headers    =    parseHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
310	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  getPaxHeaders());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  getPaxHeaders());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(this,  getPaxHeaders());	  Map    <    String,    String>    headers    =    parseHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
311	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  false);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  false);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    false);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
312	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(currEntry,  false);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(currEntry,  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(currEntry,  false);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    false);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
313	[BUG]  [BUGGY]  map  <  String,  String>  headers  =  parsePaxHeaders(tr,  true);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  map  <  String,  String>  headers  =  parsePaxHeaders(tr,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	map  <  String,  String>  headers  =  parsePaxHeaders(tr,  true);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    false);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
314	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  getZipEncoding().parsePaxHeaders(encoding);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  getZipEncoding().parsePaxHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  getZipEncoding().parsePaxHeaders(encoding);	  Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
315	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.this.headers);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.this.headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.this.headers);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(TarArchiveEntry.class);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
316	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(tr,  headerSize);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(tr,  headerSize);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(tr,  headerSize);	  Map    <    String,    String>    headers    =    parseHeaders(tr);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
317	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(getCurrentEntry(),  headers);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(getCurrentEntry(),  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(getCurrentEntry(),  headers);	  Map    <    String,    String>    headers    =    parseHeaders(getCurrentEntry());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
318	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  getCurrentPaxHeaders();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  getCurrentPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  getCurrentPaxHeaders();	  Map    <    String,    String>    headers    =    getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
319	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(is);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(is);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(is);	  Map    <    String,    String>    headers    =    is.parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
320	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  this.zipEncoding.parsePaxHeaders(is);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  this.zipEncoding.parsePaxHeaders(is);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  this.zipEncoding.parsePaxHeaders(is);	  Map    <    String,    String>    headers    =    is.parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
321	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  encoding.parsePaxHeaders(is);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  encoding.parsePaxHeaders(is);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  encoding.parsePaxHeaders(is);	  Map    <    String,    String>    headers    =    is.parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
322	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextCurrentEntry();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getNextCurrentEntry();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getNextCurrentEntry();	  TarArchiveEntry    currEntry    =    getNextEntry();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
323	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getPaxEntry();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getPaxEntry();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getPaxEntry();	  TarArchiveEntry    currEntry    =    getNextEntry();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
324	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getParentEntry();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getParentEntry();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getParentEntry();	  TarArchiveEntry    currEntry    =    getNextEntry();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
325	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextFile();  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getNextFile();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getNextFile();	  TarArchiveEntry    currEntry    =    getNextEntry();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
326	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(encode);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(encode);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(encode);	  Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
327	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  encoding.parsePaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  encoding.parsePaxHeaders(headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  encoding.parsePaxHeaders(headers);	  Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
328	[BUG]  [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
329	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
330	[BUG]  [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
331	[BUG]  [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
332	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
333	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
334	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getText());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getText());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getText());	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr.getKey());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
335	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getSourceName());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getSourceName());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getSourceName());	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr.getKey());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
336	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getRecord());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getRecord());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getRecord());	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr.getKey());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
337	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getSource());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getSource());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getSource());	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr.getKey());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
338	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  is.readNow();  paxHeaders.put(encoding,  currEntry);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  is.readNow();  paxHeaders.put(encoding,  currEntry);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  is.readNow();  paxHeaders.put(encoding,  currEntry);	  TarArchiveEntry    currEntry    =    getCurrentEntry();    paxHeaders.put(encoding,    currEntry);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
339	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  paxHeaders.put(encoding,  currEntry);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  paxHeaders.put(encoding,  currEntry);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  createCurrentEntry();  paxHeaders.put(encoding,  currEntry);	  TarArchiveEntry    currEntry    =    getCurrentEntry();    paxHeaders.put(encoding,    currEntry);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
340	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  paxHeaders.put(encoding,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  paxHeaders.put(encoding,  zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  paxHeaders.put(encoding,  zipEncoding);	  TarArchiveEntry    currEntry    =    getCurrentEntry();    paxHeaders.put(encoding,    currEntry);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
341	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(zipEncoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(zipEncoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
342	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.zipEncoding.parsePaxHeaders(encoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.zipEncoding.parsePaxHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  this.zipEncoding.parsePaxHeaders(encoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
343	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
344	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry(0);  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry(0);  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry(0);  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
345	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
346	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(currEntry);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(currEntry);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(currEntry);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
347	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(trEncoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(trEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(trEncoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
348	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  is.paxHeaders();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  is.paxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  is.paxHeaders();	  Map    <    String,    String>    headers    =    is.parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
349	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseTarHeaders(zipEncoding);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseTarHeaders(zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseTarHeaders(zipEncoding);	  Map    <    String,    String>    headers    =    parseHeaders(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
350	[BUG]  [BUGGY]  this.headers.paxHeaders  =  new  ArrayList  <  TarArchiveEntry>(headers);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  this.headers.paxHeaders  =  new  ArrayList  <  TarArchiveEntry>(headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	this.headers.paxHeaders  =  new  ArrayList  <  TarArchiveEntry>(headers);	  this.headers.paxHeaders    =    new    ArrayList    <    TarArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
351	[BUG]  [BUGGY]  this.headers.paxHeaders  =  new  ArrayList  <  TarArchiveEntry>(headers.length);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  this.headers.paxHeaders  =  new  ArrayList  <  TarArchiveEntry>(headers.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	this.headers.paxHeaders  =  new  ArrayList  <  TarArchiveEntry>(headers.length);	  this.headers.paxHeaders    =    new    ArrayList    <    TarArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
352	[BUG]  [BUGGY]  this.headers.paxHeaders  =  new  ArrayList  <  TarArchiveEntry>(headers.size());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  this.headers.paxHeaders  =  new  ArrayList  <  TarArchiveEntry>(headers.size());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	this.headers.paxHeaders  =  new  ArrayList  <  TarArchiveEntry>(headers.size());	  this.headers.paxHeaders    =    new    ArrayList    <    TarArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
353	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(recordSize  -  1);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(recordSize  -  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(recordSize  -  1);	  Map    <    String,    String>    headers    =    parseHeaders(recordSize);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
354	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(record,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(record,  hasHitEOF);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(record,  hasHitEOF);	  Map    <    String,    String>    headers    =    parseHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
355	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  handleEOF);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  handleEOF);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  handleEOF);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
356	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  createCurrentEntry();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
357	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntryCount();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntryCount();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntryCount();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
358	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  encoding.parsePaxHeaders();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  encoding.parsePaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  encoding.parsePaxHeaders();	  Map    <    String,    String>    headers    =    encoding.parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
359	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  this.headers);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  this.headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  this.headers);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
360	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  insertHeaders);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  insertHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  insertHeaders);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
361	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  tr);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  tr);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  tr);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    encoding);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
362	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  ZipEncoding.UTF8);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  ZipEncoding.UTF8);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr,  ZipEncoding.UTF8);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    encoding);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
363	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  enr);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  enr);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  enr);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    encoding);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
364	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  getPaxHeadersFromCurrentEntry(encoding);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  getPaxHeadersFromCurrentEntry(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  getPaxHeadersFromCurrentEntry(encoding);	  Map    <    String,    String>    headers    =    getPaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
365	[BUG]  [BUGGY]  map  <  String,  String>  headers  =  parseStringHeaders(true);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  map  <  String,  String>  headers  =  parseStringHeaders(true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	map  <  String,  String>  headers  =  parseStringHeaders(true);	  Map    <    String,    String>    headers    =    parseStringHeaders(false);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
366	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
367	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  getHitEOF());  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  getHitEOF());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  getHitEOF());	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
368	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  super.paxHeaders();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  super.paxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  super.paxHeaders();	  Map    <    String,    String>    headers    =    getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
369	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getKey(),  this);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getKey(),  this);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getKey(),  this);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr.getKey());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
370	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getKey(),  cache);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getKey(),  cache);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getKey(),  cache);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr.getKey());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
371	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getKey(),  zipEncoding);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getKey(),  zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getKey(),  zipEncoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr.getKey());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
372	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  null);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  null);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  null);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
373	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  compression);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  compression);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  compression);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
374	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  fileEncoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  fileEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  fileEncoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
375	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.class,  currEntry);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.class,  currEntry);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.class,  currEntry);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(TarArchiveEntry.class);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
376	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.class,  headers);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.class,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(TarArchiveEntry.class,  headers);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(TarArchiveEntry.class);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
377	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers.length  -  2);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers.length  -  2);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers.length  -  2);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
378	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers.length,  headers.length);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers.length,  headers.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers.length,  headers.length);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
379	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers.length  -  1,  headers.length);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers.length  -  1,  headers.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers.length  -  1,  headers.length);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
380	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  is.getCurrentEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  is.getCurrentEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  is.getCurrentEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
381	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  headers);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  headers);	  Map    <    String,    String>    headers    =    parsePaxHeaders(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
382	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  record.getCharset());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  record.getCharset());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  record.getCharset());	  Map    <    String,    String>    headers    =    parsePaxHeaders(record.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
383	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  fileEncoding);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  fileEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  fileEncoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
384	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  headers,  encoding);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  headers,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(this,  headers,  encoding);	  Map    <    String,    String>    headers    =    parseHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
385	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  headers,  hasHitEOF);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(this,  headers,  hasHitEOF);	  Map    <    String,    String>    headers    =    parseHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
386	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  headers,  true);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  headers,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(this,  headers,  true);	  Map    <    String,    String>    headers    =    parseHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
387	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  headers,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  headers,  zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(this,  headers,  zipEncoding);	  Map    <    String,    String>    headers    =    parseHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
388	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  headers,  null);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  headers,  null);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(this,  headers,  null);	  Map    <    String,    String>    headers    =    parseHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
389	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  headers,  fileEncoding);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  headers,  fileEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(this,  headers,  fileEncoding);	  Map    <    String,    String>    headers    =    parseHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
390	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(headers,  zipEncoding);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(headers,  zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(headers,  zipEncoding);	  Map    <    String,    String>    headers    =    parseHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
391	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  TarArchiveEntry  currEntry  =  getCurrentEntry();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
392	[BUG]  [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
393	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  headers,  false);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  headers,  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  headers,  false);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
394	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  headers,  null);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  headers,  null);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  headers,  null);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
395	[BUG]  [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getKey());  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getKey());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getKey());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
396	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  this.getHeaders();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  this.getHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  this.getHeaders();	  Map    <    String,    String>    headers    =    this.parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
397	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  this.zipHeaders();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  this.zipHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  this.zipHeaders();	  Map    <    String,    String>    headers    =    this.parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
398	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  paxHeaders(currEntry.getKey(),  currEntry.getName());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  paxHeaders(currEntry.getKey(),  currEntry.getName());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  paxHeaders(currEntry.getKey(),  currEntry.getName());	  TarArchiveEntry    currEntry    =    getCurrentEntry();    paxHeaders(currEntry.getKey(),    currEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
399	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  zipEncoding.parseHeaders(encoding);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  zipEncoding.parseHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  zipEncoding.parseHeaders(encoding);	  Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
400	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  headers.getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  headers.getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  headers.getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getKey(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
401	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(false,  false);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(false,  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(false,  false);	  Map    <    String,    String>    headers    =    parsePaxHeaders(true,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
402	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  zipEncoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    encoding);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
403	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  buffer);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  buffer);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  buffer);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    encoding);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
404	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  str);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  str);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  str);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    encoding);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
405	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(4);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(4);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(4);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
406	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  file);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  file);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  file);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    encoding);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
407	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  reccord);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  reccord);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  reccord);	  Map    <    String,    String>    headers    =    parsePaxHeaders(record,    encoding);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
408	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(getFirstEntry());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(getFirstEntry());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(getFirstEntry());	  Map    <    String,    String>    headers    =    parseHeaders(getCurrentEntry());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
409	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(getPaxHeaders());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(getPaxHeaders());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(getPaxHeaders());	  Map    <    String,    String>    headers    =    parseHeaders(getCurrentEntry());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
410	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextHeaderEntry();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getNextHeaderEntry();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getNextHeaderEntry();	  TarArchiveEntry    currEntry    =    getNextEntry();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
411	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextHeaders();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getNextHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  getNextHeaders();	  TarArchiveEntry    currEntry    =    getNextEntry();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
412	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getKey());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getKey());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(tr.getKey());	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(tr);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
413	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders());	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
414	[BUG]  [BUGGY]  this.headers.paxHeaders  =  new  ArrayList  <  TarArchiveEntry>(this.headers.size());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  this.headers.paxHeaders  =  new  ArrayList  <  TarArchiveEntry>(this.headers.size());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	this.headers.paxHeaders  =  new  ArrayList  <  TarArchiveEntry>(this.headers.size());	  this.headers.paxHeaders    =    new    ArrayList    <    TarArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
415	[BUG]  [BUGGY]  this.headers.paxHeaders  =  new  ArrayList  <  TarArchiveEntry>(this.headers);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  this.headers.paxHeaders  =  new  ArrayList  <  TarArchiveEntry>(this.headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	this.headers.paxHeaders  =  new  ArrayList  <  TarArchiveEntry>(this.headers);	  this.headers.paxHeaders    =    new    ArrayList    <    TarArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
416	[BUG]  [BUGGY]  this.headers.paxHeaders  =  new  ArrayList  <  TarArchiveEntry>(4);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  this.headers.paxHeaders  =  new  ArrayList  <  TarArchiveEntry>(4);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	this.headers.paxHeaders  =  new  ArrayList  <  TarArchiveEntry>(4);	  this.headers.paxHeaders    =    new    ArrayList    <    TarArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
417	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(padding,  false);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(padding,  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(padding,  false);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    false);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
418	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(recordSize);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(recordSize);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(recordSize);	  final    Map    <    String,    String>    headers    =    parseHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
419	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(record.getHeaders());  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(record.getHeaders());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parseHeaders(record.getHeaders());	  Map    <    String,    String>    headers    =    parseHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
420	[BUG]  [BUGGY]  map  <  String,  String>  headers  =  parsePaxHeaders(false,  encoding);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  map  <  String,  String>  headers  =  parsePaxHeaders(false,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	map  <  String,  String>  headers  =  parsePaxHeaders(false,  encoding);	  Map    <    String,    String>    headers    =    parsePaxHeaders(true,    encoding);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
421	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(padding,  true);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(padding,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(padding,  true);	  Map    <    String,    String>    headers    =    parsePaxHeaders(tr,    true);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
422	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  zipEncoding;  paxHeaders.put(encoding,  currEntry);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  zipEncoding;  paxHeaders.put(encoding,  currEntry);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  zipEncoding;  paxHeaders.put(encoding,  currEntry);	  TarArchiveEntry    currEntry    =    getCurrentEntry();    paxHeaders.put(encoding,    currEntry);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
423	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  zipEncoding?  getCurrentEntry()  :  null;  paxHeaders.put(encoding,  currEntry);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  zipEncoding?  getCurrentEntry()  :  null;  paxHeaders.put(encoding,  currEntry);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  zipEncoding?  getCurrentEntry()  :  null;  paxHeaders.put(encoding,  currEntry);	  TarArchiveEntry    currEntry    =    getCurrentEntry();    paxHeaders.put(encoding,    currEntry);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
424	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  zipEncoding.parseHeaders(headers);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  zipEncoding.parseHeaders(headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  zipEncoding.parseHeaders(headers);	  Map    <    String,    String>    headers    =    parseHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
425	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  is.getCurrentEntry();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  is.getCurrentEntry();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  is.getCurrentEntry();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
426	[BUG]  [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getParent();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getParent();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getParent();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getParent();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
427	[BUG]  [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getNext();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getNext();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getNext();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getParent();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
428	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  headers.getCurrentEntry();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  headers.getCurrentEntry();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	TarArchiveEntry  currEntry  =  headers.getCurrentEntry();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getParent();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
429	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  getPaxHeaders(encoding,  zipEncoding);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  getPaxHeaders(encoding,  zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  getPaxHeaders(encoding,  zipEncoding);	  Map    <    String,    String>    headers    =    getPaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
430	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  zipEncoding.getPaxHeaders();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  zipEncoding.getPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Map  <  String,  String>  headers  =  zipEncoding.getPaxHeaders();	  Map    <    String,    String>    headers    =    getPaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
