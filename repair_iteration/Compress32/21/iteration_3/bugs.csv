bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len  +  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len  +  1);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
2	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  len);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  len);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
3	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  read);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  read);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
4	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  read);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  read);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
5	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  0);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  0);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
6	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  ch);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  ch);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
7	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len,  read);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len,  read);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
8	[BUG]  [BUGGY]  read  =  IOUtils.readFully(i,  restLen);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  read  =  IOUtils.readFully(i,  restLen);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	read  =  IOUtils.readFully(i,  restLen);	  read    =    IOUtils.readFully(i,    i);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
9	[BUG]  [BUGGY]  read  =  IOUtils.readFully(i,  read);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  read  =  IOUtils.readFully(i,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	read  =  IOUtils.readFully(i,  read);	  read    =    IOUtils.readFully(i,    i);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
10	[BUG]  [BUGGY]  read  =  IOUtils.readFully(i,  rest);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  read  =  IOUtils.readFully(i,  rest);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	read  =  IOUtils.readFully(i,  rest);	  read    =    IOUtils.readFully(i,    i);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
11	[BUG]  [BUGGY]  read  =  IOUtils.readFully(i,  len);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  read  =  IOUtils.readFully(i,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	read  =  IOUtils.readFully(i,  len);	  read    =    IOUtils.readFully(i,    i);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
12	[BUG]  [BUGGY]  read  =  IOUtils.readFully(i,  ch);  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  read  =  IOUtils.readFully(i,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	read  =  IOUtils.readFully(i,  ch);	  read    =    IOUtils.readFully(i,    i);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
13	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readInputStream(i);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  IOUtils.readInputStream(i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  IOUtils.readInputStream(i);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
14	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readFully(i,  i);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  IOUtils.readFully(i,  i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  IOUtils.readFully(i,  i);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
15	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readInputStream(i,  read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  IOUtils.readInputStream(i,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  IOUtils.readInputStream(i,  read);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
16	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readFully(i);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  IOUtils.readFully(i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  IOUtils.readFully(i);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
17	[BUG]  [BUGGY]  InputStream  coll  =  headers.readInputStream();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  headers.readInputStream();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  headers.readInputStream();	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
18	[BUG]  [BUGGY]  InputStream  coll  =  i.readFully();  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  i.readFully();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  i.readFully();	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
19	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(256,  read);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(256,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(256,  read);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(256);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
20	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(0,  read);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(0,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(0,  read);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(256);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
21	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(16);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(16);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(16);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(256);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
22	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(512);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(512);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(512);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(256);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
23	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.read);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(i.read);	  InputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
24	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read,  ch);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(read,  ch);	  InputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
25	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(i);	  InputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
26	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read,  0);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read,  0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(read,  0);	  InputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
27	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.length  -  1);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.length  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.length  -  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length    -    1);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
28	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  /  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  /  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  /  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length    -    1);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
29	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.length  +  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.length  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.length  +  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length    +    1);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
30	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Read.length  +  1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Read.length  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Read.length  +  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length    +    1);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
31	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  *  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  *  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  *  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length    +    1);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
32	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  ByteArrayOutputStream(read);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  ByteArrayOutputStream(read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  ByteArrayOutputStream(read);	  IntegerArrayOutputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
33	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  ByteArrayOutputStream(0);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  ByteArrayOutputStream(0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  ByteArrayOutputStream(0);	  IntegerArrayOutputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
34	[BUG]  [BUGGY]  ch  =  IOUtils.readFully(i,  read);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ch  =  IOUtils.readFully(i,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ch  =  IOUtils.readFully(i,  read);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
35	[BUG]  [BUGGY]  ch  =  IOUtils.readFully(i,  i);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ch  =  IOUtils.readFully(i,  i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ch  =  IOUtils.readFully(i,  i);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
36	[BUG]  [BUGGY]  ch  =  IOUtils.readFully(i,  headers);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ch  =  IOUtils.readFully(i,  headers);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ch  =  IOUtils.readFully(i,  headers);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
37	[BUG]  [BUGGY]  ch  =  headers.read();  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ch  =  headers.read();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ch  =  headers.read();	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
38	[BUG]  [BUGGY]  ch  =  IOUtils.readFully(i);  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ch  =  IOUtils.readFully(i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ch  =  IOUtils.readFully(i);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
39	[BUG]  [BUGGY]  ch  =  IOUtils.readString(i,  headers);  [CE]  illegal  start  of  type  [FE]                                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ch  =  IOUtils.readString(i,  headers);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ch  =  IOUtils.readString(i,  headers);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
40	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  -  2);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  -  2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  -  2);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read    -    1);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
41	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read  -  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read  -  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read    -    1);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
42	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len  -  1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len  -  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read    -    1);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
43	[BUG]  [BUGGY]  Integer  i  =  headers.get(i.getKeyword(),  read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.get(i.getKeyword(),  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.get(i.getKeyword(),  read);	  Integer    i    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
44	[BUG]  [BUGGY]  Integer  i  =  headers.get(i.getKeyword()  -  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.get(i.getKeyword()  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.get(i.getKeyword()  -  1);	  Integer    i    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
45	[BUG]  [BUGGY]  Integer  i  =  headers.get(ch.getKeyword());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.get(ch.getKeyword());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.get(ch.getKeyword());	  Integer    i    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
46	[BUG]  [BUGGY]  Integer  i  =  headers.get(i.getValue());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.get(i.getValue());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.get(i.getValue());	  Integer    i    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
47	[BUG]  [BUGGY]  Integer  i  =  headers.get(i.getLength());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.get(i.getLength());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.get(i.getLength());	  Integer    i    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
48	[BUG]  [BUGGY]  Integer  i  =  headers.get(i.getKeyword()  +  read);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.get(i.getKeyword()  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.get(i.getKeyword()  +  read);	  Integer    i    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
49	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i,  len);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(i,  len);	  InputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
50	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read,  len  +  1);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read,  len  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(read,  len  +  1);	  InputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
51	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read,  len  -  read);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read,  len  -  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(read,  len  -  read);	  InputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
52	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read,  read);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(read,  read);	  InputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
53	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(in,  len);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(in,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(in,  len);	  InputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
54	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read,  len,  read);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read,  len,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(read,  len,  read);	  InputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
55	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  read);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  read);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
56	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
57	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  +  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  +  1);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
58	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
59	[BUG]  [BUGGY]  Integer  i  =  headers.readInt(ch);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readInt(ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readInt(ch);	  Integer    i    =    headers.readInt(len);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
60	[BUG]  [BUGGY]  Integer  i  =  headers.readInt(ch,  read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readInt(ch,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readInt(ch,  read);	  Integer    i    =    headers.readInt(len);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
61	[BUG]  [BUGGY]  Integer  i  =  headers.readInt(0,  read);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readInt(0,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readInt(0,  read);	  Integer    i    =    headers.readInt(len);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
62	[BUG]  [BUGGY]  Integer  i  =  headers.getInt(ch);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.getInt(ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.getInt(ch);	  Integer    i    =    headers.readInt(len);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
63	[BUG]  [BUGGY]  Integer  i  =  headers.readInt(ch,  len);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readInt(ch,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readInt(ch,  len);	  Integer    i    =    headers.readInt(len);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
64	[BUG]  [BUGGY]  Integer  i  =  headers.readInt(0,  len);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readInt(0,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readInt(0,  len);	  Integer    i    =    headers.readInt(len);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
66	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
67	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
68	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(!hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(!hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(!hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
69	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  while((  ch  =  i.read())!=  -1)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	while((  ch  =  i.read())!=  -1)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
70	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
71	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  len);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
72	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getCharsets());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getCharsets());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getCharsets());	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
73	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getCharset());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getCharset());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getCharset());	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
74	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getEncoding());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getEncoding());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getEncoding());	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
75	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  read);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
76	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(len);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayInputStream(len);	  InputStream    coll    =    new    ByteArrayInputStream();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
77	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(read,  len);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(read,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayInputStream(read,  len);	  InputStream    coll    =    new    ByteArrayInputStream();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
78	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(ch);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayInputStream(ch);	  InputStream    coll    =    new    ByteArrayInputStream();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
79	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
80	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
81	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
82	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(record);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(record);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(record);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
83	[BUG]  [BUGGY]  ch  =  coll.toString(CharsetNames.UTF_8)+  1;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ch  =  coll.toString(CharsetNames.UTF_8)+  1;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ch  =  coll.toString(CharsetNames.UTF_8)+  1;	  ch    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
84	[BUG]  [BUGGY]  ch  =  coll.toString(CharsetNames.UTF_8)+  read;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ch  =  coll.toString(CharsetNames.UTF_8)+  read;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ch  =  coll.toString(CharsetNames.UTF_8)+  read;	  ch    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
85	[BUG]  [BUGGY]  ch  =  coll.toString(CharsetNames.US_ASCII);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ch  =  coll.toString(CharsetNames.US_ASCII);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ch  =  coll.toString(CharsetNames.US_ASCII);	  ch    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
86	[BUG]  [BUGGY]  ch  =  headers.toString(CharsetNames.UTF_8);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ch  =  headers.toString(CharsetNames.UTF_8);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ch  =  headers.toString(CharsetNames.UTF_8);	  ch    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
87	[BUG]  [BUGGY]  ch  =  coll.toString(CharsetNames.UTF_8)+  2;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ch  =  coll.toString(CharsetNames.UTF_8)+  2;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ch  =  coll.toString(CharsetNames.UTF_8)+  2;	  ch    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
88	[BUG]  [BUGGY]  ch  =  col.toString(CharsetNames.UTF_8)+  1;  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ch  =  col.toString(CharsetNames.UTF_8)+  1;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ch  =  col.toString(CharsetNames.UTF_8)+  1;	  ch    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
89	[BUG]  [BUGGY]  ch  =  coll.toString(CharsetNames.UTF_4);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ch  =  coll.toString(CharsetNames.UTF_4);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ch  =  coll.toString(CharsetNames.UTF_4);	  ch    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
90	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  +  1);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  +  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
91	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  -  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  -  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
92	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  -  len);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  -  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  -  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
93	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  +  len);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  +  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  +  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
94	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  read);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
95	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  len  +  read);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  len  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  len  +  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    len);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
96	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  len  +  1);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  len  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  len  +  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    len);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
97	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  len  -  read);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  len  -  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  len  -  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    len);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
98	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  ch);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  ch);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    len);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
99	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  len);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    len);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
100	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(255,  len);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(255,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(255,  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    len);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
101	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(ch);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(ch);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
102	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(length  +  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(length  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(length  +  1);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
103	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(length,  read);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(length,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(length,  read);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
104	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(in,  read);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(in,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(in,  read);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
105	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  read);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
106	[BUG]  [BUGGY]  final  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
107	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(128);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(128);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(128);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(128);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
108	[BUG]  [BUGGY]  final  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
109	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  1);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
110	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len,  read);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len,  read);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
111	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len  -  read);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len  -  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len  -  read);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
112	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len  +  1);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
113	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(0,  len);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(0,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(0,  len);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
114	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  len);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    len);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
115	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len  +  read);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len  +  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    len);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
116	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len  -  read);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len  -  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len  -  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    len);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
117	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  len);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    len);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
118	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len  +  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len  +  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    len);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
119	[BUG]  [BUGGY]  byte[]  coll  =  headers.toArray(new  byte[len]);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.toArray(new  byte[len]);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.toArray(new  byte[len]);	  byte[]    coll    =    headers.toArray(new    String[len]);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
120	[BUG]  [BUGGY]  byte[]  coll  =  headers.toArray(new  byte[read]);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.toArray(new  byte[read]);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.toArray(new  byte[read]);	  byte[]    coll    =    headers.toArray(new    String[len]);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
121	[BUG]  [BUGGY]  byte[]  coll  =  headers.toArray(new  String[read]);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.toArray(new  String[read]);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.toArray(new  String[read]);	  byte[]    coll    =    headers.toArray(new    String[len]);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
122	[BUG]  [BUGGY]  byte[]  coll  =  headers.toArray(new  String[len  +  read]);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.toArray(new  String[len  +  read]);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.toArray(new  String[len  +  read]);	  byte[]    coll    =    headers.toArray(new    String[len]);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
123	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read(),  read);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read(),  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read(),  read);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
124	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read()  -  1);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read()  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read()  -  1);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
125	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read(),  len);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read(),  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read(),  len);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
126	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read()  +  read);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read()  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read()  +  read);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
127	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read()  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read()  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read()  +  1);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
128	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read()  +  len);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read()  +  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read()  +  len);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
129	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getMask());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getMask());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getMask());	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
130	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  read);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
131	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
132	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  read);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
133	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch));  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch));  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch));	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
134	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
135	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
136	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(16);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(16);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(16);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
137	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256L);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256L);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256L);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
138	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  read);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
139	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(long.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(long.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(long.MAX_VALUE);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
140	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(intValue);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(intValue);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(intValue);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
141	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Byte.MAX_VALUE,  read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Byte.MAX_VALUE,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Byte.MAX_VALUE,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
142	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(byte.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(byte.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(byte.MAX_VALUE);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
143	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  read  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  read  +  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len,    read);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
144	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE,  read);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE,  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len,    read);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
145	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  read,  ch);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  read,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  read,  ch);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len,    read);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
146	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  read  -  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  read  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  read  -  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len,    read);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
147	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  read,  headers);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  read,  headers);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  read,  headers);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len,    read);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
148	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.read(),  read);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.read(),  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(i.read(),  read);	  InputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
149	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.read(),  len);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.read(),  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(i.read(),  len);	  InputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
150	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.read()  -  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.read()  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(i.read()  -  1);	  InputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
151	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  read);	  InputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
152	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  1);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  1);	  InputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
153	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(record.read());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(record.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(record.read());	  InputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
154	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(long.parseLong(ch));  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(long.parseLong(ch));  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(long.parseLong(ch));	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.parseLong(ch));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
155	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  0);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  0);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.parseLong(ch));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
156	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch)+  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch)+  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch)+  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.parseLong(ch));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
157	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  i);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  i);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.parseLong(ch));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
158	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  read);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.parseLong(ch));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
159	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Util.parseLong(ch));  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Util.parseLong(ch));  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Util.parseLong(ch));	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.parseLong(ch));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
160	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Utils.parseLong(ch));  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Utils.parseLong(ch));  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Utils.parseLong(ch));	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.parseLong(ch));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
161	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  2);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  2);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read    +    1);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
162	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  1,  len);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  1,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  1,  len);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read    +    1);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
163	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read  +  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read  +  1);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read    +    1);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
164	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  len);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
165	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len  +  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len  +  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
166	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len  -  read);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len  -  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len  -  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
167	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
168	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  0,  len);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  0,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  0,  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
169	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(in.read(),  read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(in.read(),  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(in.read(),  read);	  InputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
170	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(in,  i.read());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(in,  i.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(in,  i.read());	  InputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
171	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(in.read()  +  read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(in.read()  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(in.read()  +  read);	  InputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
172	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(in.read()  -  1);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(in.read()  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(in.read()  -  1);	  InputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
173	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256  *  read);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256  *  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256  *  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256    -    read);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
174	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256  -  read,  len);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256  -  read,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256  -  read,  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256    -    read);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
175	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  -  256);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  -  256);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  -  256);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256    -    read);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
176	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256  -  read  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256  -  read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256  -  read  +  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256    -    read);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
177	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  len);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  len);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
178	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getEncoding());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getEncoding());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getEncoding());	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
179	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getCharset());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getCharset());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getCharset());	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
180	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion());	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
181	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
182	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
183	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
184	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(16,  read);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(16,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(16,  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(16);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
185	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
186	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
187	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
188	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
189	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0L);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0L);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0L);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(32);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
190	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  read.read());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  read.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  read.read());	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    i.read());    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
191	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  i.read());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  i.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  i.read());	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    i.read());    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
192	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  IOUtils.readFully(i));  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  IOUtils.readFully(i));  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  IOUtils.readFully(i));	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    i.read());    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
193	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE);	  InputStream    coll    =    new    ByteArrayOutputStream(0);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
194	[BUG]  [BUGGY]  int  len  =  coll.length()  -  1;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  int  len  =  coll.length()  -  1;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	int  len  =  coll.length()  -  1;	  int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
195	[BUG]  [BUGGY]  int  len  =  coll.length()  +  1;  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  int  len  =  coll.length()  +  1;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	int  len  =  coll.length()  +  1;	  int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
196	[BUG]  [BUGGY]  int  len  =  coll.length()  -  read;  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  int  len  =  coll.length()  -  read;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	int  len  =  coll.length()  -  read;	  int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
197	[BUG]  [BUGGY]  int  len  =  coll.length()  +  read;  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  int  len  =  coll.length()  +  read;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	int  len  =  coll.length()  +  read;	  int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
198	[BUG]  [BUGGY]  int  len  =  coll.length()  -  2;  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  int  len  =  coll.length()  -  2;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	int  len  =  coll.length()  -  2;	  int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
199	[BUG]  [BUGGY]  int  len  =  i.length();  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  int  len  =  i.length();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	int  len  =  i.length();	  int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
200	[BUG]  [BUGGY]  Integer  i  =  headers.readUTF();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readUTF();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readUTF();	  Integer    i    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
201	[BUG]  [BUGGY]  Integer  i  =  headers.readInt()  +  1;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readInt()  +  1;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readInt()  +  1;	  Integer    i    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
202	[BUG]  [BUGGY]  Integer  i  =  headers.readInt()  +  read;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readInt()  +  read;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readInt()  +  read;	  Integer    i    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
203	[BUG]  [BUGGY]  Integer  i  =  headers.getIntValue(ch);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.getIntValue(ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.getIntValue(ch);	  Integer    i    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
204	[BUG]  [BUGGY]  Integer  i  =  headers.readUnsignedInt();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readUnsignedInt();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readUnsignedInt();	  Integer    i    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
205	[BUG]  [BUGGY]  byte[]  coll  =  headers.toArray(new  byte[remainderLen]);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.toArray(new  byte[remainderLen]);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.toArray(new  byte[remainderLen]);	  byte[]    coll    =    headers.toArray(new    String[remainderLen]);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
206	[BUG]  [BUGGY]  byte[]  coll  =  headers.toArray(new  String[remainderLen  +  read]);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.toArray(new  String[remainderLen  +  read]);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.toArray(new  String[remainderLen  +  read]);	  byte[]    coll    =    headers.toArray(new    String[remainderLen]);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
207	[BUG]  [BUGGY]  byte[]  coll  =  headers.toArray(new  String[remainderLen  +  1]);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.toArray(new  String[remainderLen  +  1]);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.toArray(new  String[remainderLen  +  1]);	  byte[]    coll    =    headers.toArray(new    String[remainderLen]);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
208	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  1,  len);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  1,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  1,  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read    +    1);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
209	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  2);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  2);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read    +    1);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
210	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read  +  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read  +  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read    +    1);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
211	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(ch);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(ch);	  InputStream    coll    =    new    ByteArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
212	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(in,  read);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(in,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(in,  read);	  InputStream    coll    =    new    ByteArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
213	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(in);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(in);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(in);	  InputStream    coll    =    new    ByteArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
214	[BUG]  [BUGGY]  InputStream  coll  =  new  BufferedInputStream(read);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  BufferedInputStream(read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  BufferedInputStream(read);	  InputStream    coll    =    new    BufferedInputStream();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
215	[BUG]  [BUGGY]  InputStream  coll  =  new  BufferedInputStream(in);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  BufferedInputStream(in);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  BufferedInputStream(in);	  InputStream    coll    =    new    BufferedInputStream();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
216	[BUG]  [BUGGY]  InputStream  coll  =  new  BufferedInputStream(in,  read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  BufferedInputStream(in,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  BufferedInputStream(in,  read);	  InputStream    coll    =    new    BufferedInputStream();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
217	[BUG]  [BUGGY]  InputStream  coll  =  new  BufferedInputStream(read,  0);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  BufferedInputStream(read,  0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  BufferedInputStream(read,  0);	  InputStream    coll    =    new    BufferedInputStream();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
218	[BUG]  [BUGGY]  InputStream  coll  =  new  BufferedInputStream(read,  len);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  BufferedInputStream(read,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  BufferedInputStream(read,  len);	  InputStream    coll    =    new    BufferedInputStream();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
219	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  +  1);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  +  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    read);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
220	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  -  1);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  -  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    read);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
221	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  -  len);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  -  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  -  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    read);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
222	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  +  2);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  +  2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  +  2);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    read);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
223	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  *  2);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  *  2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  *  2);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    read);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
224	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  +  len);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  +  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  +  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    read);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
225	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()].toString();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
226	[BUG]  [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()].toString();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
227	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()].toString();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
228	[BUG]  [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()].toString();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
229	[BUG]  [BUGGY]  if(headers.length!=  0)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers.length!=  0)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers.length!=  0)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()].toString();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
230	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(!hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(!hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(!hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()].toString();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
231	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(2);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(2);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(1);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
232	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  1);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(1);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
233	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256L,  read);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256L,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256L,  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256L);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
234	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
235	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  2);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  2);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
236	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
237	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  4);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  4);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  4);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
238	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
239	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  3);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  3);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  3);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
240	[BUG]  [BUGGY]  InputStream  coll  =  headers.get(i.getKeyword(),  read);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  headers.get(i.getKeyword(),  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  headers.get(i.getKeyword(),  read);	  InputStream    coll    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
241	[BUG]  [BUGGY]  InputStream  coll  =  headers.get(i.getKey(),  read);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  headers.get(i.getKey(),  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  headers.get(i.getKey(),  read);	  InputStream    coll    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
242	[BUG]  [BUGGY]  InputStream  coll  =  headers.get(i.getValue());  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  headers.get(i.getValue());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  headers.get(i.getValue());	  InputStream    coll    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
243	[BUG]  [BUGGY]  InputStream  coll  =  headers.get(i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  headers.get(i.getCharacterEncoding());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  headers.get(i.getCharacterEncoding());	  InputStream    coll    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
244	[BUG]  [BUGGY]  InputStream  coll  =  headers.get(i.getKeyword()  +  read);  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  headers.get(i.getKeyword()  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  headers.get(i.getKeyword()  +  read);	  InputStream    coll    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
245	[BUG]  [BUGGY]  InputStream  coll  =  headers.get(i.getKey());  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  headers.get(i.getKey());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  headers.get(i.getKey());	  InputStream    coll    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
246	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  len);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    +    read);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
247	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  *  read);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  *  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  *  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    +    read);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
248	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read,  ch);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read,  ch);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    +    read);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
249	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read,  headers.length);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read,  headers.length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read,  headers.length);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    +    read);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
250	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read,  len);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read,  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    +    read);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
251	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  read);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
252	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Integer.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Integer.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Integer.MAX_VALUE);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
253	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(intValue);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(intValue);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(intValue);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
254	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  Long.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  Long.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  Long.MAX_VALUE);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
255	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i,  len);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i,  len);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
256	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(in,  len);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(in,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(in,  len);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
257	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  read);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  read);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
258	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  len  +  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  len  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  len  +  1);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
259	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  read  +  1);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  read  +  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(512,    read);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
260	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  read  -  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  read  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  read  -  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(512,    read);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
261	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  read  -  len);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  read  -  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  read  -  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(512,    read);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
262	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  read  *  2);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  read  *  2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  read  *  2);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(512,    read);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
263	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  read  +  2);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  read  +  2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  read  +  2);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(512,    read);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
264	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
265	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
266	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
267	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
268	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString();  }  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString();  }  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString();  }  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
269	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.getValue().toString();  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.getValue().toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.getValue().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
270	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Locale.getDefault());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Locale.getDefault());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Locale.getDefault());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
271	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(len,  read);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(len,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(len,  read);	  InputStream    coll    =    new    ByteArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
272	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(len  -  read);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(len  -  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(len  -  read);	  InputStream    coll    =    new    ByteArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
273	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  read);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
274	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  -  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  -  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
275	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  len);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
276	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  read);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
277	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
278	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  len);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
279	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  read);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
280	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
281	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  2);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  2);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    -    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
282	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  *  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  *  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  *  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    -    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
283	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  1,  read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  1,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  1,  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    -    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
284	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  1  +  read);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  1  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  1  +  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    -    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
285	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers.length  -  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers.length  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers.length  -  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
286	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers.length  -  read);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers.length  -  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers.length  -  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
287	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers.length  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers.length  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers.length  +  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
288	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers.length  -  1,  headers.length);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers.length  -  1,  headers.length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers.length  -  1,  headers.length);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
289	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers,  i.length);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers,  i.length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers,  i.length);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
290	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers.length,  len);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers.length,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers.length,  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
291	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers,  read);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers,  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
292	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  read);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
293	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  -  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  -  1);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
294	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  len);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  len);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
295	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
296	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  ch);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  ch);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
297	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  -  len);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  -  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  -  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    -    read);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
298	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read  +  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    -    read);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
299	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  len);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    -    read);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
300	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  headers.length);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  headers.length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  headers.length);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    -    read);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
301	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  2);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  2);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    +    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
302	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  /  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  /  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  /  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    +    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
303	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  3);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  3);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  3);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    +    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
304	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  length);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  length);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length,    read);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
305	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  read,  ch);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  read,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  read,  ch);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length,    read);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
306	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  read  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  read  +  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length,    read);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
307	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in,  read);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in,  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length,    read);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
308	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length  +  1);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
309	[BUG]  [BUGGY]  final  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
310	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read,  len);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read,  len);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
311	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read,  read);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read,  read);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
312	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.getEncoding());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.getEncoding());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.getEncoding());	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
313	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.getVersion());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.getVersion());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.getVersion());	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
314	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.getCharsets());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.getCharsets());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.getCharsets());	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
315	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.getAverageCount());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.getAverageCount());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.getAverageCount());	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
316	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(record);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(record);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(record);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(write);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
317	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(write,  len);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(write,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(write,  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(write);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
318	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(write,  read);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(write,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(write,  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(write);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
319	[BUG]  [BUGGY]  byte[]  coll  =  headers.get(i.getKeyword(),  read);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.get(i.getKeyword(),  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.get(i.getKeyword(),  read);	  byte[]    coll    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
320	[BUG]  [BUGGY]  byte[]  coll  =  headers.get(i.getValue());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.get(i.getValue());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.get(i.getValue());	  byte[]    coll    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
321	[BUG]  [BUGGY]  byte[]  coll  =  headers.get(i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.get(i.getCharacterEncoding());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.get(i.getCharacterEncoding());	  byte[]    coll    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
322	[BUG]  [BUGGY]  byte[]  coll  =  headers.get(i.getKeyword(),  len);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.get(i.getKeyword(),  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.get(i.getKeyword(),  len);	  byte[]    coll    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
323	[BUG]  [BUGGY]  byte[]  coll  =  headers.get(i.getKey(),  read);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.get(i.getKey(),  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.get(i.getKey(),  read);	  byte[]    coll    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
324	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  0);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  0);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    0);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
325	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  0);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  0);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    0);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
326	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read(),  read);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read(),  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read(),  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
327	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read()  -  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read()  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read()  -  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
328	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(record.read());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(record.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(record.read());	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
329	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in,  i.read());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in,  i.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in,  i.read());	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
330	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.read());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.read());	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
331	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read()  +  read);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read()  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read()  +  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
332	[BUG]  [BUGGY]  read  =  IOUtils.readFully(i,  headers,  read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  read  =  IOUtils.readFully(i,  headers,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	read  =  IOUtils.readFully(i,  headers,  read);	  read    =    IOUtils.readFully(i,    headers);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
333	[BUG]  [BUGGY]  reader  =  IOUtils.readFully(i,  headers);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  reader  =  IOUtils.readFully(i,  headers);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	reader  =  IOUtils.readFully(i,  headers);	  read    =    IOUtils.readFully(i,    headers);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
334	[BUG]  [BUGGY]  read  =  IOUtils.readFully(i,  headers,  ch);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  read  =  IOUtils.readFully(i,  headers,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	read  =  IOUtils.readFully(i,  headers,  ch);	  read    =    IOUtils.readFully(i,    headers);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
335	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i,  0);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i,  0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i,  0);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(read,    0);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
336	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len,  0);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len,  0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len,  0);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(read,    0);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
337	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  4);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  4);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  4);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(read,    0);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
338	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read,  0);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read,  0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read,  0);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(read,    0);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
339	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  2);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  2);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(read,    0);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
340	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  read);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
341	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  len);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
342	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion()  +  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion()  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion()  +  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
343	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  IOUtils.readFully(ch));  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  IOUtils.readFully(ch));  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  IOUtils.readFully(ch));	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
344	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion()  +  read);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion()  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion()  +  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
345	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(write,  len);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(write,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(write,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(write);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
346	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(size);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(size);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(size);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(write);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
347	[BUG]  [BUGGY]  Integer  i  =  headers.readInt(len,  read,  restLen);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readInt(len,  read,  restLen);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readInt(len,  read,  restLen);	  Integer    i    =    headers.readInt(len,    read);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
348	[BUG]  [BUGGY]  Integer  i  =  headers.readInt(len,  read,  1);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readInt(len,  read,  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readInt(len,  read,  1);	  Integer    i    =    headers.readInt(len,    read);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
349	[BUG]  [BUGGY]  Integer  i  =  headers.readInt(len,  read,  len);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readInt(len,  read,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readInt(len,  read,  len);	  Integer    i    =    headers.readInt(len,    read);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
350	[BUG]  [BUGGY]  Integer  i  =  headers.readInt(len,  read,  length);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readInt(len,  read,  length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readInt(len,  read,  length);	  Integer    i    =    headers.readInt(len,    read);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
351	[BUG]  [BUGGY]  Integer  i  =  headers.readInt(len,  read  +  1);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readInt(len,  read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readInt(len,  read  +  1);	  Integer    i    =    headers.readInt(len,    read);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
352	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers[i]    =    headers[i.read()];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
353	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers[i]    =    headers[i.read()];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
354	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers[i]    =    headers[i.read()];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
355	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(!hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(!hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(!hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers[i]    =    headers[i.read()];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
356	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()].toString();  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()].toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()].toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers[i]    =    headers[i.read()];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
357	[BUG]  [BUGGY]  headers[i.read()]  =  headers[i.read()];  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  headers[i.read()]  =  headers[i.read()];  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	headers[i.read()]  =  headers[i.read()];	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers[i]    =    headers[i.read()];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
358	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers[i]    =    headers[i.read()];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
359	[BUG]  [BUGGY]  int  n  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  int  n  =  headers.size()  -  1;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	int  n  =  headers.size()  -  1;	  int    n    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
360	[BUG]  [BUGGY]  int  n  =  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  int  n  =  headers.size()  +  1;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	int  n  =  headers.size()  +  1;	  int    n    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
361	[BUG]  [BUGGY]  int  n  =  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  int  n  =  headers.size()  -  2;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	int  n  =  headers.size()  -  2;	  int    n    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
362	[BUG]  [BUGGY]  int  n  =  headers.size()  +  read;  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  int  n  =  headers.size()  +  read;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	int  n  =  headers.size()  +  read;	  int    n    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
363	[BUG]  [BUGGY]  int  n  =  headers.size()  -  4;  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  int  n  =  headers.size()  -  4;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	int  n  =  headers.size()  -  4;	  int    n    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
364	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(i.read);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayInputStream(i.read);	  InputStream    coll    =    new    ByteArrayInputStream(read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
365	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(i);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayInputStream(i);	  InputStream    coll    =    new    ByteArrayInputStream(read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
366	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(i.read());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(i.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayInputStream(i.read());	  InputStream    coll    =    new    ByteArrayInputStream(read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
367	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(read,  ch);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(read,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayInputStream(read,  ch);	  InputStream    coll    =    new    ByteArrayInputStream(read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
368	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1];  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1];  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1];  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()    +    1];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
369	[BUG]  [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1];  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1];  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1];  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()    +    1];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
370	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1];  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1];  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1];  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()    +    1];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
371	[BUG]  [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1];  }  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1];  }  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1];  }  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()    +    1];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
372	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1];  }  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1];  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1];  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()    +    1];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
373	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1]  [CE]  illegal  start  of  type  [FE]                                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1]  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1]	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()    +    1];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
374	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(bytes.read());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(bytes.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(bytes.read());	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
375	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read()  +  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read()  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read()  +  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
376	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(256L);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(256L);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(256L);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256L);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
377	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  i);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  i);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len,    read);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
378	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  read  -  len);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  read  -  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  read  -  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len,    read);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
379	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers[i]    =    headers[i.read()];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
380	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(!hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(!hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers[i]    =    headers[i.read()];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
381	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers[i]    =    headers[i.read()];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
382	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers[i]    =    headers[i.read()];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
383	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()  +  1];  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()  +  1];  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()  +  1];  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers[i]    =    headers[i.read()];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
384	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Read.length);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Read.length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Read.length);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
385	[BUG]  [BUGGY]  Integer  i  =  headers.readInt(read);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readInt(read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readInt(read);	  Integer    i    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
386	[BUG]  [BUGGY]  Integer  i  =  headers.readInt(0);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readInt(0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readInt(0);	  Integer    i    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
387	[BUG]  [BUGGY]  Integer  i  =  headers.getInt(len);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.getInt(len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.getInt(len);	  Integer    i    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
388	[BUG]  [BUGGY]  Integer  i  =  headers.getInt(read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.getInt(read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.getInt(read);	  Integer    i    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
389	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.in);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.in);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.in);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
390	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
391	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
392	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
393	[BUG]  [BUGGY]  Integer  i  =  headers.readInt(read,  len);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readInt(read,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readInt(read,  len);	  Integer    i    =    headers.readInt(len);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
394	[BUG]  [BUGGY]  Integer  i  =  headers.readInt(Long.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readInt(Long.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readInt(Long.MAX_VALUE);	  Integer    i    =    headers.readInt(len);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
395	[BUG]  [BUGGY]  Integer  i  =  headers.readInt(len  +  read);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readInt(len  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readInt(len  +  read);	  Integer    i    =    headers.readInt(len);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
396	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read  +  1);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read  +  1);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(0);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
397	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(8);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(8);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(8);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(0);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
398	[BUG]  [BUGGY]  read  =  headers.readFully(i);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  read  =  headers.readFully(i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	read  =  headers.readFully(i);	  read    =    IOUtils.readFully(i,    headers);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
399	[BUG]  [BUGGY]  read  =  headers.readFully(i,  headers);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  read  =  headers.readFully(i,  headers);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	read  =  headers.readFully(i,  headers);	  read    =    IOUtils.readFully(i,    headers);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
400	[BUG]  [BUGGY]  Read  =  IOUtils.readFully(i,  headers);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Read  =  IOUtils.readFully(i,  headers);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Read  =  IOUtils.readFully(i,  headers);	  read    =    IOUtils.readFully(i,    headers);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
401	[BUG]  [BUGGY]  int  len  =  headers.length();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  int  len  =  headers.length();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	int  len  =  headers.length();	  int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
402	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion()  -  1);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion()  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion()  -  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
403	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
404	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString();  }  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString();  }  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString();  }  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
405	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString()  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString()  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString()	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
406	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.getElementType().toString();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.getElementType().toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.getElementType().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
407	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.getElementType().toString();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.getElementType().toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.getElementType().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
408	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  for(int  j  =  0;  j  <  len;  ++j)  {  return  headers[j.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(i.hasMoreElements())  {  for(int  j  =  0;  j  <  len;  ++j)  {  return  headers[j.nextElement().toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(i.hasMoreElements())  {  for(int  j  =  0;  j  <  len;  ++j)  {  return  headers[j.nextElement().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
409	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  read);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  read);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
410	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(len  +  read);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(len  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(len  +  read);	  InputStream    coll    =    new    ByteArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
411	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(Reader.UTF_8);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(Reader.UTF_8);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(Reader.UTF_8);	  InputStream    coll    =    new    ByteArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
412	[BUG]  [BUGGY]  InputStream  coll  =  i.readInputStream(read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  i.readInputStream(read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  i.readInputStream(read);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
413	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(4);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(4);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(4);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(1);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
414	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(3);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(3);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(3);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(1);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
415	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Read  +  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Read  +  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length    +    1);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
416	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  length);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  length);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
417	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(in.read);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(in.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(in.read);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
418	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
419	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  +  read);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  +  read);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
420	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Read);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
421	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length  -  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
422	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  -  1);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  -  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
423	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  +  read);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  +  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
424	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(16  -  read);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(16  -  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(16  -  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(16);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
425	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
426	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
427	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers.length  -  2);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers.length  -  2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers.length  -  2);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
428	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  headers.length);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  headers.length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  headers.length);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
429	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Integer.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Integer.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Integer.MAX_VALUE);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
430	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(int.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(int.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(int.MAX_VALUE);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
431	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE  +  read);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE  +  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
432	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  len);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
433	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(127);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(127);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(127);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(128);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
434	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.readFully());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.readFully());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(i.readFully());	  InputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
435	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read,  0,  len);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read,  0,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(read,  0,  len);	  InputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
436	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read,  i.next);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read,  i.next);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(read,  i.next);	  InputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
437	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(32);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(32);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(32);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(256);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
438	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  length);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  length);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    -    read);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
439	[BUG]  [BUGGY]  byte[]  coll  =  headers.get(i.getText());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.get(i.getText());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.get(i.getText());	  byte[]    coll    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
440	[BUG]  [BUGGY]  byte[]  coll  =  headers.get(i.getKeyword()  -  1);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.get(i.getKeyword()  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.get(i.getKeyword()  -  1);	  byte[]    coll    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
441	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  0);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  0);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
442	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(10);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(10);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(10);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(8);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
443	[BUG]  [BUGGY]  Integer  i  =  headers.get(i.getKeyword(),  len);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.get(i.getKeyword(),  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.get(i.getKeyword(),  len);	  Integer    i    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
444	[BUG]  [BUGGY]  Integer  i  =  headers.get(i.getHeaderSize());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.get(i.getHeaderSize());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.get(i.getHeaderSize());	  Integer    i    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
445	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE  +  read);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE  +  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
446	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(long.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(long.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(long.MAX_VALUE);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
447	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(int.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(int.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(int.MAX_VALUE);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
448	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Byte.MAX_VALUE,  read);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Byte.MAX_VALUE,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Byte.MAX_VALUE,  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
449	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()].toString();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
450	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()].toString();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
451	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(!hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(!hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()].toString();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
452	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString()  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString()  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString()	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()].toString();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
453	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()].toString();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
454	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.getElement()].toString();  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.getElement()].toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.getElement()].toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()].toString();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
455	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  i);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  i);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length,    read);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
456	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  read  -  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  read  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  read  -  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length,    read);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
457	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  16);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  16);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  16);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
458	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  i.next);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  i.next);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  i.next);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
459	[BUG]  [BUGGY]  read  =  IOUtils.readFully(i,  length);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  read  =  IOUtils.readFully(i,  length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	read  =  IOUtils.readFully(i,  length);	  read    =    IOUtils.readFully(i,    i);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
460	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
461	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
462	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
463	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(!hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(!hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
464	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
465	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  IOUtils.readFully(i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  IOUtils.readFully(i.nextElement());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  IOUtils.readFully(i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
466	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256;  read);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256;  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256;  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256    -    read);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
467	[BUG]  [BUGGY]  byte[]  coll  =  headers.toArray(new  String[recordLen]);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.toArray(new  String[recordLen]);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.toArray(new  String[recordLen]);	  byte[]    coll    =    headers.toArray(new    String[remainderLen]);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
468	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256  -  read);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256  -  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256  -  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
469	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  0L);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  0L);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  0L);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    0);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
470	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len  +  read);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len  +  read);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
471	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len  -  1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len  -  1);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
472	[BUG]  [BUGGY]  ParsePaxHeaders  coll  =  new  ParsePaxHeaders(256,  len);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ParsePaxHeaders  coll  =  new  ParsePaxHeaders(256,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ParsePaxHeaders  coll  =  new  ParsePaxHeaders(256,  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    len);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
473	[BUG]  [BUGGY]  byte[]  coll  =  headers.toArray(new  String[len],  read);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.toArray(new  String[len],  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.toArray(new  String[len],  read);	  byte[]    coll    =    headers.toArray(new    String[len]);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
474	[BUG]  [BUGGY]  byte[]  coll  =  headers.toArray(new  String[0]);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.toArray(new  String[0]);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.toArray(new  String[0]);	  byte[]    coll    =    headers.toArray(new    String[len]);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
475	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Read.length  -  1);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Read.length  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Read.length  -  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length    -    1);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
476	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length  *  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length  *  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length  *  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length    -    1);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
477	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  4);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  4);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  4);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    -    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
478	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  16);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  16);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  16);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
479	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  1);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  1);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
480	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  0,  len);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  0,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  0,  len);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
481	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len  -  read);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len  -  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len  -  read);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
482	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  4);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  4);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  4);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
483	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.readFully());  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.readFully());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.readFully());	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
484	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(reset);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(reset);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(reset);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(write);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
485	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(size);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(size);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(size);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(write);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
486	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Read);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(write);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
487	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  IOUtils.readFully(i.read()));  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  IOUtils.readFully(i.read()));  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  IOUtils.readFully(i.read()));	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    i.read());    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
488	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  i.read());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  i.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  i.read());	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    i.read());    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
489	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  IOUtils.readShort(i.read()));  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  IOUtils.readShort(i.read()));  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  IOUtils.readShort(i.read()));	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    i.read());    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
490	[BUG]  [BUGGY]  InputStream  coll  =  new  BufferedInputStream(Long.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  BufferedInputStream(Long.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  BufferedInputStream(Long.MAX_VALUE);	  InputStream    coll    =    new    BufferedInputStream();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
491	[BUG]  [BUGGY]  InputStream  coll  =  new  BufferedInputStream(0);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  BufferedInputStream(0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  BufferedInputStream(0);	  InputStream    coll    =    new    BufferedInputStream();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
492	[BUG]  [BUGGY]  InputStream  coll  =  new  BufferedInputStream(len);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  BufferedInputStream(len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  BufferedInputStream(len);	  InputStream    coll    =    new    BufferedInputStream();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
493	[BUG]  [BUGGY]  InputStream  coll  =  new  BufferedInputStream(Reader.UTF_8);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  BufferedInputStream(Reader.UTF_8);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  BufferedInputStream(Reader.UTF_8);	  InputStream    coll    =    new    BufferedInputStream();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
494	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(read  +  1);	  InputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
495	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read,  i.next());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read,  i.next());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(read,  i.next());	  InputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
496	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read  +  len);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read  +  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(read  +  len);	  InputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
497	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read  -  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(read  -  1);	  InputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
498	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  16);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  16);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  16);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
499	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  len  -  read);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  len  -  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  len  -  read);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
500	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  0,  len);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  0,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  0,  len);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
501	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  read);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  read);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
502	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.in);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.in);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.in);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
503	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read  -  1);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read  -  1);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
504	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  1);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
505	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  read);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  read);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
506	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  len);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  len);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
507	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(read  +  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayInputStream(read  +  1);	  InputStream    coll    =    new    ByteArrayInputStream(read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
508	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(read,  i.next());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(read,  i.next());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayInputStream(read,  i.next());	  InputStream    coll    =    new    ByteArrayInputStream(read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
509	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(read  +  len);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(read  +  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayInputStream(read  +  len);	  InputStream    coll    =    new    ByteArrayInputStream(read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
510	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  16);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  16);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  16);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.parseLong(ch));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
511	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  len);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.parseLong(ch));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
512	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  8);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  8);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  8);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.parseLong(ch));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
513	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1];  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1];  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1];  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()    +    1];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
514	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1];  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1];  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1];  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()    +    1];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
515	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  *  1];  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  *  1];  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  *  1];  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()    +    1];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
516	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.getElement()  +  1];  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.getElement()  +  1];  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.getElement()  +  1];  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()    +    1];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
517	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1].reset();  }  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1].reset();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1].reset();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()    +    1];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
518	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  IOUtils.readFully(i.nextElement()  +  1];  }  [CE]  illegal  start  of  type  [FE]                                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  IOUtils.readFully(i.nextElement()  +  1];  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  IOUtils.readFully(i.nextElement()  +  1];  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()    +    1];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
519	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
520	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
521	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  3);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  3);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  3);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read    +    1);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
522	[BUG]  [BUGGY]  ch  =  i.read(remainders);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ch  =  i.read(remainders);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ch  =  i.read(remainders);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
523	[BUG]  [BUGGY]  ch  =  i.readFully();  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ch  =  i.readFully();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ch  =  i.readFully();	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
524	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(reset);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(reset);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(reset);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(write);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
525	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(2);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(2);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
526	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(length,  read);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(length,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(length,  read);	  InputStream    coll    =    new    ByteArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
527	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read,  length);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read,  length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(read,  length);	  InputStream    coll    =    new    ByteArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
528	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(in.read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(in.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(in.read);	  InputStream    coll    =    new    ByteArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
529	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(length  +  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(length  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(length  +  1);	  InputStream    coll    =    new    ByteArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
530	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(0);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayInputStream(0);	  InputStream    coll    =    new    ByteArrayInputStream();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
531	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  256);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  256);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  256);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    read);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
532	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  +  ch);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  +  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  +  ch);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    read);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
533	[BUG]  [BUGGY]  InputStream  coll  =  headers.get(i.getKeyword(),  len);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  headers.get(i.getKeyword(),  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  headers.get(i.getKeyword(),  len);	  InputStream    coll    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
534	[BUG]  [BUGGY]  InputStream  coll  =  headers.get(i.getKeyword()  -  1);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  headers.get(i.getKeyword()  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  headers.get(i.getKeyword()  -  1);	  InputStream    coll    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
535	[BUG]  [BUGGY]  InputStream  coll  =  headers.get(i.getSourceName());  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  headers.get(i.getSourceName());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  headers.get(i.getSourceName());	  InputStream    coll    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
536	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read  -  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read  -  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    +    read);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
537	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read,  i);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read,  i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read,  i);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    +    read);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
538	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.length);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.length);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
539	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.in);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.in);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.in);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
540	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  3);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  3);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  3);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read    +    1);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
541	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  *  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  *  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  *  1);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read    +    1);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
542	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  4);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  4);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  4);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read    +    1);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
543	[BUG]  [BUGGY]  Integer  i  =  headers.readInt(Long.MAX_VALUE,  read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readInt(Long.MAX_VALUE,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readInt(Long.MAX_VALUE,  read);	  Integer    i    =    headers.readInt(len,    read);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
544	[BUG]  [BUGGY]  Integer  i  =  headers.readInt(len,  read  -  1);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readInt(len,  read  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readInt(len,  read  -  1);	  Integer    i    =    headers.readInt(len,    read);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
545	[BUG]  [BUGGY]  Integer  i  =  headers.readInt(length,  read);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readInt(length,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readInt(length,  read);	  Integer    i    =    headers.readInt(len,    read);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
546	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  byte[len];  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  byte[len];  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  byte[len];	  IntegerArrayOutputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
547	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  java.util.ArrayOutputStream();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  java.util.ArrayOutputStream();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  java.util.ArrayOutputStream();	  IntegerArrayOutputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
548	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  ByteArrayOutputStream(len);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  ByteArrayOutputStream(len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  ByteArrayOutputStream(len);	  IntegerArrayOutputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
549	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()];  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers[i]    =    headers[i.read()];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
550	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()].read();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()].read();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()].read();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers[i]    =    headers[i.read()];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
551	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()].toString();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()].toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers[i]  =  headers[i.read()].toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers[i]    =    headers[i.read()];    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
552	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read(),  i.read());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read(),  i.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read(),  i.read());	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
553	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read(),  in.read());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read(),  in.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read(),  in.read());	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
554	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(IOUtils.readFully(i,  i));  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(IOUtils.readFully(i,  i));  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(IOUtils.readFully(i,  i));	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
555	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read()  +  len);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read()  +  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read()  +  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
556	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
557	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getCharset());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getCharset());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getCharset());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
558	[BUG]  [BUGGY]  Integer  i  =  headers.get(i.getKeyword()  +  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.get(i.getKeyword()  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.get(i.getKeyword()  +  1);	  Integer    i    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
559	[BUG]  [BUGGY]  Integer  i  =  headers.get(i.getKeyword())+  1;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.get(i.getKeyword())+  1;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.get(i.getKeyword())+  1;	  Integer    i    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
560	[BUG]  [BUGGY]  ch  =  i.toString();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ch  =  i.toString();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ch  =  i.toString();	  ch    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
561	[BUG]  [BUGGY]  ch  =  i.toString(CharsetNames.UTF_8);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ch  =  i.toString(CharsetNames.UTF_8);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ch  =  i.toString(CharsetNames.UTF_8);	  ch    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
562	[BUG]  [BUGGY]  Integer  i  =  headers.readInt(len,  read  -  len);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readInt(len,  read  -  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readInt(len,  read  -  len);	  Integer    i    =    headers.readInt(len,    read);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
563	[BUG]  [BUGGY]  Integer  i  =  headers.readInt(Len,  read  +  1);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readInt(Len,  read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readInt(Len,  read  +  1);	  Integer    i    =    headers.readInt(len,    read);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
564	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  len);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  len);	  InputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
565	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.read(),  IOUtils.readFully(ch));  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.read(),  IOUtils.readFully(ch));  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(i.read(),  IOUtils.readFully(ch));	  InputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
566	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read,  i.read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read,  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(read,  i.read);	  InputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
567	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(len,  i.read);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(len,  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(len,  i.read);	  InputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
568	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(len,  i);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(len,  i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(len,  i);	  InputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
569	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(128);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(128);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(128);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(256);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
570	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  i.read);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  i.read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    -    read);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
571	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  IOUtils.readFully(ch));  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  IOUtils.readFully(ch));  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  IOUtils.readFully(ch));	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
572	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(len  +  1);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(len  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(len  +  1);	  InputStream    coll    =    new    ByteArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
573	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(len  -  1);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(len  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(len  -  1);	  InputStream    coll    =    new    ByteArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
574	[BUG]  [BUGGY]  int  len  =  headers.length;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  int  len  =  headers.length;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	int  len  =  headers.length;	  int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
575	[BUG]  [BUGGY]  byte[]  coll  =  headers.toArray(new  String[len  +  len]);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.toArray(new  String[len  +  len]);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.toArray(new  String[len  +  len]);	  byte[]    coll    =    headers.toArray(new    String[len]);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
576	[BUG]  [BUGGY]  byte[]  coll  =  headers.toArray(new  String[len  *  read]);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.toArray(new  String[len  *  read]);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.toArray(new  String[len  *  read]);	  byte[]    coll    =    headers.toArray(new    String[len]);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
577	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.nextElement().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
578	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  while((  ch  =  i.read())!=  -1)  {  read++;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	while((  ch  =  i.read())!=  -1)  {  read++;	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
579	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  read++;  if(ch  ==  '=')  {  return  headers[i.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  while((  ch  =  i.read())!=  -1)  {  read++;  if(ch  ==  '=')  {  return  headers[i.nextElement().toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	while((  ch  =  i.read())!=  -1)  {  read++;  if(ch  ==  '=')  {  return  headers[i.nextElement().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
580	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.getElementType().toString();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.getElementType().toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.getElementType().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
581	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.getElement().toString();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.getElement().toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	for(int  i  =  0;  i  <  len;  ++i)  {  return  headers[i.getElement().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
582	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  byte[len];  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  byte[len];  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  byte[len];	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
583	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  IOUtils.readFully(i));  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  IOUtils.readFully(i));  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  IOUtils.readFully(i));	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
584	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  1);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
585	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  /  read);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  /  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  /  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    +    read);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
586	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  4);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  4);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  4);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    +    read);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
587	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
588	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
589	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  0);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  0);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    0);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
590	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  0);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  0);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    0);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
591	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.readInt());  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.readInt());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.readInt());	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
592	[BUG]  [BUGGY]  if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1];  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1];  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()  +  1];  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()    +    1];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
593	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()    +    1];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
594	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getLength()  +  1];  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getLength()  +  1];  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getLength()  +  1];  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()    +    1];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
595	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()    +    1];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
596	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.getElement()  +  1];  }  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.getElement()  +  1];  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.getElement()  +  1];  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()    +    1];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
597	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readInt());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readInt());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readInt());	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
598	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readUTF());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readUTF());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readUTF());	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
599	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readBytes());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readBytes());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readBytes());	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
600	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  i.read);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read,  i.read);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
601	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len,  i.read);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len,  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len,  i.read);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
602	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len,  i);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len,  i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len,  i);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
603	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  headers.length);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  headers.length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  headers.length);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
604	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  headers.length);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  headers.length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  headers.length);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
605	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers.length  -  len);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers.length  -  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers.length  -  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
606	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  i.read());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  i.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  i.read());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
607	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  -  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
608	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  ch);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  ch);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
609	[BUG]  [BUGGY]  InputStream  coll  =  headers.get(i.getKeyword(),  ch);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  headers.get(i.getKeyword(),  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  headers.get(i.getKeyword(),  ch);	  InputStream    coll    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
610	[BUG]  [BUGGY]  InputStream  coll  =  headers.get(i.getKeyword(),  IOUtils.readFully(ch));  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  headers.get(i.getKeyword(),  IOUtils.readFully(ch));  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  headers.get(i.getKeyword(),  IOUtils.readFully(ch));	  InputStream    coll    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
611	[BUG]  [BUGGY]  InputStream  coll  =  headers.get(i.getKeyword())+  1;  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  headers.get(i.getKeyword())+  1;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  headers.get(i.getKeyword())+  1;	  InputStream    coll    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
612	[BUG]  [BUGGY]  read  =  IOUtils.readFully(i,  headers,  len);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  read  =  IOUtils.readFully(i,  headers,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	read  =  IOUtils.readFully(i,  headers,  len);	  read    =    IOUtils.readFully(i,    headers);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
613	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read(),  0);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read(),  0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read(),  0);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(read,    0);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
614	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read,  i.read());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read,  i.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(read,  i.read());	  InputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
615	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.readInt());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.readInt());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(i.readInt());	  InputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
616	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read()  -  len);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read()  -  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read()  -  len);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
617	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  chars.length);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  chars.length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  chars.length);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    len);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
618	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read());	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
619	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
620	[BUG]  [BUGGY]  ch  =  i.read(Long.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ch  =  i.read(Long.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ch  =  i.read(Long.MAX_VALUE);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
621	[BUG]  [BUGGY]  ch  =  i.read(Long.MIN_VALUE);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ch  =  i.read(Long.MIN_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ch  =  i.read(Long.MIN_VALUE);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
622	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  i.read());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  i.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  i.read());	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    i.read());    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
623	[BUG]  [BUGGY]  InputStream  coll  =  i.readInputStream(true);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  i.readInputStream(true);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  i.readInputStream(true);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
624	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  i.read);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  i.read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
625	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  i.read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  i.read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
626	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readUTF());  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readUTF());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readUTF());	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
627	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readInt());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readInt());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readInt());	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
628	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readLine());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readLine());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readLine());	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
629	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readBytes());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readBytes());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readBytes());	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
630	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()].toString();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
631	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()].toString();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
632	[BUG]  [BUGGY]  if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()].toString();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
633	[BUG]  [BUGGY]  if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()].toString();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
634	[BUG]  [BUGGY]  if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString();  }  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()].toString();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
635	[BUG]  [BUGGY]  if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString()  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString()  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement()].toString()	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement()].toString();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
636	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  16);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  16);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  16);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
637	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE  +  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
638	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  4);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  4);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  4);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
639	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
640	[BUG]  [BUGGY]  if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
641	[BUG]  [BUGGY]  if(headers.length!=  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers.length!=  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers.length!=  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
642	[BUG]  [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
643	[BUG]  [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
644	[BUG]  [BUGGY]  if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  IOUtils.readFully(i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  IOUtils.readFully(i.nextElement());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  IOUtils.readFully(i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
645	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512  -  read);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512  -  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512  -  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256    -    read);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
646	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256)-  i.read();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256)-  i.read();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256)-  i.read();	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256    -    read);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
647	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(0,  len);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(0,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(0,  len);	  InputStream    coll    =    new    ByteArrayOutputStream(0);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
648	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  ch);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  ch);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
649	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  +  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  +  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
650	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(length);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayInputStream(length);	  InputStream    coll    =    new    ByteArrayInputStream();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
651	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(Long.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(Long.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayInputStream(Long.MAX_VALUE);	  InputStream    coll    =    new    ByteArrayInputStream();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
652	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(in.read(),  i.read());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(in.read(),  i.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(in.read(),  i.read());	  InputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
653	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(in.read(),  in.read());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(in.read(),  in.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(in.read(),  in.read());	  InputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
654	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(in.read()  +  len);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(in.read()  +  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(in.read()  +  len);	  InputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
655	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  len);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
656	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE  +  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE  +  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
657	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(int);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(int);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(int);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
658	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(read,  i.read());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(read,  i.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayInputStream(read,  i.read());	  InputStream    coll    =    new    ByteArrayInputStream(read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
659	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(i.getVersion());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(i.getVersion());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  ByteArrayInputStream(i.getVersion());	  InputStream    coll    =    new    ByteArrayInputStream(read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
660	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
661	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  i.read);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  i.read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.parseLong(ch));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
662	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  i.read());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  i.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  i.read());	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.parseLong(ch));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
663	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  i.readLong());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  i.readLong());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.parseLong(ch),  i.readLong());	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.parseLong(ch));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
664	[BUG]  [BUGGY]  Integer  i  =  headers.readInt(len  +  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.readInt(len  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.readInt(len  +  1);	  Integer    i    =    headers.readInt(len);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
665	[BUG]  [BUGGY]  Integer  i  =  headers.get(len);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.get(len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.get(len);	  Integer    i    =    headers.readInt(len);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
666	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  i.getCharsetNames());  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  i.getCharsetNames());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  i.getCharsetNames());	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
667	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  i.read);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  i.read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
668	[BUG]  [BUGGY]  byte[]  coll  =  headers.toArray(new  String[remainderLen  +  len]);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.toArray(new  String[remainderLen  +  len]);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.toArray(new  String[remainderLen  +  len]);	  byte[]    coll    =    headers.toArray(new    String[remainderLen]);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
669	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  headers.toArray(new  String[len]);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  headers.toArray(new  String[len]);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  headers.toArray(new  String[len]);	  byte[]    coll    =    headers.toArray(new    String[remainderLen]);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
670	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  i.read);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  i.read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    read);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
671	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  i.read);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  i.read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length,    read);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
672	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(length  -  1);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(length  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(length  -  1);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
673	[BUG]  [BUGGY]  Integer  i  =  headers.getIntValue();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.getIntValue();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.getIntValue();	  Integer    i    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
674	[BUG]  [BUGGY]  Integer  i  =  headers.size();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  i  =  headers.size();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  i  =  headers.size();	  Integer    i    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
675	[BUG]  [BUGGY]  InputStream  coll  =  new  BufferedInputStream(i.read());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  BufferedInputStream(i.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  BufferedInputStream(i.read());	  InputStream    coll    =    new    BufferedInputStream();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
676	[BUG]  [BUGGY]  InputStream  coll  =  new  BufferedInputStream(i.getVersion());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  BufferedInputStream(i.getVersion());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  BufferedInputStream(i.getVersion());	  InputStream    coll    =    new    BufferedInputStream();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
677	[BUG]  [BUGGY]  InputStream  coll  =  new  BufferedInputStream(i.getCharset());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  BufferedInputStream(i.getCharset());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  BufferedInputStream(i.getCharset());	  InputStream    coll    =    new    BufferedInputStream();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
678	[BUG]  [BUGGY]  InputStream  coll  =  new  BufferedInputStream(length);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  BufferedInputStream(length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  BufferedInputStream(length);	  InputStream    coll    =    new    BufferedInputStream();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
679	[BUG]  [BUGGY]  InputStream  coll  =  new  BufferedInputStream(in.read());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  InputStream  coll  =  new  BufferedInputStream(in.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	InputStream  coll  =  new  BufferedInputStream(in.read());	  InputStream    coll    =    new    BufferedInputStream();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
680	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  i.read);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  i.read);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
681	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  i);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  i);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
682	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  i.read);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  i.read);	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
683	[BUG]  [BUGGY]  Integer  n  =  headers.size();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  Integer  n  =  headers.size();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	Integer  n  =  headers.size();	  int    n    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
684	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  i.read);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  i.read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
685	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  i);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  i);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
686	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Length.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Length.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Length.MAX_VALUE);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length    -    1);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
687	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readCount  -  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readCount  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readCount  -  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length    -    1);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
688	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.readLine());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.readLine());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.readLine());	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
689	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(118);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(118);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(118);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(128);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
690	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
691	[BUG]  [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getBytes());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getBytes());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getBytes());	  byteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
692	[BUG]  [BUGGY]  byte[]  coll  =  headers.get(i.getKeyword(),  i.getCharsetName());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.get(i.getKeyword(),  i.getCharsetName());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.get(i.getKeyword(),  i.getCharsetName());	  byte[]    coll    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
693	[BUG]  [BUGGY]  byte[]  coll  =  headers.get(i.getKeyword(),  ch);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.get(i.getKeyword(),  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.get(i.getKeyword(),  ch);	  byte[]    coll    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
694	[BUG]  [BUGGY]  byte[]  coll  =  headers.get(i.getKeyword(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.get(i.getKeyword(),  i.getCharacterEncoding());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.get(i.getKeyword(),  i.getCharacterEncoding());	  byte[]    coll    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
695	[BUG]  [BUGGY]  byte[]  coll  =  headers.get(i.getKeyword())+  1;  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.get(i.getKeyword())+  1;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.get(i.getKeyword())+  1;	  byte[]    coll    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
696	[BUG]  [BUGGY]  byte[]  coll  =  headers.get(i.getKeyword(),  i);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  byte[]  coll  =  headers.get(i.getKeyword(),  i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	byte[]  coll  =  headers.get(i.getKeyword(),  i);	  byte[]    coll    =    headers.get(i.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
697	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    len);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
698	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  len);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
699	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  ch);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  ch);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
700	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  256);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  256);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  256);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(512,    read);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
701	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  i);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string        [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	445	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  i);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(512,    read);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
