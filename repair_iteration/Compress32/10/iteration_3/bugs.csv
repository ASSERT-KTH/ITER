bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  val  =  val.substring(0,  val.length());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  String  val  =  val.substring(0,  val.length());  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	String  val  =  val.substring(0,  val.length());	  String    val    =    val.substring(0,    val.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
2	[BUG]  [BUGGY]  val  =  val.substring(0,  val.length());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  val  =  val.substring(0,  val.length());  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	val  =  val.substring(0,  val.length());	  String    val    =    val.substring(0,    val.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
3	[BUG]  [BUGGY]  String  val  =  val.substring(0,  val.length()  +  1);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  String  val  =  val.substring(0,  val.length()  +  1);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	String  val  =  val.substring(0,  val.length()  +  1);	  String    val    =    val.substring(0,    val.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
4	[BUG]  [BUGGY]  String  val  =  key.substring(0,  val.length()  -  1);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  String  val  =  key.substring(0,  val.length()  -  1);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	String  val  =  key.substring(0,  val.length()  -  1);	  String    val    =    val.substring(0,    val.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
5	[BUG]  [BUGGY]  String  val  =  val.substring(0,  val.length())+  1;  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  String  val  =  val.substring(0,  val.length())+  1;  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	String  val  =  val.substring(0,  val.length())+  1;	  String    val    =    val.substring(0,    val.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
6	[BUG]  [BUGGY]  String  val  =  val.substring(0,  val.length()));  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  String  val  =  val.substring(0,  val.length()));  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	String  val  =  val.substring(0,  val.length()));	  String    val    =    val.substring(0,    val.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
7	[BUG]  [BUGGY]  }  else  if(val.equals(ent.getValue()))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val.equals(ent.getValue()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val.equals(ent.getValue()))  {	  }    else    if(path.equals(ent.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
8	[BUG]  [BUGGY]  }  else  if(val.equals(ent.getKey()))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val.equals(ent.getKey()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val.equals(ent.getKey()))  {	  }    else    if(path.equals(ent.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
9	[BUG]  [BUGGY]  }  else  if(!path.equals(ent.getValue()))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(!path.equals(ent.getValue()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(!path.equals(ent.getValue()))  {	  }    else    if(path.equals(ent.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
10	[BUG]  [BUGGY]  }  else  if(path.equals(ent.getLinkName()))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(ent.getLinkName()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(ent.getLinkName()))  {	  }    else    if(path.equals(ent.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
11	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).setPath(val);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).setPath(val);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String,String>)entry).setPath(val);	  ((    TarArchiveEntry    <    String,String>)entry).setPath(path);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
12	[BUG]  [BUGGY]  (TarArchiveEntry  <  String,String>)entry).setPath(val);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  (TarArchiveEntry  <  String,String>)entry).setPath(val);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	(TarArchiveEntry  <  String,String>)entry).setPath(val);	  ((    TarArchiveEntry    <    String,String>)entry).setPath(path);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
13	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).setPath(key);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).setPath(key);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String,String>)entry).setPath(key);	  ((    TarArchiveEntry    <    String,String>)entry).setPath(path);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
14	[BUG]  [BUGGY]  (TarArchiveEntry  <  String,String>)entry).setPath(path);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  (TarArchiveEntry  <  String,String>)entry).setPath(path);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	(TarArchiveEntry  <  String,String>)entry).setPath(path);	  ((    TarArchiveEntry    <    String,String>)entry).setPath(path);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
15	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).setPath(path  +  1);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).setPath(path  +  1);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String,String>)entry).setPath(path  +  1);	  ((    TarArchiveEntry    <    String,String>)entry).setPath(path);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
16	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).setURL(val);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).setURL(val);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String,String>)entry).setURL(val);	  ((    TarArchiveEntry    <    String,String>)entry).setPath(path);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
17	[BUG]  [BUGGY]  }  else  if(val  >=  null  ||!path.equals(key))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val  >=  null  ||!path.equals(key))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val  >=  null  ||!path.equals(key))  {	  }    else    if(val    ==    null    ||!path.equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
18	[BUG]  [BUGGY]  }  else  if(val.equals(entry.getKey()))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val.equals(entry.getKey()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val.equals(entry.getKey()))  {	  }    else    if(path.equals(entry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
19	[BUG]  [BUGGY]  }  else  if(path.equals(entry.getLinkName()))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(entry.getLinkName()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(entry.getLinkName()))  {	  }    else    if(path.equals(entry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
20	[BUG]  [BUGGY]  }  else  if(key.equals(entry.getKey()))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(key.equals(entry.getKey()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(key.equals(entry.getKey()))  {	  }    else    if(path.equals(entry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
21	[BUG]  [BUGGY]  }  else  if(!path.equals(entry.getKey()))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(!path.equals(entry.getKey()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(!path.equals(entry.getKey()))  {	  }    else    if(path.equals(entry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
22	[BUG]  [BUGGY]  }  else  if(val.equals(entry.getValue()))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val.equals(entry.getValue()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val.equals(entry.getValue()))  {	  }    else    if(path.equals(entry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
23	[BUG]  [BUGGY]  }  else  if(val.equals('/'))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val.equals('/'))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val.equals('/'))  {	  }    else    if('/'.equals(path))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
24	[BUG]  [BUGGY]  }  else  if('/'.equals(path)||  val  ==  Integer.parseInt(val))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('/'.equals(path)||  val  ==  Integer.parseInt(val))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('/'.equals(path)||  val  ==  Integer.parseInt(val))  {	  }    else    if('/'.equals(path))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
25	[BUG]  [BUGGY]  }  else  if(val.equals( "linkNames.length "))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val.equals( "linkNames.length "))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val.equals( "linkNames.length "))  {	  }    else    if(   "linkNames.length   ".equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
26	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  entry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  entry.getValue()  +  1;  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  entry.getValue()  +  1;	  Entry    <    String,    String>    currEntry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
27	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  entry.getKey();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  entry.getKey();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  entry.getKey();	  Entry    <    String,    String>    currEntry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
28	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  val.getValue();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  val.getValue();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  val.getValue();	  Entry    <    String,    String>    currEntry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
29	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  entry.getValue(),  val);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  entry.getValue(),  val);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  entry.getValue(),  val);	  Entry    <    String,    String>    currEntry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
30	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  entry.getValue()  +  val;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  entry.getValue()  +  val;  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  entry.getValue()  +  val;	  Entry    <    String,    String>    currEntry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
31	[BUG]  [BUGGY]  }  else  if(val!=  null  &&!path.equals(key))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val!=  null  &&!path.equals(key))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val!=  null  &&!path.equals(key))  {	  }    else    if(val!=    null    ||!path.equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
32	[BUG]  [BUGGY]  }  else  if(val.equals( "link "))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val.equals( "link "))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val.equals( "link "))  {	  }    else    if(   "link       ".equals(path))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
33	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String>)entry).setPath(val);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String>)entry).setPath(val);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String>)entry).setPath(val);	  ((    TarArchiveEntry    <    String>)entry).setPath(path);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
34	[BUG]  [BUGGY]  (TarArchiveEntry  <  String>)entry).setPath(val);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  (TarArchiveEntry  <  String>)entry).setPath(val);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	(TarArchiveEntry  <  String>)entry).setPath(val);	  ((    TarArchiveEntry    <    String>)entry).setPath(path);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
35	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String>)entry).setPath(path,  val);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String>)entry).setPath(path,  val);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String>)entry).setPath(path,  val);	  ((    TarArchiveEntry    <    String>)entry).setPath(path);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
36	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String>)entry).setURL(val);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String>)entry).setURL(val);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String>)entry).setURL(val);	  ((    TarArchiveEntry    <    String>)entry).setPath(path);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
37	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String>)entry).setPath(key);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String>)entry).setPath(key);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String>)entry).setPath(key);	  ((    TarArchiveEntry    <    String>)entry).setPath(path);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
38	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String>)entry).setPath(path  +  1);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String>)entry).setPath(path  +  1);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String>)entry).setPath(path  +  1);	  ((    TarArchiveEntry    <    String>)entry).setPath(path);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
39	[BUG]  [BUGGY]  }  else  if(val.equals(key)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val.equals(key)&&  hasHitEOF)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val.equals(key)&&  hasHitEOF)  {	  }    else    if(path.equals(key)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
40	[BUG]  [BUGGY]  }  else  if(path.equals(key)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(key)||  hasHitEOF)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(key)||  hasHitEOF)  {	  }    else    if(path.equals(key)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
41	[BUG]  [BUGGY]  }  else  if(key.equals(path)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(key.equals(path)&&  hasHitEOF)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(key.equals(path)&&  hasHitEOF)  {	  }    else    if(path.equals(key)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
42	[BUG]  [BUGGY]  }  else  if(path.equals(key)&&  isEOF)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(key)&&  isEOF)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(key)&&  isEOF)  {	  }    else    if(path.equals(key)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
43	[BUG]  [BUGGY]  }  else  if(!path.equals(key)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(!path.equals(key)&&  hasHitEOF)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(!path.equals(key)&&  hasHitEOF)  {	  }    else    if(path.equals(key)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
44	[BUG]  [BUGGY]  }  else  if('.'.equals(key)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('.'.equals(key)&&  hasHitEOF)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('.'.equals(key)&&  hasHitEOF)  {	  }    else    if(path.equals(key)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
45	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator().next(),  val);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator().next(),  val);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator().next(),  val);	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
46	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key).iterator().next();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key).iterator().next();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(key).iterator().next();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
47	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getKey().iterator().next();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getKey().iterator().next();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  ent.getKey().iterator().next();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
48	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(ent.getKey()).iterator().next();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(ent.getKey()).iterator().next();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(ent.getKey()).iterator().next();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
49	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.keySet().iterator().next();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.keySet().iterator().next();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.keySet().iterator().next();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
50	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.iterator().next();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.iterator().next();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.iterator().next();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
51	[BUG]  [BUGGY]  }  else  if('/'.equals(key)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('/'.equals(key)&&  hasHitEOF)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('/'.equals(key)&&  hasHitEOF)  {	  }    else    if('/'.equals(key)&&!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
52	[BUG]  [BUGGY]  }  else  if('/'.equals(key)||!hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('/'.equals(key)||!hasHitEOF)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('/'.equals(key)||!hasHitEOF)  {	  }    else    if('/'.equals(key)&&!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
53	[BUG]  [BUGGY]  }  else  if('/'.equals(path)&&!hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('/'.equals(path)&&!hasHitEOF)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('/'.equals(path)&&!hasHitEOF)  {	  }    else    if('/'.equals(key)&&!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
54	[BUG]  [BUGGY]  }  else  if('/'.equals(key)&&  isHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('/'.equals(key)&&  isHitEOF)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('/'.equals(key)&&  isHitEOF)  {	  }    else    if('/'.equals(key)&&!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
55	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(val);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(val);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(val);	  Entry    <    String,    String>    currEntry    =    headers.get(key);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
56	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key  +  val);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key  +  val);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(key  +  val);	  Entry    <    String,    String>    currEntry    =    headers.get(key);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
57	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(ent.key);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(ent.key);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(ent.key);	  Entry    <    String,    String>    currEntry    =    headers.get(key);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
58	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key  -  1);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key  -  1);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(key  -  1);	  Entry    <    String,    String>    currEntry    =    headers.get(key);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
59	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(path);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(path);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(path);	  Entry    <    String,    String>    currEntry    =    headers.get(key);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
60	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(ent.path);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(ent.path);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(ent.path);	  Entry    <    String,    String>    currEntry    =    headers.get(key);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
61	[BUG]  [BUGGY]  }  else  if(val.equals( "linkpath "))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val.equals( "linkpath "))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val.equals( "linkpath "))  {	  }    else    if(   ".linkpath   ".equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
62	[BUG]  [BUGGY]  }  else  if(value.equals(path))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(value.equals(path))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(value.equals(path))  {	  }    else    if(path.equals(value))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
63	[BUG]  [BUGGY]  }  else  if(val.equals(value))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val.equals(value))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val.equals(value))  {	  }    else    if(path.equals(value))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
64	[BUG]  [BUGGY]  }  else  if('.'.equals(key)&&  val.equals(key))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('.'.equals(key)&&  val.equals(key))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('.'.equals(key)&&  val.equals(key))  {	  }    else    if('.'.equals(key)&&    key.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
65	[BUG]  [BUGGY]  }  else  if('.'.equals(key)||  key.equals(val))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('.'.equals(key)||  key.equals(val))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('.'.equals(key)||  key.equals(val))  {	  }    else    if('.'.equals(key)&&    key.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
66	[BUG]  [BUGGY]  }  else  if('.'.equals(key)&&  currEntry.setLinkName(val))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('.'.equals(key)&&  currEntry.setLinkName(val))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('.'.equals(key)&&  currEntry.setLinkName(val))  {	  }    else    if('.'.equals(key)&&    key.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
67	[BUG]  [BUGGY]  }  else  if('.'.equals(key)&&  currEntry.getLinkName().equals(val))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('.'.equals(key)&&  currEntry.getLinkName().equals(val))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('.'.equals(key)&&  currEntry.getLinkName().equals(val))  {	  }    else    if('.'.equals(key)&&    key.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
68	[BUG]  [BUGGY]  }  else  if('.'.equals(key)&&  path.equals(val))  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('.'.equals(key)&&  path.equals(val))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('.'.equals(key)&&  path.equals(val))  {	  }    else    if('.'.equals(key)&&    key.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
69	[BUG]  [BUGGY]  }  else  if('.'.equals(key)&&  val.equals(value))  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('.'.equals(key)&&  val.equals(value))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('.'.equals(key)&&  val.equals(value))  {	  }    else    if('.'.equals(key)&&    key.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
70	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.keySet().iterator();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.keySet().iterator();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
71	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.iterator();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.iterator();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.iterator();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
72	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  val.entrySet().iterator();  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  val.entrySet().iterator();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  val.entrySet().iterator();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
73	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator()  :  val;  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator()  :  val;  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator()  :  val;	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
74	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key).iterator();  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key).iterator();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(key).iterator();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
75	[BUG]  [BUGGY]  }  else  if(path  ==  null  &&!path.equals(encoding))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  null  &&!path.equals(encoding))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  null  &&!path.equals(encoding))  {	  }    else    if(path    ==    null    ||!path.equals(encoding))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
76	[BUG]  [BUGGY]  }  else  if(val  ==  null  ||!path.equals(encoding))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val  ==  null  ||!path.equals(encoding))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val  ==  null  ||!path.equals(encoding))  {	  }    else    if(path    ==    null    ||!path.equals(encoding))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
77	[BUG]  [BUGGY]  }  else  if(path!=  null  ||!path.equals(encoding))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path!=  null  ||!path.equals(encoding))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path!=  null  ||!path.equals(encoding))  {	  }    else    if(path    ==    null    ||!path.equals(encoding))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
78	[BUG]  [BUGGY]  }  else  if(path  ==  null  ||!path.equals(ent.encoding))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  null  ||!path.equals(ent.encoding))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  null  ||!path.equals(ent.encoding))  {	  }    else    if(path    ==    null    ||!path.equals(encoding))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
79	[BUG]  [BUGGY]  }  else  if(path!=  null  &&!path.endsWith( ".link "))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path!=  null  &&!path.endsWith( ".link "))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path!=  null  &&!path.endsWith( ".link "))  {	  }    else    if(path!=    null    ||!path.endsWith(   ".link   "))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
80	[BUG]  [BUGGY]  }  else  if(path!=  null  ||!path.endsWith( "/.link "))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path!=  null  ||!path.endsWith( "/.link "))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path!=  null  ||!path.endsWith( "/.link "))  {	  }    else    if(path!=    null    ||!path.endsWith(   ".link   "))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
81	[BUG]  [BUGGY]  }  else  if(path  ==  null  &&!path.endsWith( ".link "))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  null  &&!path.endsWith( ".link "))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  null  &&!path.endsWith( ".link "))  {	  }    else    if(path!=    null    ||!path.endsWith(   ".link   "))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
82	[BUG]  [BUGGY]  }  else  if(val  ==  null  &&!path.equals(key))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val  ==  null  &&!path.equals(key))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val  ==  null  &&!path.equals(key))  {	  }    else    if(path!=    null    &&!path.equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
83	[BUG]  [BUGGY]  }  else  if(path!=  null  &&!path.equals(val))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path!=  null  &&!path.equals(val))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path!=  null  &&!path.equals(val))  {	  }    else    if(path!=    null    &&!path.equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
84	[BUG]  [BUGGY]  }  else  if(val.equals(encoding))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val.equals(encoding))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val.equals(encoding))  {	  }    else    if(path.equals(encoding))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
85	[BUG]  [BUGGY]  }  else  if(!zipEncoding.equals(key))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(!zipEncoding.equals(key))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(!zipEncoding.equals(key))  {	  }    else    if(path.equals(encoding))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
86	[BUG]  [BUGGY]  }  else  if(val!=  null  ||!path.equals(val))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val!=  null  ||!path.equals(val))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val!=  null  ||!path.equals(val))  {	  }    else    if(path!=    null    ||!path.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
87	[BUG]  [BUGGY]  }  else  if(path  ==  null  &&!path.equals(val))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  null  &&!path.equals(val))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  null  &&!path.equals(val))  {	  }    else    if(path!=    null    ||!path.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
88	[BUG]  [BUGGY]  }  else  if(val!=  null  ||!path.equals(value))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val!=  null  ||!path.equals(value))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val!=  null  ||!path.equals(value))  {	  }    else    if(path!=    null    ||!path.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
89	[BUG]  [BUGGY]  }  else  if(val  ==  null  ||!path.endsWith( "/.link "))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val  ==  null  ||!path.endsWith( "/.link "))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val  ==  null  ||!path.endsWith( "/.link "))  {	  }    else    if(path    ==    null    ||!path.endsWith(   "/.link   "))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
90	[BUG]  [BUGGY]  }  else  if(path  ==  null  &&!path.endsWith( "/.link "))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  null  &&!path.endsWith( "/.link "))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  null  &&!path.endsWith( "/.link "))  {	  }    else    if(path    ==    null    ||!path.endsWith(   "/.link   "))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
91	[BUG]  [BUGGY]  }  else  if(val!=  null  ||!path.endsWith( ".link "))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val!=  null  ||!path.endsWith( ".link "))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val!=  null  ||!path.endsWith( ".link "))  {	  }    else    if(val    ==    null    ||!path.endsWith(   ".link   "))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
92	[BUG]  [BUGGY]  }  else  if(val.equals('.'))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val.equals('.'))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val.equals('.'))  {	  }    else    if('.'.equals(path))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
93	[BUG]  [BUGGY]  }  else  if( "linking ".equals(key))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if( "linking ".equals(key))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if( "linking ".equals(key))  {	  }    else    if(   ")linking   ".equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
94	[BUG]  [BUGGY]  }  else  if( "linkName   ".equals(path))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if( "linkName   ".equals(path))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if( "linkName   ".equals(path))  {	  }    else    if(   "linkName       ".equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
95	[BUG]  [BUGGY]  }  else  if( "linkName   ".equals(val))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if( "linkName   ".equals(val))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if( "linkName   ".equals(val))  {	  }    else    if(   "linkName       ".equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
96	[BUG]  [BUGGY]  }  else  if( "links   ".equals(path))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if( "links   ".equals(path))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if( "links   ".equals(path))  {	  }    else    if(   "links       ".equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
97	[BUG]  [BUGGY]  }  else  if( "links. ".equals(key))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if( "links. ".equals(key))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if( "links. ".equals(key))  {	  }    else    if(   "links       ".equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
98	[BUG]  [BUGGY]  }  else  if(val  ==  null  ||!path.equals(ent.getPath()))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val  ==  null  ||!path.equals(ent.getPath()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val  ==  null  ||!path.equals(ent.getPath()))  {	  }    else    if(path    ==    null    ||!path.equals(ent.getPath()))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
99	[BUG]  [BUGGY]  }  else  if(path  ==  null  &&!path.equals(ent.getPath()))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  null  &&!path.equals(ent.getPath()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  null  &&!path.equals(ent.getPath()))  {	  }    else    if(path    ==    null    ||!path.equals(ent.getPath()))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
100	[BUG]  [BUGGY]  }  else  if(ent.getPath()  ==  null  ||!path.equals(ent.getPath()))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(ent.getPath()  ==  null  ||!path.equals(ent.getPath()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(ent.getPath()  ==  null  ||!path.equals(ent.getPath()))  {	  }    else    if(path    ==    null    ||!path.equals(ent.getPath()))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
101	[BUG]  [BUGGY]  }  else  if(val!=  null  ||!path.equals(ent.getPath()))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val!=  null  ||!path.equals(ent.getPath()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val!=  null  ||!path.equals(ent.getPath()))  {	  }    else    if(path    ==    null    ||!path.equals(ent.getPath()))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
102	[BUG]  [BUGGY]  }  else  if(path!=  null  ||!path.equals(ent.getPath()))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path!=  null  ||!path.equals(ent.getPath()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path!=  null  ||!path.equals(ent.getPath()))  {	  }    else    if(path    ==    null    ||!path.equals(ent.getPath()))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
103	[BUG]  [BUGGY]  }  else  if(path!=  null  &&!path.equals(ent.getPath()))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path!=  null  &&!path.equals(ent.getPath()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path!=  null  &&!path.equals(ent.getPath()))  {	  }    else    if(path    ==    null    ||!path.equals(ent.getPath()))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
104	[BUG]  [BUGGY]  }  else  if(val  ==  null  ||!path.equals(ent.getValue()))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val  ==  null  ||!path.equals(ent.getValue()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val  ==  null  ||!path.equals(ent.getValue()))  {	  }    else    if(path    ==    null    ||!path.equals(ent.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
105	[BUG]  [BUGGY]  }  else  if(val!=  null  ||!path.equals(ent.getValue()))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val!=  null  ||!path.equals(ent.getValue()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val!=  null  ||!path.equals(ent.getValue()))  {	  }    else    if(path    ==    null    ||!path.equals(ent.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
106	[BUG]  [BUGGY]  }  else  if(path  ==  null  &&!path.equals(ent.getValue()))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  null  &&!path.equals(ent.getValue()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  null  &&!path.equals(ent.getValue()))  {	  }    else    if(path    ==    null    ||!path.equals(ent.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
107	[BUG]  [BUGGY]  }  else  if(path!=  null  ||!path.equals(ent.getValue()))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path!=  null  ||!path.equals(ent.getValue()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path!=  null  ||!path.equals(ent.getValue()))  {	  }    else    if(path    ==    null    ||!path.equals(ent.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
108	[BUG]  [BUGGY]  val  =  val.substring(0,  val.length()  +  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  val  =  val.substring(0,  val.length()  +  1);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	val  =  val.substring(0,  val.length()  +  1);	  val    =    val.substring(0,    val.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
109	[BUG]  [BUGGY]  val  val  =  val.substring(0,  val.length());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  val  val  =  val.substring(0,  val.length());  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	val  val  =  val.substring(0,  val.length());	  val    =    val.substring(0,    val.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
110	[BUG]  [BUGGY]  val  =  val.substring(0,  val.length()));  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  val  =  val.substring(0,  val.length()));  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	val  =  val.substring(0,  val.length()));	  val    =    val.substring(0,    val.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
111	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getKey();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getKey();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  ent.getKey();	  Entry    <    String,    String>    currEntry    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
112	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getValue()  +  1;  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  ent.getValue()  +  1;	  Entry    <    String,    String>    currEntry    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
113	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getValue()  +  2;  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getValue()  +  2;  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  ent.getValue()  +  2;	  Entry    <    String,    String>    currEntry    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
114	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).append(val);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).append(val);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String,String>)entry).append(val);	  ((    TarArchiveEntry    <    String,String>)entry).append(path);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
115	[BUG]  [BUGGY]  (TarArchiveEntry  <  String,String>)entry).append(val);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  (TarArchiveEntry  <  String,String>)entry).append(val);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	(TarArchiveEntry  <  String,String>)entry).append(val);	  ((    TarArchiveEntry    <    String,String>)entry).append(path);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
116	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).append(key);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).append(key);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String,String>)entry).append(key);	  ((    TarArchiveEntry    <    String,String>)entry).append(path);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
117	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).append(path  +  val);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).append(path  +  val);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String,String>)entry).append(path  +  val);	  ((    TarArchiveEntry    <    String,String>)entry).append(path);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
118	[BUG]  [BUGGY]  (TarArchiveEntry  <  String,String>)entry).append(path);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  (TarArchiveEntry  <  String,String>)entry).append(path);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	(TarArchiveEntry  <  String,String>)entry).append(path);	  ((    TarArchiveEntry    <    String,String>)entry).append(path);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
119	[BUG]  [BUGGY]  }  else  if('.'.equals(key)||!hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('.'.equals(key)||!hasHitEOF)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('.'.equals(key)||!hasHitEOF)  {	  }    else    if('.'.equals(key)&&!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
120	[BUG]  [BUGGY]  }  else  if('.'.equals(path)&&!hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('.'.equals(path)&&!hasHitEOF)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('.'.equals(path)&&!hasHitEOF)  {	  }    else    if('.'.equals(key)&&!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
121	[BUG]  [BUGGY]  Entry  <  String,String>  currEntry  =  headers.entrySet().getValue(),  val);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,String>  currEntry  =  headers.entrySet().getValue(),  val);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,String>  currEntry  =  headers.entrySet().getValue(),  val);	  Entry    <    String,String>    currEntry    =    headers.entrySet().getValue();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
122	[BUG]  [BUGGY]  Entry  <  String,String>  currEntry  =  headers.entrySet().getKey();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,String>  currEntry  =  headers.entrySet().getKey();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,String>  currEntry  =  headers.entrySet().getKey();	  Entry    <    String,String>    currEntry    =    headers.entrySet().getValue();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
123	[BUG]  [BUGGY]  Entry  <  String,String>  currEntry  =  headers.entrySet().getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,String>  currEntry  =  headers.entrySet().getValue()  +  1;  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,String>  currEntry  =  headers.entrySet().getValue()  +  1;	  Entry    <    String,String>    currEntry    =    headers.entrySet().getValue();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
124	[BUG]  [BUGGY]  Entry  <  String,String>  currEntry  =  headers.entrySet().getValue(val);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,String>  currEntry  =  headers.entrySet().getValue(val);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,String>  currEntry  =  headers.entrySet().getValue(val);	  Entry    <    String,String>    currEntry    =    headers.entrySet().getValue();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
125	[BUG]  [BUGGY]  Entry  <  String,String>  currEntry  =  headers.entrySet().getValue(),  val;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,String>  currEntry  =  headers.entrySet().getValue(),  val;  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,String>  currEntry  =  headers.entrySet().getValue(),  val;	  Entry    <    String,String>    currEntry    =    headers.entrySet().getValue();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
126	[BUG]  [BUGGY]  }  else  if(val  ==  null  ||!path.equals(val))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val  ==  null  ||!path.equals(val))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val  ==  null  ||!path.equals(val))  {	  }    else    if(path    ==    null    ||!path.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
127	[BUG]  [BUGGY]  }  else  if(val  ==  null  ||!path.equals(value))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val  ==  null  ||!path.equals(value))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val  ==  null  ||!path.equals(value))  {	  }    else    if(path    ==    null    ||!path.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
128	[BUG]  [BUGGY]  }  else  if(path  ==  null  &&!path.equals(value))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  null  &&!path.equals(value))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  null  &&!path.equals(value))  {	  }    else    if(path    ==    null    ||!path.equals(value))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
129	[BUG]  [BUGGY]  }  else  if(value  ==  null  ||!path.equals(value))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(value  ==  null  ||!path.equals(value))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(value  ==  null  ||!path.equals(value))  {	  }    else    if(path    ==    null    ||!path.equals(value))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
130	[BUG]  [BUGGY]  }  else  if(path  ==  null  ||!path.startsWith( "/.link "))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  null  ||!path.startsWith( "/.link "))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  null  ||!path.startsWith( "/.link "))  {	  }    else    if(path    ==    null    ||!path.startsWith(   ".link   "))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
131	[BUG]  [BUGGY]  }  else  if(val  ==  null  ||!path.startsWith( ".link "))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val  ==  null  ||!path.startsWith( ".link "))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val  ==  null  ||!path.startsWith( ".link "))  {	  }    else    if(path    ==    null    ||!path.startsWith(   ".link   "))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
132	[BUG]  [BUGGY]  }  else  if(path  ==  null  &&!path.startsWith( ".link "))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  null  &&!path.startsWith( ".link "))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  null  &&!path.startsWith( ".link "))  {	  }    else    if(path    ==    null    ||!path.startsWith(   ".link   "))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
133	[BUG]  [BUGGY]  }  else  if(path.equals(ent.getKey())||  key.equals(ent.getValue()))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(ent.getKey())||  key.equals(ent.getValue()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(ent.getKey())||  key.equals(ent.getValue()))  {	  }    else    if(path.equals(ent.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
134	[BUG]  [BUGGY]  }  else  if(key.equals(ent.getKey()))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(key.equals(ent.getKey()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(key.equals(ent.getKey()))  {	  }    else    if(path.equals(ent.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
135	[BUG]  [BUGGY]  }  else  if(!path.equals(ent.getKey()))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(!path.equals(ent.getKey()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(!path.equals(ent.getKey()))  {	  }    else    if(path.equals(ent.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
136	[BUG]  [BUGGY]  }  else  if(path.equals(ent.getKey())&&  key.equals(ent.getValue()))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(ent.getKey())&&  key.equals(ent.getValue()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(ent.getKey())&&  key.equals(ent.getValue()))  {	  }    else    if(path.equals(ent.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
137	[BUG]  [BUGGY]  }  else  if('/'.equals(ent.getKey()))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('/'.equals(ent.getKey()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('/'.equals(ent.getKey()))  {	  }    else    if(path.equals(ent.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
138	[BUG]  [BUGGY]  }  else  if(val  ==  null  ||!path.equals(ent.getKey()))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val  ==  null  ||!path.equals(ent.getKey()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val  ==  null  ||!path.equals(ent.getKey()))  {	  }    else    if(path    ==    null    ||!path.equals(ent.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
139	[BUG]  [BUGGY]  }  else  if(path  ==  null  &&!path.equals(ent.getKey()))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  null  &&!path.equals(ent.getKey()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  null  &&!path.equals(ent.getKey()))  {	  }    else    if(path    ==    null    ||!path.equals(ent.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
140	[BUG]  [BUGGY]  }  else  if(val!=  null  ||!path.equals(ent.getKey()))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val!=  null  ||!path.equals(ent.getKey()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val!=  null  ||!path.equals(ent.getKey()))  {	  }    else    if(path    ==    null    ||!path.equals(ent.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
141	[BUG]  [BUGGY]  }  else  if(path!=  null  ||!path.equals(ent.getKey()))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path!=  null  ||!path.equals(ent.getKey()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path!=  null  ||!path.equals(ent.getKey()))  {	  }    else    if(path    ==    null    ||!path.equals(ent.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
142	[BUG]  [BUGGY]  }  else  if(path!=  null  ||!path.equals(value))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path!=  null  ||!path.equals(value))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path!=  null  ||!path.equals(value))  {	  }    else    if(path!=    null    ||!path.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
143	[BUG]  [BUGGY]  }  else  if(path  ==  null  ||!path.equals(ent.getName()))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  null  ||!path.equals(ent.getName()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  null  ||!path.equals(ent.getName()))  {	  }    else    if(path    ==    null    ||!path.equals(ent.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
144	[BUG]  [BUGGY]  }  else  if(path  ==  null  ||!path.equals(ent.getLocalPath()))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  null  ||!path.equals(ent.getLocalPath()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  null  ||!path.equals(ent.getLocalPath()))  {	  }    else    if(path    ==    null    ||!path.equals(ent.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
145	[BUG]  [BUGGY]  }  else  if(path.equals('/'))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals('/'))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals('/'))  {	  }    else    if('/'.equals(path))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
146	[BUG]  [BUGGY]  }  else  if('/'.equals(path)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('/'.equals(path)&&  hasHitEOF)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('/'.equals(path)&&  hasHitEOF)  {	  }    else    if('/'.equals(path))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
147	[BUG]  [BUGGY]  }  else  if('/'.equals(path)||  val  <  0)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('/'.equals(path)||  val  <  0)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('/'.equals(path)||  val  <  0)  {	  }    else    if('/'.equals(path))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
148	[BUG]  [BUGGY]  }  else  if(path.equals(currEntry.getLinkName()))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(currEntry.getLinkName()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(currEntry.getLinkName()))  {	  }    else    if(path.equals(entry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
149	[BUG]  [BUGGY]  }  else  if(path.equals(entry.getPath()))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(entry.getPath()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(entry.getPath()))  {	  }    else    if(path.equals(entry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
150	[BUG]  [BUGGY]  }  else  if(path.equals(entry.getLink()))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(entry.getLink()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(entry.getLink()))  {	  }    else    if(path.equals(entry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
151	[BUG]  [BUGGY]  }  else  if( "linkNames   ".equals(path))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if( "linkNames   ".equals(path))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if( "linkNames   ".equals(path))  {	  }    else    if(   "linkNames   ".equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
152	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getValue()  +  4;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getValue()  +  4;  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  ent.getValue()  +  4;	  Entry    <    String,    String>    currEntry    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
153	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getValue()  +  cursor;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getValue()  +  cursor;  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  ent.getValue()  +  cursor;	  Entry    <    String,    String>    currEntry    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
154	[BUG]  [BUGGY]  }  else  if(path.equals(ent.getKey())&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(ent.getKey())&&  hasHitEOF)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(ent.getKey())&&  hasHitEOF)  {	  }    else    if(path.equals(ent.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
155	[BUG]  [BUGGY]  }  else  if(path.equals(ent.getPath()))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(ent.getPath()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(ent.getPath()))  {	  }    else    if(path.equals(ent.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
156	[BUG]  [BUGGY]  String  val  =  val.substring(0,  val.length()).trim();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  String  val  =  val.substring(0,  val.length()).trim();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	String  val  =  val.substring(0,  val.length()).trim();	  String    val    =    val.substring(0,    val.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
157	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator().first();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator().first();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator().first();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
158	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator().next()  +  1;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator().next()  +  1;  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator().next()  +  1;	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
159	[BUG]  [BUGGY]  }  else  if(zipEncoding.equals(key))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(zipEncoding.equals(key))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(zipEncoding.equals(key))  {	  }    else    if(path.equals(encoding))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
160	[BUG]  [BUGGY]  }  else  if(encoding.equals(path))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(encoding.equals(path))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(encoding.equals(path))  {	  }    else    if(path.equals(encoding))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
161	[BUG]  [BUGGY]  }  else  if(path.equals('.'))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals('.'))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals('.'))  {	  }    else    if('.'.equals(path))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
162	[BUG]  [BUGGY]  }  else  if('.'.equals(path)||  val  <  0)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('.'.equals(path)||  val  <  0)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('.'.equals(path)||  val  <  0)  {	  }    else    if('.'.equals(path))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
163	[BUG]  [BUGGY]  }  else  if('.'.equals(path)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('.'.equals(path)&&  hasHitEOF)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('.'.equals(path)&&  hasHitEOF)  {	  }    else    if('.'.equals(path))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
164	[BUG]  [BUGGY]  }  else  if(path.equals(ent.getLink()))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(ent.getLink()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(ent.getLink()))  {	  }    else    if(path.equals(ent.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
165	[BUG]  [BUGGY]  }  else  if(path  >=  null  ||!path.equals(key))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  >=  null  ||!path.equals(key))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  >=  null  ||!path.equals(key))  {	  }    else    if(path    ==    null    &&!path.equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
166	[BUG]  [BUGGY]  }  else  if(path.equals(key)&&  hasHitEOF  ||  isEOF)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(key)&&  hasHitEOF  ||  isEOF)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(key)&&  hasHitEOF  ||  isEOF)  {	  }    else    if(path.equals(key)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
167	[BUG]  [BUGGY]  }  else  if(path.equals(key)&&  hasHitEOF,  currEntry.setLinkName(val);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(key)&&  hasHitEOF,  currEntry.setLinkName(val);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(key)&&  hasHitEOF,  currEntry.setLinkName(val);	  }    else    if(path.equals(key)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
168	[BUG]  [BUGGY]  }  else  if(path.equals(key)&&  hasHitEOF  ||  currEntry.isLinkName(val))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(key)&&  hasHitEOF  ||  currEntry.isLinkName(val))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(key)&&  hasHitEOF  ||  currEntry.isLinkName(val))  {	  }    else    if(path.equals(key)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
169	[BUG]  [BUGGY]  }  else  if( "linkpath   ".equals(path))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if( "linkpath   ".equals(path))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if( "linkpath   ".equals(path))  {	  }    else    if(   ".linkpath   ".equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
170	[BUG]  [BUGGY]  Entry  <  String,String>  currEntry  =  headers.entrySet().getValue(path);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,String>  currEntry  =  headers.entrySet().getValue(path);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,String>  currEntry  =  headers.entrySet().getValue(path);	  Entry    <    String,String>    currEntry    =    headers.entrySet().getValue();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
171	[BUG]  [BUGGY]  Entry  <  String,String>  currEntry  =  headers.entrySet().iterator().getValue();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,String>  currEntry  =  headers.entrySet().iterator().getValue();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,String>  currEntry  =  headers.entrySet().iterator().getValue();	  Entry    <    String,String>    currEntry    =    headers.entrySet().getValue();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
172	[BUG]  [BUGGY]  Entry  <  String,String>  currEntry  =  headers.entrySet().get(key);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,String>  currEntry  =  headers.entrySet().get(key);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,String>  currEntry  =  headers.entrySet().get(key);	  Entry    <    String,String>    currEntry    =    headers.entrySet().getValue();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
173	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(entry);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(entry);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(entry);	  Entry    <    String,    String>    currEntry    =    headers.get(key);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
174	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key  +  1);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key  +  1);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(key  +  1);	  Entry    <    String,    String>    currEntry    =    headers.get(key);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
175	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(currEntry);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(currEntry);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(currEntry);	  Entry    <    String,    String>    currEntry    =    headers.get(key);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
176	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  currEntry.getValue();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  currEntry.getValue();	  Entry    <    String,    String>    currEntry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
177	[BUG]  [BUGGY]  }  else  if(path  ==  null  ||!path.endsWith( "./.link "))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  null  ||!path.endsWith( "./.link "))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  null  ||!path.endsWith( "./.link "))  {	  }    else    if(path    ==    null    ||!path.endsWith(   "/.link   "))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
178	[BUG]  [BUGGY]  }  else  if(path  ==  null  ||!path.endsWith( ".prototype. "))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  null  ||!path.endsWith( ".prototype. "))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  null  ||!path.endsWith( ".prototype. "))  {	  }    else    if(path    ==    null    ||!path.endsWith(   "/.link   "))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
179	[BUG]  [BUGGY]  }  else  if(path!=  null  ||!path.endsWith( "./.link "))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path!=  null  ||!path.endsWith( "./.link "))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path!=  null  ||!path.endsWith( "./.link "))  {	  }    else    if(path    ==    null    ||!path.endsWith(   "/.link   "))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
180	[BUG]  [BUGGY]  }  else  if(path!=  null  &&!path.equals(value))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path!=  null  &&!path.equals(value))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path!=  null  &&!path.equals(value))  {	  }    else    if(path!=    null    &&!path.equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
181	[BUG]  [BUGGY]  }  else  if(path!=  null  &&!path.equals(ent.getValue()))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path!=  null  &&!path.equals(ent.getValue()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path!=  null  &&!path.equals(ent.getValue()))  {	  }    else    if(path!=    null    &&!path.equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
182	[BUG]  [BUGGY]  }  else  if( ")linking ".equals(path))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if( ")linking ".equals(path))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if( ")linking ".equals(path))  {	  }    else    if(   ")link       ".equals(path))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
183	[BUG]  [BUGGY]  }  else  if(path  ==  null  ||!path.equals(encodePax))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  null  ||!path.equals(encodePax))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  null  ||!path.equals(encodePax))  {	  }    else    if(val    ==    null    ||!path.equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
184	[BUG]  [BUGGY]  }  else  if('.'.equals(path)&&  key.equals(val))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('.'.equals(path)&&  key.equals(val))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('.'.equals(path)&&  key.equals(val))  {	  }    else    if('.'.equals(key)&&    key.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
185	[BUG]  [BUGGY]  }  else  if('.'.equals(key)&&  key.equals(path))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('.'.equals(key)&&  key.equals(path))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('.'.equals(key)&&  key.equals(path))  {	  }    else    if('.'.equals(key)&&    key.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
186	[BUG]  [BUGGY]  }  else  if('.'.equals(key)&&  currEntry.setLinkName(val);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('.'.equals(key)&&  currEntry.setLinkName(val);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('.'.equals(key)&&  currEntry.setLinkName(val);	  }    else    if('.'.equals(key)&&    key.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
187	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String>)entry).setPath(new  Path(val));  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String>)entry).setPath(new  Path(val));  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String>)entry).setPath(new  Path(val));	  ((    TarArchiveEntry    <    String>)entry).setPath(path);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
188	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String>)entry).setURL(path);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String>)entry).setURL(path);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String>)entry).setURL(path);	  ((    TarArchiveEntry    <    String>)entry).setPath(path);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
189	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String>)entry).setPath(path  +  val);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String>)entry).setPath(path  +  val);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String>)entry).setPath(path  +  val);	  ((    TarArchiveEntry    <    String>)entry).setPath(path);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
190	[BUG]  [BUGGY]  }  else  if(path  ==  null  ||!path.equals(entry.getPath()))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  null  ||!path.equals(entry.getPath()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  null  ||!path.equals(entry.getPath()))  {	  }    else    if(path    ==    null    ||!path.equals(encoding))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
191	[BUG]  [BUGGY]  }  else  if(path  ==  null  ||!path.equals(entry.getValue()))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  null  ||!path.equals(entry.getValue()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  null  ||!path.equals(entry.getValue()))  {	  }    else    if(path    ==    null    ||!path.equals(encoding))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
192	[BUG]  [BUGGY]  }  else  if(path  ==  null  ||!path.equals(entry.getName()))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  null  ||!path.equals(entry.getName()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  null  ||!path.equals(entry.getName()))  {	  }    else    if(path    ==    null    ||!path.equals(encoding))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
193	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).append(path  +  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).append(path  +  1);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String,String>)entry).append(path  +  1);	  ((    TarArchiveEntry    <    String,String>)entry).append(path);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
194	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).append('/');  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).append('/');  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String,String>)entry).append('/');	  ((    TarArchiveEntry    <    String,String>)entry).append(path);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
195	[BUG]  [BUGGY]  }  else  if(path  ==  null  ||!path.equals(ent.getURL()))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  null  ||!path.equals(ent.getURL()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  null  ||!path.equals(ent.getURL()))  {	  }    else    if(path    ==    null    ||!path.equals(ent.getPath()))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
196	[BUG]  [BUGGY]  }  else  if(path  ==  null  ||!path.equals(ent.getLinkName()))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  null  ||!path.equals(ent.getLinkName()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  null  ||!path.equals(ent.getLinkName()))  {	  }    else    if(path    ==    null    ||!path.equals(ent.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
197	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).setPath(new  Path(val));  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).setPath(new  Path(val));  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String,String>)entry).setPath(new  Path(val));	  ((    TarArchiveEntry    <    String,String>)entry).setPath(path);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
198	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).setURL(path);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).setURL(path);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String,String>)entry).setURL(path);	  ((    TarArchiveEntry    <    String,String>)entry).setPath(path);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
199	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).setPath(path  +  val);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).setPath(path  +  val);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String,String>)entry).setPath(path  +  val);	  ((    TarArchiveEntry    <    String,String>)entry).setPath(path);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
200	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).setPath(new  Path(path));  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).setPath(new  Path(path));  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String,String>)entry).setPath(new  Path(path));	  ((    TarArchiveEntry    <    String,String>)entry).setPath(path);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
201	[BUG]  [BUGGY]  }  else  if( "linkNames.length   ".equals(path))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if( "linkNames.length   ".equals(path))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if( "linkNames.length   ".equals(path))  {	  }    else    if(   "linkNames.length   ".equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
202	[BUG]  [BUGGY]  }  else  if(path!=  null  ||!path.startsWith( ".link "))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path!=  null  ||!path.startsWith( ".link "))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path!=  null  ||!path.startsWith( ".link "))  {	  }    else    if(path    ==    null    ||!path.startsWith(   ".link   "))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
203	[BUG]  [BUGGY]  }  else  if(path  ==  null  ||!path.equals( ".link "))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  null  ||!path.equals( ".link "))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  null  ||!path.equals( ".link "))  {	  }    else    if(path    ==    null    ||!path.startsWith(   ".link   "))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
204	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().valueToString(val);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().valueToString(val);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().valueToString(val);	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
205	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().trim();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().trim();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().trim();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
206	[BUG]  [BUGGY]  }  else  if(path!=  null  &&!path.equals(ent.getKey()))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path!=  null  &&!path.equals(ent.getKey()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path!=  null  &&!path.equals(ent.getKey()))  {	  }    else    if(path    ==    null    &&!path.equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
207	[BUG]  [BUGGY]  }  else  if(path!=  null  &&!path.equals(encoding))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path!=  null  &&!path.equals(encoding))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path!=  null  &&!path.equals(encoding))  {	  }    else    if(path    ==    null    &&!path.equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
208	[BUG]  [BUGGY]  }  else  if(path.equals(entry.getValue()))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(entry.getValue()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(entry.getValue()))  {	  }    else    if(path.equals(encoding))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
209	[BUG]  [BUGGY]  }  else  if(val.equals(path)||  val.equals( "link "))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val.equals(path)||  val.equals( "link "))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val.equals(path)||  val.equals( "link "))  {	  }    else    if(val.equals(path))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
210	[BUG]  [BUGGY]  }  else  if('path'.equals(key))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('path'.equals(key))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('path'.equals(key))  {	  }    else    if(val.equals(path))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
211	[BUG]  [BUGGY]  }  else  if('.'.equals(key)&&  val.equals(path))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('.'.equals(key)&&  val.equals(path))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('.'.equals(key)&&  val.equals(path))  {	  }    else    if('.'.equals(key)&&    key.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
212	[BUG]  [BUGGY]  }  else  if('.'.equals(key)&&  path.equals(key))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('.'.equals(key)&&  path.equals(key))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('.'.equals(key)&&  path.equals(key))  {	  }    else    if('.'.equals(key)&&    key.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
213	[BUG]  [BUGGY]  }  else  if('.'.equals(key)&&  val  <  =  val)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('.'.equals(key)&&  val  <  =  val)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('.'.equals(key)&&  val  <  =  val)  {	  }    else    if('.'.equals(key)&&    key.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
214	[BUG]  [BUGGY]  }  else  if('.'.equals(key)&&  val.startsWith( "link "))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('.'.equals(key)&&  val.startsWith( "link "))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('.'.equals(key)&&  val.startsWith( "link "))  {	  }    else    if('.'.equals(key)&&    key.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
215	[BUG]  [BUGGY]  }  else  if(path  ==  key  ||!path.equals(ent.getPath()))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  key  ||!path.equals(ent.getPath()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  key  ||!path.equals(ent.getPath()))  {	  }    else    if(path    ==    null    ||!path.equals(ent.getPath()))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
216	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String>)entry).setLinkName(val);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String>)entry).setLinkName(val);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String>)entry).setLinkName(val);	  ((    TarArchiveEntry    <    String>)entry).setPath(path);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
217	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String>)entry).setPath(null);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String>)entry).setPath(null);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String>)entry).setPath(null);	  ((    TarArchiveEntry    <    String>)entry).setPath(path);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
218	[BUG]  [BUGGY]  }  else  if(val  <  0  ||!path.equals(key))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val  <  0  ||!path.equals(key))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val  <  0  ||!path.equals(key))  {	  }    else    if(val    ==    null    ||!path.equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
219	[BUG]  [BUGGY]  }  else  if(path  ==  key  ||!path.equals(ent.getValue()))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  key  ||!path.equals(ent.getValue()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  key  ||!path.equals(ent.getValue()))  {	  }    else    if(path    ==    null    ||!path.equals(ent.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
220	[BUG]  [BUGGY]  }  else  if(path  ==  null  ||!path.equals(entry.getKey()))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  null  ||!path.equals(entry.getKey()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  null  ||!path.equals(entry.getKey()))  {	  }    else    if(path    ==    null    ||!path.equals(ent.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
221	[BUG]  [BUGGY]  }  else  if(path  ==  key  ||!path.equals(ent.getKey()))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  key  ||!path.equals(ent.getKey()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  key  ||!path.equals(ent.getKey()))  {	  }    else    if(path    ==    null    ||!path.equals(ent.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
222	[BUG]  [BUGGY]  }  else  if( ".links ".equals(key))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if( ".links ".equals(key))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if( ".links ".equals(key))  {	  }    else    if(   "links       ".equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
223	[BUG]  [BUGGY]  }  else  if( ".linkNames.contains(key))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if( ".linkNames.contains(key))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if( ".linkNames.contains(key))  {	  }    else    if('.'.equals(path))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
224	[BUG]  [BUGGY]  }  else  if( ".linkNames.contains(key)||  '.'.equals(path))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if( ".linkNames.contains(key)||  '.'.equals(path))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if( ".linkNames.contains(key)||  '.'.equals(path))  {	  }    else    if('.'.equals(path))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
225	[BUG]  [BUGGY]  }  else  if(path.equals( "link "))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals( "link "))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals( "link "))  {	  }    else    if('.'.equals(path))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
226	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getValue()  +  val;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getValue()  +  val;  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  ent.getValue()  +  val;	  Entry    <    String,    String>    currEntry    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
227	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getValue()  +  entry.getName();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getValue()  +  entry.getName();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  ent.getValue()  +  entry.getName();	  Entry    <    String,    String>    currEntry    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
228	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).setPath(null);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).setPath(null);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String,String>)entry).setPath(null);	  ((    TarArchiveEntry    <    String,String>)entry).setPath(path);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
229	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).setPath(new  File(val));  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).setPath(new  File(val));  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String,String>)entry).setPath(new  File(val));	  ((    TarArchiveEntry    <    String,String>)entry).setPath(path);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
230	[BUG]  [BUGGY]  }  else  if(path.equals(entry.getKey())&&  key.equals(entry.getValue()))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(entry.getKey())&&  key.equals(entry.getValue()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(entry.getKey())&&  key.equals(entry.getValue()))  {	  }    else    if(path.equals(entry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
231	[BUG]  [BUGGY]  }  else  if(path.equals(entry.getKey())||  val.equals(entry.getValue()))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(entry.getKey())||  val.equals(entry.getValue()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(entry.getKey())||  val.equals(entry.getValue()))  {	  }    else    if(path.equals(entry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
232	[BUG]  [BUGGY]  }  else  if(path.equals(entry.getKey())&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(entry.getKey())&&  hasHitEOF)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(entry.getKey())&&  hasHitEOF)  {	  }    else    if(path.equals(entry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
233	[BUG]  [BUGGY]  }  else  if('.'.equals(key)&&!isLinkEncoding())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('.'.equals(key)&&!isLinkEncoding())  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('.'.equals(key)&&!isLinkEncoding())  {	  }    else    if('.'.equals(key)&&!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
234	[BUG]  [BUGGY]  }  else  if('.'.equals(key)&&!hashitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('.'.equals(key)&&!hashitEOF)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('.'.equals(key)&&!hashitEOF)  {	  }    else    if('.'.equals(key)&&!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
235	[BUG]  [BUGGY]  }  else  if(path.equals(value)||  val.equals( "link "))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(value)||  val.equals( "link "))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(value)||  val.equals( "link "))  {	  }    else    if(path.equals(value))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
236	[BUG]  [BUGGY]  }  else  if(path.equals(value)&&  key.equals(val))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(value)&&  key.equals(val))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(value)&&  key.equals(val))  {	  }    else    if(path.equals(value))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
237	[BUG]  [BUGGY]  }  else  if(!path.equals(value))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(!path.equals(value))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(!path.equals(value))  {	  }    else    if(path.equals(value))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
238	[BUG]  [BUGGY]  }  else  if(!'/'.equals(key)&&!hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(!'/'.equals(key)&&!hasHitEOF)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(!'/'.equals(key)&&!hasHitEOF)  {	  }    else    if('/'.equals(key)&&!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
239	[BUG]  [BUGGY]  }  else  if('/'.equals(key)&&!isLinkEncoding())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if('/'.equals(key)&&!isLinkEncoding())  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if('/'.equals(key)&&!isLinkEncoding())  {	  }    else    if('/'.equals(key)&&!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
240	[BUG]  [BUGGY]  }  else  if(path  ==  key  ||!path.equals(value))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  key  ||!path.equals(value))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  key  ||!path.equals(value))  {	  }    else    if(path    ==    null    ||!path.equals(value))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
241	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key  -  val);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key  -  val);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(key  -  val);	  Entry    <    String,    String>    currEntry    =    headers.get(key);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
242	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key).trim();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key).trim();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(key).trim();	  Entry    <    String,    String>    currEntry    =    headers.get(key);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
243	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key  + ".path ");  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key  + ".path ");  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(key  + ".path ");	  Entry    <    String,    String>    currEntry    =    headers.get(key);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
244	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.entrySet().iterator();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.entrySet().iterator();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  ent.entrySet().iterator();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
245	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator()  :  ent.getKey();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator()  :  ent.getKey();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator()  :  ent.getKey();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
246	[BUG]  [BUGGY]  }  else  if( ".linking ".equals(key))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if( ".linking ".equals(key))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if( ".linking ".equals(key))  {	  }    else    if(   ")linking   ".equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
247	[BUG]  [BUGGY]  }  else  if(path.equals(key)&&  isLinkEncoding)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(key)&&  isLinkEncoding)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(key)&&  isLinkEncoding)  {	  }    else    if(path.equals(key)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
248	[BUG]  [BUGGY]  }  else  if(path.equals(key)&&  hasHitLink)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(key)&&  hasHitLink)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(key)&&  hasHitLink)  {	  }    else    if(path.equals(key)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
249	[BUG]  [BUGGY]  }  else  if(path.equals(key)&&  hashitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(key)&&  hashitEOF)  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(key)&&  hashitEOF)  {	  }    else    if(path.equals(key)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
250	[BUG]  [BUGGY]  }  else  if( ".linkNames.contains(key)||  '/'.equals(path))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if( ".linkNames.contains(key)||  '/'.equals(path))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if( ".linkNames.contains(key)||  '/'.equals(path))  {	  }    else    if('/'.equals(path))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
251	[BUG]  [BUGGY]  }  else  if(path.equals(ent.getKey())||  val.equals(ent.getValue()))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path.equals(ent.getKey())||  val.equals(ent.getValue()))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path.equals(ent.getKey())||  val.equals(ent.getValue()))  {	  }    else    if(path.equals(ent.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
252	[BUG]  [BUGGY]  String  val  =  val.substring(0,  val.length()  *  1);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  String  val  =  val.substring(0,  val.length()  *  1);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	String  val  =  val.substring(0,  val.length()  *  1);	  String    val    =    val.substring(0,    val.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
253	[BUG]  [BUGGY]  }  else  if( "links.length ".equals(key))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if( "links.length ".equals(key))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if( "links.length ".equals(key))  {	  }    else    if(   "linkNames.length   ".equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
254	[BUG]  [BUGGY]  }  else  if(val  >=  null  ||!path.endsWith( ".link "))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(val  >=  null  ||!path.endsWith( ".link "))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(val  >=  null  ||!path.endsWith( ".link "))  {	  }    else    if(val    ==    null    ||!path.endsWith(   ".link   "))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
255	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.entrySet().iterator().next();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.entrySet().iterator().next();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  ent.entrySet().iterator().next();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
256	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.trim().iterator().next();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.trim().iterator().next();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	Entry  <  String,  String>  currEntry  =  headers.trim().iterator().next();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
257	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).append(value);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  ((  TarArchiveEntry  <  String,String>)entry).append(value);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	((  TarArchiveEntry  <  String,String>)entry).append(value);	  ((    TarArchiveEntry    <    String,String>)entry).append(path);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
258	[BUG]  [BUGGY]  val  =  val.substring(0,  val.length())+  1;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  val  =  val.substring(0,  val.length())+  1;  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	val  =  val.substring(0,  val.length())+  1;	  val    =    val.substring(0,    val.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
259	[BUG]  [BUGGY]  val  =  val.substring(0,  val.length()).trim();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  val  =  val.substring(0,  val.length()).trim();  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	val  =  val.substring(0,  val.length()).trim();	  val    =    val.substring(0,    val.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
260	[BUG]  [BUGGY]  val  =  val.substring(0,  val.length()  *  1);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  val  =  val.substring(0,  val.length()  *  1);  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	val  =  val.substring(0,  val.length()  *  1);	  val    =    val.substring(0,    val.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
261	[BUG]  [BUGGY]  }  else  if(path  ==  key  ||!path.equals(encoding))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);      [BUGGY]  }  else  if(path  ==  key  ||!path.equals(encoding))  {  [BUGGY]      currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	498	498	1	replace	}  else  if(path  ==  key  ||!path.equals(encoding))  {	  }    else    if(path    ==    null    ||!path.equals(encoding))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
