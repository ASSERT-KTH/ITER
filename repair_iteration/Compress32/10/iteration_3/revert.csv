projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif("linkpath".equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif("link".equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(")link".equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(".link".equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val.equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('/'.equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('.'.equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(")linkpath".equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null||!path.equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null||!path.endsWith(".link")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(")linkpath".equals(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null||!path.endsWith("/.link")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val==null||!path.endsWith(".link")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path!=null||!path.endsWith(".link")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif("linkName".equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif("linkNames".equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('.'.equals(path)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif("links".equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif("link".equals(path)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(")linking".equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(")link".equals(path)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=entry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=ent.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498val=val.substring(0,val.length()-1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Stringval=val.substring(0,val.length()-1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('/'.equals(path)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val==null||!path.equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null||!path.equals(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null&&!path.equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val!=null||!path.equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path!=null||!path.equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path!=null&&!path.equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val.equals(path)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif("linkNames.length".equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(ent.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(value)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(key)&&hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(")linkpath".equals(path)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null||!path.equals(ent.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null||!path.equals(value)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null||!path.equals(ent.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path!=null||!path.equals(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null||!path.startsWith(".link")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.entrySet().iterator().next();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String>)entry).setPath(path);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String,String>)entry).setPath(path);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.get(key);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.entrySet().iterator();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.entrySet().getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String,String>)entry).append(path);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('/'.equals(key)&&!hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(ent.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(entry.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(encoding)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('.'.equals(key)&&!hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('.'.equals(key)&&key.equals(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null||!path.equals(encoding)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null||!path.equals(ent.getPath())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(".linkpath".equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Stringval=val.substring(0,val.length());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498val=val.substring(0,val.length());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Stringval=val.substring(0,val.length()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Stringval=key.substring(0,val.length()-1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Stringval=val.substring(0,val.length())+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Stringval=val.substring(0,val.length()));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val.equals(ent.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val.equals(ent.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(!path.equals(ent.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(ent.getLinkName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String,String>)entry).setPath(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498(TarArchiveEntry<String,String>)entry).setPath(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String,String>)entry).setPath(key);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498(TarArchiveEntry<String,String>)entry).setPath(path);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String,String>)entry).setPath(path+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String,String>)entry).setURL(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val>=null||!path.equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val.equals(entry.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(entry.getLinkName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(key.equals(entry.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(!path.equals(entry.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val.equals(entry.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val.equals('/')){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('/'.equals(path)||val==Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val.equals("linkNames.length")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=entry.getValue()+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=entry.getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=val.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=entry.getValue(),val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=entry.getValue()+val;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val!=null&&!path.equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val.equals("link")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String>)entry).setPath(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498(TarArchiveEntry<String>)entry).setPath(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String>)entry).setPath(path,val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String>)entry).setURL(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String>)entry).setPath(key);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String>)entry).setPath(path+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val.equals(key)&&hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(key)||hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(key.equals(path)&&hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(key)&&isEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(!path.equals(key)&&hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('.'.equals(key)&&hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.entrySet().iterator().next(),val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.get(key).iterator().next();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=ent.getKey().iterator().next();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.get(ent.getKey()).iterator().next();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.keySet().iterator().next();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.iterator().next();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('/'.equals(key)&&hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('/'.equals(key)||!hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('/'.equals(path)&&!hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('/'.equals(key)&&isHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.get(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.get(key+val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.get(ent.key);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.get(key-1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.get(path);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.get(ent.path);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val.equals("linkpath")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(value.equals(path)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val.equals(value)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('.'.equals(key)&&val.equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('.'.equals(key)||key.equals(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('.'.equals(key)&&currEntry.setLinkName(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('.'.equals(key)&&currEntry.getLinkName().equals(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('.'.equals(key)&&path.equals(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('.'.equals(key)&&val.equals(value)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.keySet().iterator();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.iterator();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=val.entrySet().iterator();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.entrySet().iterator():val;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.get(key).iterator();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null&&!path.equals(encoding)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val==null||!path.equals(encoding)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path!=null||!path.equals(encoding)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null||!path.equals(ent.encoding)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path!=null&&!path.endsWith(".link")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path!=null||!path.endsWith("/.link")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null&&!path.endsWith(".link")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val==null&&!path.equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path!=null&&!path.equals(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val.equals(encoding)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(!zipEncoding.equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val!=null||!path.equals(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null&&!path.equals(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val!=null||!path.equals(value)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val==null||!path.endsWith("/.link")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null&&!path.endsWith("/.link")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val!=null||!path.endsWith(".link")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val.equals('.')){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif("linking".equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif("linkName".equals(path)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif("linkName".equals(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif("links".equals(path)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif("links.".equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val==null||!path.equals(ent.getPath())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null&&!path.equals(ent.getPath())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(ent.getPath()==null||!path.equals(ent.getPath())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val!=null||!path.equals(ent.getPath())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path!=null||!path.equals(ent.getPath())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path!=null&&!path.equals(ent.getPath())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val==null||!path.equals(ent.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val!=null||!path.equals(ent.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null&&!path.equals(ent.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path!=null||!path.equals(ent.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498val=val.substring(0,val.length()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498valval=val.substring(0,val.length());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498val=val.substring(0,val.length()));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=ent.getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=ent.getValue()+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=ent.getValue()+2;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String,String>)entry).append(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498(TarArchiveEntry<String,String>)entry).append(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String,String>)entry).append(key);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String,String>)entry).append(path+val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498(TarArchiveEntry<String,String>)entry).append(path);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('.'.equals(key)||!hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('.'.equals(path)&&!hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.entrySet().getValue(),val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.entrySet().getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.entrySet().getValue()+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.entrySet().getValue(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.entrySet().getValue(),val;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val==null||!path.equals(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val==null||!path.equals(value)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null&&!path.equals(value)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(value==null||!path.equals(value)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null||!path.startsWith("/.link")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val==null||!path.startsWith(".link")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null&&!path.startsWith(".link")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(ent.getKey())||key.equals(ent.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(key.equals(ent.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(!path.equals(ent.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(ent.getKey())&&key.equals(ent.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('/'.equals(ent.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val==null||!path.equals(ent.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null&&!path.equals(ent.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val!=null||!path.equals(ent.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path!=null||!path.equals(ent.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path!=null||!path.equals(value)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null||!path.equals(ent.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null||!path.equals(ent.getLocalPath())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals('/')){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('/'.equals(path)&&hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('/'.equals(path)||val<0){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(currEntry.getLinkName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(entry.getPath())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(entry.getLink())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif("linkNames".equals(path)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=ent.getValue()+4;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=ent.getValue()+cursor;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(ent.getKey())&&hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(ent.getPath())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Stringval=val.substring(0,val.length()).trim();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.entrySet().iterator().first();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.entrySet().iterator().next()+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(zipEncoding.equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(encoding.equals(path)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals('.')){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('.'.equals(path)||val<0){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('.'.equals(path)&&hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(ent.getLink())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path>=null||!path.equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(key)&&hasHitEOF||isEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(key)&&hasHitEOF,currEntry.setLinkName(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(key)&&hasHitEOF||currEntry.isLinkName(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif("linkpath".equals(path)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.entrySet().getValue(path);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.entrySet().iterator().getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.entrySet().get(key);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.get(entry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.get(key+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.get(currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null||!path.endsWith("./.link")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null||!path.endsWith(".prototype.")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path!=null||!path.endsWith("./.link")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path!=null&&!path.equals(value)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path!=null&&!path.equals(ent.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(")linking".equals(path)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null||!path.equals(encodePax)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('.'.equals(path)&&key.equals(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('.'.equals(key)&&key.equals(path)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('.'.equals(key)&&currEntry.setLinkName(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String>)entry).setPath(newPath(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String>)entry).setURL(path);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String>)entry).setPath(path+val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null||!path.equals(entry.getPath())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null||!path.equals(entry.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null||!path.equals(entry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String,String>)entry).append(path+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String,String>)entry).append('/');
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null||!path.equals(ent.getURL())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null||!path.equals(ent.getLinkName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String,String>)entry).setPath(newPath(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String,String>)entry).setURL(path);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String,String>)entry).setPath(path+val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String,String>)entry).setPath(newPath(path));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif("linkNames.length".equals(path)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path!=null||!path.startsWith(".link")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null||!path.equals(".link")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.entrySet().valueToString(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.entrySet().trim();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path!=null&&!path.equals(ent.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path!=null&&!path.equals(encoding)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(entry.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val.equals(path)||val.equals("link")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('path'.equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('.'.equals(key)&&val.equals(path)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('.'.equals(key)&&path.equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('.'.equals(key)&&val<=val){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('.'.equals(key)&&val.startsWith("link")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==key||!path.equals(ent.getPath())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String>)entry).setLinkName(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String>)entry).setPath(null);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val<0||!path.equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==key||!path.equals(ent.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==null||!path.equals(entry.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==key||!path.equals(ent.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(".links".equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(".linkNames.contains(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(".linkNames.contains(key)||'.'.equals(path)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals("link")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=ent.getValue()+val;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=ent.getValue()+entry.getName();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String,String>)entry).setPath(null);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String,String>)entry).setPath(newFile(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(entry.getKey())&&key.equals(entry.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(entry.getKey())||val.equals(entry.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(entry.getKey())&&hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('.'.equals(key)&&!isLinkEncoding()){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('.'.equals(key)&&!hashitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(value)||val.equals("link")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(value)&&key.equals(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(!path.equals(value)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(!'/'.equals(key)&&!hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif('/'.equals(key)&&!isLinkEncoding()){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==key||!path.equals(value)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.get(key-val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.get(key).trim();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.get(key+".path");
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=ent.entrySet().iterator();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.entrySet().iterator():ent.getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(".linking".equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(key)&&isLinkEncoding){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(key)&&hasHitLink){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(key)&&hashitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(".linkNames.contains(key)||'/'.equals(path)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path.equals(ent.getKey())||val.equals(ent.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Stringval=val.substring(0,val.length()*1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif("links.length".equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(val>=null||!path.endsWith(".link")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=ent.entrySet().iterator().next();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498Entry<String,String>currEntry=headers.trim().iterator().next();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498((TarArchiveEntry<String,String>)entry).append(value);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498val=val.substring(0,val.length())+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498val=val.substring(0,val.length()).trim();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498val=val.substring(0,val.length()*1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java498}elseif(path==key||!path.equals(encoding)){
