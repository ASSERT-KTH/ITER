bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getMethod(),  longNameData);  [CE]  <identifier>  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getMethod(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getMethod(),  longNameData);	  parsePaxHeader(currEntry.getMethod());    	non-compiled	[CE]  <identifier>  expected	111	None	replace
2	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getMethod(),  true);  [CE]  not  a  statement  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getMethod(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getMethod(),  true);	  parsePaxHeader(currEntry.getMethod());    	non-compiled	[CE]  not  a  statement	111	None	replace
3	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getMethod(),  null);  [CE]  not  a  statement  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getMethod(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getMethod(),  null);	  parsePaxHeader(currEntry.getMethod());    	non-compiled	[CE]  not  a  statement	111	None	replace
4	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getMethod(),  false);  [CE]  not  a  statement  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getMethod(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getMethod(),  false);	  parsePaxHeader(currEntry.getMethod());    	non-compiled	[CE]  not  a  statement	111	None	replace
5	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getMethod(),  this);  [CE]  not  a  statement  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getMethod(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getMethod(),  this);	  parsePaxHeader(currEntry.getMethod());    	non-compiled	[CE]  not  a  statement	111	None	replace
6	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getShortName());  [CE]  not  a  statement  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getShortName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getShortName());	  parsePaxHeader(currEntry.getString());    	non-compiled	[CE]  not  a  statement	69	None	replace
7	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getSimpleName());  [CE]  not  a  statement  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getSimpleName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getSimpleName());	  parsePaxHeader(currEntry.getString());    	non-compiled	[CE]  not  a  statement	69	None	replace
8	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getPaxHeader(),  longNameData);  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getPaxHeader(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getPaxHeader(),  longNameData);	  validatePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  not  a  statement	30	None	replace
9	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getPaxHeader(),  true);  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getPaxHeader(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getPaxHeader(),  true);	  validatePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  not  a  statement	30	None	replace
10	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getPaxHeader(),  headers);  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getPaxHeader(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getPaxHeader(),  headers);	  validatePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  not  a  statement	30	None	replace
11	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getPaxHeader(),  false);  [CE]  not  a  statement  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getPaxHeader(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getPaxHeader(),  false);	  validatePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  not  a  statement	30	None	replace
12	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getPaxHeader(),  null);  [CE]  not  a  statement  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getPaxHeader(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getPaxHeader(),  null);	  validatePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  not  a  statement	30	None	replace
13	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(headers);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(headers);	  RehashPaxHeaders    currEntry    =    new    RehashPaxHeaders();    	non-compiled	[CE]  not  a  statement	112	None	replace
14	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(0,  0);  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(0,  0);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(0,  0);	  RehashPaxHeaders    currEntry    =    new    RehashPaxHeaders();    	non-compiled	[CE]  not  a  statement	112	None	replace
15	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(null);  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(null);	  RehashPaxHeaders    currEntry    =    new    RehashPaxHeaders();    	non-compiled	[CE]  not  a  statement	112	None	replace
16	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(true);  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(true);	  RehashPaxHeaders    currEntry    =    new    RehashPaxHeaders();    	non-compiled	[CE]  not  a  statement	112	None	replace
17	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(64);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(64);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(64);	  RehashPaxHeaders    currEntry    =    new    RehashPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
18	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getName(),  true);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeaders(currEntry.getName(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getName(),  true);	  scanPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
19	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getName(),  longNameData);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeaders(currEntry.getName(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getName(),  longNameData);	  scanPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
20	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getName(),  false);  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeaders(currEntry.getName(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getName(),  false);	  scanPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
21	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getName(),  headerBuf);  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeaders(currEntry.getName(),  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getName(),  headerBuf);	  scanPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
22	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerData);  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this.headerData);	  wrapPaxHeader(currEntry.getName(),    this.headerBuf);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
23	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf,  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this.headerBuf,  hasHitEOF);	  wrapPaxHeader(currEntry.getName(),    this.headerBuf);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
24	[BUG]  [BUGGY]  WrapPaxHeader  currEntry  =  wrapPaxHeader(currEntry.getName(),  this.headerBuf);  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  WrapPaxHeader  currEntry  =  wrapPaxHeader(currEntry.getName(),  this.headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	WrapPaxHeader  currEntry  =  wrapPaxHeader(currEntry.getName(),  this.headerBuf);	  wrapPaxHeader(currEntry.getName(),    this.headerBuf);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
25	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.header);  [CE]  illegal  start  of  expression  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.header);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this.header);	  wrapPaxHeader(currEntry.getName(),    this.headerBuf);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
26	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf,  isHitEOF);  [CE]  not  a  statement  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf,  isHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this.headerBuf,  isHitEOF);	  wrapPaxHeader(currEntry.getName(),    this.headerBuf);    	non-compiled	[CE]  not  a  statement	49	None	replace
27	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf,  this.stringEncoding);  [CE]  not  a  statement  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf,  this.stringEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this.headerBuf,  this.stringEncoding);	  wrapPaxHeader(currEntry.getName(),    this.headerBuf);    	non-compiled	[CE]  not  a  statement	49	None	replace
28	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf,  longLinkData);  [CE]  not  a  statement  [FE]                                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf,  longLinkData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this.headerBuf,  longLinkData);	  wrapPaxHeader(currEntry.getName(),    this.headerBuf);    	non-compiled	[CE]  not  a  statement	49	None	replace
29	[BUG]  [BUGGY]  rehashPax(currEntry.getName());  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPax(currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPax(currEntry.getName());	  rehashPaxHeader();    	non-compiled	[CE]  not  a  statement	32	None	replace
30	[BUG]  [BUGGY]  rehashPaxFileHeader();  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxFileHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxFileHeader();	  rehashPaxHeader();    	non-compiled	[CE]  not  a  statement	32	None	replace
31	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getName(),  longNameData);  [CE]  not  a  statement  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry.getName(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getName(),  longNameData);	  traversePaxHeaders(currEntry.getName());    	non-compiled	[CE]  not  a  statement	60	None	replace
32	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getName(),  true);  [CE]  not  a  statement  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry.getName(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getName(),  true);	  traversePaxHeaders(currEntry.getName());    	non-compiled	[CE]  not  a  statement	60	None	replace
33	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getName(),  this);  [CE]  not  a  statement  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry.getName(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getName(),  this);	  traversePaxHeaders(currEntry.getName());    	non-compiled	[CE]  not  a  statement	60	None	replace
34	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getName(),  false);  [CE]  not  a  statement  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry.getName(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getName(),  false);	  traversePaxHeaders(currEntry.getName());    	non-compiled	[CE]  not  a  statement	60	None	replace
35	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getName(),  null);  [CE]  not  a  statement  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry.getName(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getName(),  null);	  traversePaxHeaders(currEntry.getName());    	non-compiled	[CE]  not  a  statement	60	None	replace
36	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerBuf,  false);  [CE]  not  a  statement  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerBuf,  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  headerBuf,  false);	  wrapPaxHeader(currEntry.getName(),    longNameData,    false);    	non-compiled	[CE]  not  a  statement	47	None	replace
37	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE,  false);  [CE]  not  a  statement  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE,  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE,  false);	  wrapPaxHeader(currEntry.getName(),    longNameData,    false);    	non-compiled	[CE]  not  a  statement	47	None	replace
38	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerBuf,  longNameData,  false);  [CE]  not  a  statement  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerBuf,  longNameData,  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  headerBuf,  longNameData,  false);	  wrapPaxHeader(currEntry.getName(),    longNameData,    false);    	non-compiled	[CE]  not  a  statement	47	None	replace
39	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf,  longNameData,  false);  [CE]  not  a  statement  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf,  longNameData,  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this.headerBuf,  longNameData,  false);	  wrapPaxHeader(currEntry.getName(),    longNameData,    false);    	non-compiled	[CE]  not  a  statement	47	None	replace
40	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  false,  hasHitEOF);  [CE]  not  a  statement  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  false,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  false,  hasHitEOF);	  wrapPaxHeader(currEntry.getName(),    longNameData,    false);    	non-compiled	[CE]  not  a  statement	47	None	replace
41	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  shortNameData,  false);  [CE]  not  a  statement  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  shortNameData,  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  shortNameData,  false);	  wrapPaxHeader(currEntry.getName(),    longNameData,    false);    	non-compiled	[CE]  not  a  statement	47	None	replace
42	[BUG]  [BUGGY]  rehashPaxHeaders(currEntry.getPaxHeader());  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeaders(currEntry.getPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeaders(currEntry.getPaxHeader());	  rehashPaxHeaders(currEntry);    	non-compiled	[CE]  not  a  statement	79	None	replace
43	[BUG]  [BUGGY]  rehashPaxHeaders(currEntry,  headerBuf);  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeaders(currEntry,  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeaders(currEntry,  headerBuf);	  rehashPaxHeaders(currEntry);    	non-compiled	[CE]  not  a  statement	79	None	replace
44	[BUG]  [BUGGY]  rehashPaxHeaders(currEntry.getMethod());  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeaders(currEntry.getMethod());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeaders(currEntry.getMethod());	  rehashPaxHeaders(currEntry);    	non-compiled	[CE]  not  a  statement	79	None	replace
45	[BUG]  [BUGGY]  rehashPaxHeaders(currEntry.getPax());  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeaders(currEntry.getPax());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeaders(currEntry.getPax());	  rehashPaxHeaders(currEntry);    	non-compiled	[CE]  not  a  statement	79	None	replace
46	[BUG]  [BUGGY]  Pax  headers  =  currEntry.getHeaders();  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  currEntry.getHeaders();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  currEntry.getHeaders();	  Pax    headers    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  not  a  statement	39	None	replace
47	[BUG]  [BUGGY]  Pax  headers  =  currEntry.getRawHeaders();  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  currEntry.getRawHeaders();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  currEntry.getRawHeaders();	  Pax    headers    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
48	[BUG]  [BUGGY]  Pax  headers  =  currEntry.getRealHeaders();  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  currEntry.getRealHeaders();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  currEntry.getRealHeaders();	  Pax    headers    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
49	[BUG]  [BUGGY]  Pax  headers  =  currEntry.getSize();  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  currEntry.getSize();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  currEntry.getSize();	  Pax    headers    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
50	[BUG]  [BUGGY]  Pax  headers  =  currEntry.getName();  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  currEntry.getName();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  currEntry.getName();	  Pax    headers    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
51	[BUG]  [BUGGY]  Pax  headers  =  currEntry.getPaxHeaders()  +  1;  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  currEntry.getPaxHeaders()  +  1;  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  currEntry.getPaxHeaders()  +  1;	  Pax    headers    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
52	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getMethod(),  longNameData);  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getMethod(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getMethod(),  longNameData);	  rehashPaxHeader(currEntry.getMethod());    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
53	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getMethod(),  true);  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getMethod(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getMethod(),  true);	  rehashPaxHeader(currEntry.getMethod());    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
54	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getMethod(),  null);  [CE]  illegal  start  of  expression  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getMethod(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getMethod(),  null);	  rehashPaxHeader(currEntry.getMethod());    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
55	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getMethod(),  headers);  [CE]  illegal  start  of  expression  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getMethod(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getMethod(),  headers);	  rehashPaxHeader(currEntry.getMethod());    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
56	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getMethod(),  false);  [CE]  illegal  start  of  expression  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getMethod(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getMethod(),  false);	  rehashPaxHeader(currEntry.getMethod());    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
57	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getSize()  -  1);  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getSize()  -  1);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getSize()  -  1);	  parsePaxHeader(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
58	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getParent());  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getParent());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getParent());	  parsePaxHeader(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
59	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getRecordSize());  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getRecordSize());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getRecordSize());	  parsePaxHeader(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
60	[BUG]  [BUGGY]  RehashPaxHeader(currEntry.getPaxHeader());  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeader(currEntry.getPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeader(currEntry.getPaxHeader());	  if(currEntry.getPaxHeader()!=    null)    {    rehashPaxHeader(currEntry.getPaxHeader());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
61	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(currEntry.getPaxHeader()!=    null)    {    rehashPaxHeader(currEntry.getPaxHeader());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
62	[BUG]  [BUGGY]  RectangleEdge  currEntry  =  currEntry.getPaxHeader();  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RectangleEdge  currEntry  =  currEntry.getPaxHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RectangleEdge  currEntry  =  currEntry.getPaxHeader();	  if(currEntry.getPaxHeader()!=    null)    {    rehashPaxHeader(currEntry.getPaxHeader());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
63	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  getNextTarEntry();  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =  getNextTarEntry();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  getNextTarEntry();	  RehashPaxHeaders    currEntry    =    getNextPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
64	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  getCurrentPaxHeaders();  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =  getCurrentPaxHeaders();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  getCurrentPaxHeaders();	  RehashPaxHeaders    currEntry    =    getNextPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
65	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =(RehashPaxHeaders)getNextPaxHeaders();  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =(RehashPaxHeaders)getNextPaxHeaders();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =(RehashPaxHeaders)getNextPaxHeaders();	  RehashPaxHeaders    currEntry    =    getNextPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
66	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  getPreviousPaxHeaders();  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =  getPreviousPaxHeaders();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  getPreviousPaxHeaders();	  RehashPaxHeaders    currEntry    =    getNextPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
67	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  getNextPaxHeaders(currEntry.getName());  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =  getNextPaxHeaders(currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  getNextPaxHeaders(currEntry.getName());	  RehashPaxHeaders    currEntry    =    getNextPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
68	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  getNextPaxHeaders(headers);  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =  getNextPaxHeaders(headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  getNextPaxHeaders(headers);	  RehashPaxHeaders    currEntry    =    getNextPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
69	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(this.headerData);  [CE]  illegal  start  of  expression  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(this.headerData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(this.headerData);	  ((    TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
70	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf,  this.zipEncoding);  [CE]  illegal  start  of  expression  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf,  this.zipEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf,  this.zipEncoding);	  ((    TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
71	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf,  headers);  [CE]  illegal  start  of  expression  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf,  headers);	  ((    TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
72	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(this.headerBuf);  [CE]  illegal  start  of  expression  [FE]                                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(this.headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setHeader(this.headerBuf);	  ((    TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
73	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(this.header);  [CE]  illegal  start  of  expression  [FE]                                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(this.header);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(this.header);	  ((    TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
74	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf,  0);  [CE]  illegal  start  of  expression  [FE]                                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf,  0);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf,  0);	  ((    TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
75	[BUG]  [BUGGY]  WrapPaxHeaders  currEntry  =  wrapPaxHeaders(currEntry.getPaxHeader(),  false);  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  WrapPaxHeaders  currEntry  =  wrapPaxHeaders(currEntry.getPaxHeader(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	WrapPaxHeaders  currEntry  =  wrapPaxHeaders(currEntry.getPaxHeader(),  false);	  wrapPaxHeaders(currEntry.getPaxHeader(),    false);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
76	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getName(),  false);  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getName(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getName(),  false);	  wrapPaxHeaders(currEntry.getPaxHeader(),    false);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
77	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry,  currEntry.getPaxHeader(),  false);  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry,  currEntry.getPaxHeader(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry,  currEntry.getPaxHeader(),  false);	  wrapPaxHeaders(currEntry.getPaxHeader(),    false);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
78	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  false,  true);  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  false,  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  false,  true);	  wrapPaxHeaders(currEntry.getPaxHeader(),    false);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
79	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  false,  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  false,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  false,  hasHitEOF);	  wrapPaxHeaders(currEntry.getPaxHeader(),    false);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
80	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getMethod());  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getMethod());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getMethod());	  validatePaxHeader(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
81	[BUG]  [BUGGY]  validatePaxHeader(currEntry,  headers);  [CE]  <identifier>  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry,  headers);	  validatePaxHeader(currEntry);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
82	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getParent());  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getParent());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getParent());	  validatePaxHeader(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
83	[BUG]  [BUGGY]  RehashPaxHeader  currEntry  =  headers.getPaxHeader();  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeader  currEntry  =  headers.getPaxHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeader  currEntry  =  headers.getPaxHeader();	  RehashPaxHeader    currEntry    =    currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
84	[BUG]  [BUGGY]  RehashPaxHeader  currEntry  =  this.currEntry.getPaxHeader();  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeader  currEntry  =  this.currEntry.getPaxHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeader  currEntry  =  this.currEntry.getPaxHeader();	  RehashPaxHeader    currEntry    =    currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
85	[BUG]  [BUGGY]  RehashPaxHeader  currEntry  =  currEntry.getCurrentPaxHeader();  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeader  currEntry  =  currEntry.getCurrentPaxHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeader  currEntry  =  currEntry.getCurrentPaxHeader();	  RehashPaxHeader    currEntry    =    currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
86	[BUG]  [BUGGY]  RehashPaxHeader  currEntry  =  cache.getPaxHeader();  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeader  currEntry  =  cache.getPaxHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeader  currEntry  =  cache.getPaxHeader();	  RehashPaxHeader    currEntry    =    currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
87	[BUG]  [BUGGY]  RehashPaxHeader  currEntry  =  currEntry.getRealPaxHeader();  [CE]  illegal  start  of  expression  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeader  currEntry  =  currEntry.getRealPaxHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeader  currEntry  =  currEntry.getRealPaxHeader();	  RehashPaxHeader    currEntry    =    currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
88	[BUG]  [BUGGY]  RehashPaxHeader  currEntry  =  currEntry.getNext();  [CE]  illegal  start  of  expression  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeader  currEntry  =  currEntry.getNext();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeader  currEntry  =  currEntry.getNext();	  RehashPaxHeader    currEntry    =    currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
89	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPax(),  headers);  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPax(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPax(),  headers);	  rehashPaxHeader(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
90	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPax(),  longNameData);  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPax(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPax(),  longNameData);	  rehashPaxHeader(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
91	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPax(),  true);  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPax(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPax(),  true);	  rehashPaxHeader(currEntry.getPax());    	non-compiled	[CE]  not  a  statement	80	None	replace
92	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPax(),  null);  [CE]  not  a  statement  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPax(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPax(),  null);	  rehashPaxHeader(currEntry.getPax());    	non-compiled	[CE]  not  a  statement	80	None	replace
93	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPax()  +  1);  [CE]  not  a  statement  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPax()  +  1);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPax()  +  1);	  rehashPaxHeader(currEntry.getPax());    	non-compiled	[CE]  not  a  statement	80	None	replace
94	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getURL(),  longNameData);  [CE]  not  a  statement  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getURL(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getURL(),  longNameData);	  parsePaxHeader(currEntry.getURL());    	non-compiled	[CE]  not  a  statement	70	None	replace
95	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getTarHeader(),  longNameData);  [CE]  not  a  statement  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getTarHeader(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getTarHeader(),  longNameData);	  parsePaxHeader(currEntry.getTarHeader());    	non-compiled	[CE]  not  a  statement	120	None	replace
96	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getNextTarHeader());  [CE]  not  a  statement  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getNextTarHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getNextTarHeader());	  parsePaxHeader(currEntry.getTarHeader());    	non-compiled	[CE]  not  a  statement	120	None	replace
97	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getTarHeader(),  headers);  [CE]  not  a  statement  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getTarHeader(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getTarHeader(),  headers);	  parsePaxHeader(currEntry.getTarHeader());    	non-compiled	[CE]  not  a  statement	120	None	replace
98	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getTarHeader(),  true);  [CE]  <identifier>  expected  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getTarHeader(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getTarHeader(),  true);	  parsePaxHeader(currEntry.getTarHeader());    	non-compiled	[CE]  <identifier>  expected	120	None	replace
99	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPax(),  headers);  [CE]  <identifier>  expected  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPax(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPax(),  headers);	  parsePaxHeader(currEntry.getPax());    	non-compiled	[CE]  <identifier>  expected	25	None	replace
100	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPax(),  true);  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPax(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPax(),  true);	  parsePaxHeader(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
101	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPax(),  null);  [CE]  <identifier>  expected  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPax(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPax(),  null);	  parsePaxHeader(currEntry.getPax());    	non-compiled	[CE]  <identifier>  expected	25	None	replace
102	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  file);  [CE]  <identifier>  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  file);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  file);	  wrapPaxHeader(currEntry.getName(),    null);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
103	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  null,  headers);  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  null,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  null,  headers);	  wrapPaxHeader(currEntry.getName(),    null);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
104	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  buffer);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  buffer);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  buffer);	  wrapPaxHeader(currEntry.getName(),    null);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
105	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getMethod());  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getMethod());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getMethod());	  scanPaxHeader(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
106	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getSize());  [CE]  <identifier>  expected  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getSize());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getSize());	  scanPaxHeader(currEntry);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
107	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getParent());  [CE]  <identifier>  expected  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getParent());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getParent());	  scanPaxHeader(currEntry);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
108	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  headers,  hasHitEOF);  [CE]  <identifier>  expected  [FE]            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  headers,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  headers,  hasHitEOF);	  wrapPaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
109	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  headers,  true);  [CE]  <identifier>  expected  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  headers,  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  headers,  true);	  wrapPaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
110	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  headers,  false);  [CE]  <identifier>  expected  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  headers,  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  headers,  false);	  wrapPaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
111	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  headers,  isHitEOF);  [CE]  <identifier>  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  headers,  isHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  headers,  isHitEOF);	  wrapPaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
112	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  file);  [CE]  <identifier>  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  file);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  file);	  wrapPaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
113	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  false);  [CE]  <identifier>  expected  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  false);	  rehashPaxHeader(currEntry.getPaxHeader(),    true);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
114	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getName(),  true);  [CE]  <identifier>  expected  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getName(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getName(),  true);	  rehashPaxHeader(currEntry.getPaxHeader(),    true);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
115	[BUG]  [BUGGY]  RehashPaxHeader(currEntry.getPaxHeader(),  false);  [CE]  <identifier>  expected  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeader(currEntry.getPaxHeader(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeader(currEntry.getPaxHeader(),  false);	  rehashPaxHeader(currEntry.getPaxHeader(),    true);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
116	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  true,  hasHitEOF);  [CE]  <identifier>  expected  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  true,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  true,  hasHitEOF);	  rehashPaxHeader(currEntry.getPaxHeader(),    true);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
117	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  true,  false);  [CE]  <identifier>  expected  [FE]                                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  true,  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  true,  false);	  rehashPaxHeader(currEntry.getPaxHeader(),    true);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
118	[BUG]  [BUGGY]  resetPaxHeader(currEntry.getPaxHeader(),  true);  [CE]  <identifier>  expected  [FE]                                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  resetPaxHeader(currEntry.getPaxHeader(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	resetPaxHeader(currEntry.getPaxHeader(),  true);	  rehashPaxHeader(currEntry.getPaxHeader(),    true);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
119	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData,  hasHitEOF);  [CE]  <identifier>  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData,  hasHitEOF);	  wrapPaxHeaders(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
120	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData,  headerBuf);  [CE]  not  a  statement  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData,  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData,  headerBuf);	  wrapPaxHeaders(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  not  a  statement	8	None	replace
121	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  headerBuf);  [CE]  not  a  statement  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  headerBuf);	  wrapPaxHeaders(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  not  a  statement	8	None	replace
122	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData,  true);  [CE]  not  a  statement  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData,  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData,  true);	  wrapPaxHeaders(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  not  a  statement	8	None	replace
123	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData,  false);  [CE]  not  a  statement  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData,  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData,  false);	  wrapPaxHeaders(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  not  a  statement	8	None	replace
124	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData,  isHitEOF);  [CE]  not  a  statement  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData,  isHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData,  isHitEOF);	  wrapPaxHeaders(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  not  a  statement	8	None	replace
125	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData,  this);  [CE]  not  a  statement  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData,  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData,  this);	  wrapPaxHeaders(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  not  a  statement	8	None	replace
126	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getPaxHeader(),  longNameData);  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeaders(currEntry.getPaxHeader(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getPaxHeader(),  longNameData);	  scanPaxHeaders(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
127	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getPaxHeader(),  headers);  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeaders(currEntry.getPaxHeader(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getPaxHeader(),  headers);	  scanPaxHeaders(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
128	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getPaxHeader(),  true);  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeaders(currEntry.getPaxHeader(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getPaxHeader(),  true);	  scanPaxHeaders(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
129	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getPaxHeader(),  false);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeaders(currEntry.getPaxHeader(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getPaxHeader(),  false);	  scanPaxHeaders(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
130	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getPaxHeader(),  null);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeaders(currEntry.getPaxHeader(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getPaxHeader(),  null);	  scanPaxHeaders(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
131	[BUG]  [BUGGY]  validatePaxHeaders(currEntry.getName(),  longNameData);  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeaders(currEntry.getName(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeaders(currEntry.getName(),  longNameData);	  validatePaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
132	[BUG]  [BUGGY]  validatePaxHeaders(currEntry.getName(),  true);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeaders(currEntry.getName(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeaders(currEntry.getName(),  true);	  validatePaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
133	[BUG]  [BUGGY]  validatePaxHeaders(currEntry.getName(),  headerBuf);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeaders(currEntry.getName(),  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeaders(currEntry.getName(),  headerBuf);	  validatePaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
134	[BUG]  [BUGGY]  validatePaxHeaders(currEntry.getName(),  false);  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeaders(currEntry.getName(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeaders(currEntry.getName(),  false);	  validatePaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
135	[BUG]  [BUGGY]  validatePaxHeaders(currEntry.getName(),  null);  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeaders(currEntry.getName(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeaders(currEntry.getName(),  null);	  validatePaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
136	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  this);  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  this);	  wrapPaxHeaders(currEntry.getPaxHeader(),    null);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
137	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  null,  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  null,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  null,  hasHitEOF);	  wrapPaxHeaders(currEntry.getPaxHeader(),    null);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
138	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  null,  headers);  [CE]  illegal  start  of  expression  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  null,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  null,  headers);	  wrapPaxHeaders(currEntry.getPaxHeader(),    null);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
139	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  header);  [CE]  illegal  start  of  expression  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  header);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  header);	  wrapPaxHeaders(currEntry.getPaxHeader(),    null);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
140	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getPax(),  headers);  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getPax(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getPax(),  headers);	  validatePaxHeader(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
141	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getPax(),  longNameData);  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getPax(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getPax(),  longNameData);	  validatePaxHeader(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
142	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getPax(),  true);  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getPax(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getPax(),  true);	  validatePaxHeader(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
143	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getPax(),  null);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getPax(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getPax(),  null);	  validatePaxHeader(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
144	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getPax(),  false);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getPax(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getPax(),  false);	  validatePaxHeader(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
145	[BUG]  [BUGGY]  scanHeaders(currEntry.getPaxHeaderSize()  +  1);  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeaders(currEntry.getPaxHeaderSize()  +  1);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeaders(currEntry.getPaxHeaderSize()  +  1);	  scanHeaders(currEntry.getPaxHeaderSize());    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
146	[BUG]  [BUGGY]  scanHeaders(currEntry.getPaxHeaderSize(),  true);  [CE]  <identifier>  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeaders(currEntry.getPaxHeaderSize(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeaders(currEntry.getPaxHeaderSize(),  true);	  scanHeaders(currEntry.getPaxHeaderSize());    	non-compiled	[CE]  <identifier>  expected	125	None	replace
147	[BUG]  [BUGGY]  scanHeaders(currEntry.getPaxHeaderSize(),  false);  [CE]  <identifier>  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeaders(currEntry.getPaxHeaderSize(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeaders(currEntry.getPaxHeaderSize(),  false);	  scanHeaders(currEntry.getPaxHeaderSize());    	non-compiled	[CE]  <identifier>  expected	125	None	replace
148	[BUG]  [BUGGY]  scanHeaders(currEntry.getPaxHeaderSize(),  longNameData);  [CE]  <identifier>  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeaders(currEntry.getPaxHeaderSize(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeaders(currEntry.getPaxHeaderSize(),  longNameData);	  scanHeaders(currEntry.getPaxHeaderSize());    	non-compiled	[CE]  <identifier>  expected	125	None	replace
149	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getPaxHeaderSize());  [CE]  <identifier>  expected  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeaders(currEntry.getPaxHeaderSize());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getPaxHeaderSize());	  scanHeaders(currEntry.getPaxHeaderSize());    	non-compiled	[CE]  <identifier>  expected	125	None	replace
150	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  headers,  hasHitEOF);  [CE]  <identifier>  expected  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  headers,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  headers,  hasHitEOF);	  rehashPaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
151	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getName(),  headers);  [CE]  <identifier>  expected  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getName(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getName(),  headers);	  rehashPaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
152	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  headers,  true);  [CE]  <identifier>  expected  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  headers,  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  headers,  true);	  rehashPaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
153	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  headers,  false);  [CE]  <identifier>  expected  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  headers,  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  headers,  false);	  rehashPaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
154	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  headers,  isHitEOF);  [CE]  <identifier>  expected  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  headers,  isHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  headers,  isHitEOF);	  rehashPaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
155	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  file);  [CE]  illegal  start  of  expression  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  file);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  file);	  rehashPaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
156	[BUG]  [BUGGY]  return  currEntry.getPaxHeader();  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  return  currEntry.getPaxHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	return  currEntry.getPaxHeader();	  if(currEntry.getPaxHeader()!=    null)    {    return    currEntry.getPaxHeader();    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
157	[BUG]  [BUGGY]  ||  currEntry.getPaxHeader()!=  null)  {  return  currEntry.getPaxHeader();  }  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ||  currEntry.getPaxHeader()!=  null)  {  return  currEntry.getPaxHeader();  }  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	||  currEntry.getPaxHeader()!=  null)  {  return  currEntry.getPaxHeader();  }	  if(currEntry.getPaxHeader()!=    null)    {    return    currEntry.getPaxHeader();    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
158	[BUG]  [BUGGY]  while(currEntry.getPaxHeader()!=  null)  {  currEntry.setPaxHeader(currEntry.getPaxHeader());  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  while(currEntry.getPaxHeader()!=  null)  {  currEntry.setPaxHeader(currEntry.getPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	while(currEntry.getPaxHeader()!=  null)  {  currEntry.setPaxHeader(currEntry.getPaxHeader());	  if(currEntry.getPaxHeader()!=    null)    {    return    currEntry.getPaxHeader();    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
159	[BUG]  [BUGGY]  while(currEntry.getPaxHeader()!=  null)  {  currEntry.getPaxHeader();  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  while(currEntry.getPaxHeader()!=  null)  {  currEntry.getPaxHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	while(currEntry.getPaxHeader()!=  null)  {  currEntry.getPaxHeader();	  if(currEntry.getPaxHeader()!=    null)    {    return    currEntry.getPaxHeader();    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
160	[BUG]  [BUGGY]  if(currEntry.getName()!=  null)  {  return  currEntry.getPaxHeader();  }  [CE]  illegal  start  of  expression  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  if(currEntry.getName()!=  null)  {  return  currEntry.getPaxHeader();  }  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	if(currEntry.getName()!=  null)  {  return  currEntry.getPaxHeader();  }	  if(currEntry.getPaxHeader()!=    null)    {    return    currEntry.getPaxHeader();    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
161	[BUG]  [BUGGY]  byte[]  headerBuf  =  currEntry.getHeaders();  [CE]  illegal  start  of  expression  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  headerBuf  =  currEntry.getHeaders();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  headerBuf  =  currEntry.getHeaders();	  byte[]    headerBuf    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
162	[BUG]  [BUGGY]  byte[]  headerBuf  =  currEntry.getPaxHeaders(null);  [CE]  illegal  start  of  expression  [FE]                                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  headerBuf  =  currEntry.getPaxHeaders(null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  headerBuf  =  currEntry.getPaxHeaders(null);	  byte[]    headerBuf    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
163	[BUG]  [BUGGY]  byte[]  headerBuf  =  currEntry.getPaxHeaders()  +  1;  [CE]  illegal  start  of  expression  [FE]                                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  headerBuf  =  currEntry.getPaxHeaders()  +  1;  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  headerBuf  =  currEntry.getPaxHeaders()  +  1;	  byte[]    headerBuf    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
164	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(n);  [CE]  illegal  start  of  expression  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(n);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(n);	  ((    TarArchiveEntry)currEntry).setPaxHeader(this);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
165	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(getNextTarEntry());  [CE]  illegal  start  of  expression  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(getNextTarEntry());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(getNextTarEntry());	  ((    TarArchiveEntry)currEntry).setPaxHeader(this);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
166	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(nextTarEntry);  [CE]  illegal  start  of  expression  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(nextTarEntry);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(nextTarEntry);	  ((    TarArchiveEntry)currEntry).setPaxHeader(this);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
167	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(false);  [CE]  illegal  start  of  expression  [FE]                                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(false);	  ((    TarArchiveEntry)currEntry).setPaxHeader(this);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
168	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(p);  [CE]  illegal  start  of  expression  [FE]                                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(p);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(p);	  ((    TarArchiveEntry)currEntry).setPaxHeader(this);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
169	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getName(),  true);  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getName(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getName(),  true);	  Pax    headers    =    getPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
170	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getName(),  longNameData);  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getName(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getName(),  longNameData);	  Pax    headers    =    getPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
171	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getKey());  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getKey());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getKey());	  Pax    headers    =    getPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
172	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getName(),  null);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getName(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getName(),  null);	  Pax    headers    =    getPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
173	[BUG]  [BUGGY]  Pax  currEntry  =  getPaxHeaders(currEntry.getName());  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  currEntry  =  getPaxHeaders(currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  currEntry  =  getPaxHeaders(currEntry.getName());	  Pax    headers    =    getPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
174	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getName(),  this);  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getName(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getName(),  this);	  Pax    headers    =    getPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
175	[BUG]  [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  headers,  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  headers,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeaders(currEntry.getPaxHeader(),  headers,  hasHitEOF);	  scanHeaders(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
176	[BUG]  [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  longNameData);  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeaders(currEntry.getPaxHeader(),  longNameData);	  scanHeaders(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
177	[BUG]  [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  headers,  true);  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  headers,  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeaders(currEntry.getPaxHeader(),  headers,  true);	  scanHeaders(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
178	[BUG]  [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  headerBuf);  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeaders(currEntry.getPaxHeader(),  headerBuf);	  scanHeaders(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
179	[BUG]  [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  headers,  false);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  headers,  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeaders(currEntry.getPaxHeader(),  headers,  false);	  scanHeaders(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
180	[BUG]  [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  headers,  skipped);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  headers,  skipped);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeaders(currEntry.getPaxHeader(),  headers,  skipped);	  scanHeaders(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
181	[BUG]  [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  file);  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  file);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeaders(currEntry.getPaxHeader(),  file);	  scanHeaders(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
182	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  headers,  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  headers,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPaxHeader(),  headers,  hasHitEOF);	  parsePaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
183	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getName(),  headers);  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getName(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getName(),  headers);	  parsePaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
184	[BUG]  [BUGGY]  ParserUtil.parsePaxHeader(currEntry.getPaxHeader(),  headers);  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ParserUtil.parsePaxHeader(currEntry.getPaxHeader(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	ParserUtil.parsePaxHeader(currEntry.getPaxHeader(),  headers);	  parsePaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
185	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  file);  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  file);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPaxHeader(),  file);	  parsePaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
186	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  Long.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  Long.MAX_VALUE);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPaxHeader(),  Long.MAX_VALUE);	  parsePaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
187	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getPaxHeader(),  true);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getPaxHeader(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getPaxHeader(),  true);	  scanPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
188	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getPaxHeader(),  longNameData);  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getPaxHeader(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getPaxHeader(),  longNameData);	  scanPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
189	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getPaxHeader(),  false);  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getPaxHeader(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getPaxHeader(),  false);	  scanPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
190	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getPaxHeader(),  headers);  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getPaxHeader(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getPaxHeader(),  headers);	  scanPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
191	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getPaxHeader()  +  1);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getPaxHeader()  +  1);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getPaxHeader()  +  1);	  scanPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
192	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData.getName());  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData.getName());	  wrapPaxHeaders(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
193	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getName(),  currEntry.getPaxHeader());  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getName(),  currEntry.getPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getName(),  currEntry.getPaxHeader());	  wrapPaxHeaders(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
194	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  zipEncoding.getName());  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  zipEncoding.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  zipEncoding.getName());	  wrapPaxHeaders(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
195	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getName(),  longNameData);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getName(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getName(),  longNameData);	  wrapPaxHeaders(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
196	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  cache.getName());  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  cache.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  cache.getName());	  wrapPaxHeaders(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
197	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getName(),  true);  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getName(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getName(),  true);	  scanPaxHeader(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
198	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getName(),  longNameData);  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getName(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getName(),  longNameData);	  scanPaxHeader(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
199	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getName(),  false);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getName(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getName(),  false);	  scanPaxHeader(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
200	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getName(),  headers);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getName(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getName(),  headers);	  scanPaxHeader(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
201	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getName(),  null);  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getName(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getName(),  null);	  scanPaxHeader(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
202	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getSize());  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getSize());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getSize());	  rehashPaxHeader(currEntry.getURL());    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
203	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getURL(),  longNameData);  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getURL(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getURL(),  longNameData);	  rehashPaxHeader(currEntry.getURL());    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
204	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getSourceName());  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getSourceName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getSourceName());	  rehashPaxHeader(currEntry.getURL());    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
205	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getURL(),  null);  [CE]  illegal  start  of  expression  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getURL(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getURL(),  null);	  rehashPaxHeader(currEntry.getURL());    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
206	[BUG]  [BUGGY]  readPaxHeader(currEntry.getPaxHeader());  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  readPaxHeader(currEntry.getPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	readPaxHeader(currEntry.getPaxHeader());	  if(!hasHitEOF)    {    rehashPaxHeader(currEntry.getPaxHeader());    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
207	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getSize()  -  1);  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getSize()  -  1);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getSize()  -  1);	  Pax    headers    =    getPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
208	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getPaxHeader());  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getPaxHeader());	  Pax    headers    =    getPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
209	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getParent());  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getParent());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getParent());	  Pax    headers    =    getPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
210	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getRecordSize());  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getRecordSize());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getRecordSize());	  Pax    headers    =    getPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
211	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getSize()  +  1);  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getSize()  +  1);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getSize()  +  1);	  Pax    headers    =    getPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
212	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  longNameData,  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  longNameData,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  longNameData,  hasHitEOF);	  wrapPaxHeader(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
213	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  longNameData,  headers);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  longNameData,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  longNameData,  headers);	  wrapPaxHeader(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
214	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  longNameData,  headerBuf);  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  longNameData,  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  longNameData,  headerBuf);	  wrapPaxHeader(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
215	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  headerBuf);  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  headerBuf);	  wrapPaxHeader(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
216	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  longNameData,  isHitEOF);  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  longNameData,  isHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  longNameData,  isHitEOF);	  wrapPaxHeader(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
217	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  longNameData,  true);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  longNameData,  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  longNameData,  true);	  wrapPaxHeader(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
218	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  longNameData,  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  longNameData,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPaxHeader(),  longNameData,  hasHitEOF);	  parsePaxHeader(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
219	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  headerBuf);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPaxHeader(),  headerBuf);	  parsePaxHeader(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
220	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  longNameData,  headerBuf);  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  longNameData,  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPaxHeader(),  longNameData,  headerBuf);	  parsePaxHeader(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
221	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  longNameData,  true);  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  longNameData,  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPaxHeader(),  longNameData,  true);	  parsePaxHeader(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
222	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  longNameData,  this);  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  longNameData,  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPaxHeader(),  longNameData,  this);	  parsePaxHeader(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
223	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  longNameData,  false);  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  longNameData,  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPaxHeader(),  longNameData,  false);	  parsePaxHeader(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
224	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  headers,  hasHitEOF);  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  headers,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  headers,  hasHitEOF);	  wrapPaxHeaders(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  not  a  statement	93	None	replace
225	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  headers,  true);  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  headers,  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  headers,  true);	  wrapPaxHeaders(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  not  a  statement	93	None	replace
226	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  headers,  false);  [CE]  not  a  statement  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  headers,  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  headers,  false);	  wrapPaxHeaders(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  not  a  statement	93	None	replace
227	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getName(),  headers);  [CE]  not  a  statement  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getName(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getName(),  headers);	  wrapPaxHeaders(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  not  a  statement	93	None	replace
228	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  headers,  isHitEOF);  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  headers,  isHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  headers,  isHitEOF);	  wrapPaxHeaders(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
229	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  headers,  skipped);  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  headers,  skipped);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  headers,  skipped);	  wrapPaxHeaders(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
230	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getNext();  [CE]  not  a  statement  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getNext();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getNext();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getPaxHeader();    	non-compiled	[CE]  not  a  statement	62	None	replace
231	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getHeader();  [CE]  not  a  statement  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getHeader();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getPaxHeader();    	non-compiled	[CE]  not  a  statement	62	None	replace
232	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.clone();  [CE]  <identifier>  expected  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.clone();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.clone();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getPaxHeader();    	non-compiled	[CE]  <identifier>  expected	62	None	replace
233	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getPax();  [CE]  <identifier>  expected  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getPax();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getPax();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getPaxHeader();    	non-compiled	[CE]  <identifier>  expected	62	None	replace
234	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getKey();  [CE]  <identifier>  expected  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getKey();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getKey();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getPaxHeader();    	non-compiled	[CE]  <identifier>  expected	62	None	replace
235	[BUG]  [BUGGY]  parsePaxFileHeader(currEntry);  [CE]  <identifier>  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxFileHeader(currEntry);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxFileHeader(currEntry);	  parsePaxFileHeaders();    	non-compiled	[CE]  <identifier>  expected	89	None	replace
236	[BUG]  [BUGGY]  parsePaxFileHeader();  [CE]  <identifier>  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxFileHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxFileHeader();	  parsePaxFileHeaders();    	non-compiled	[CE]  <identifier>  expected	89	None	replace
237	[BUG]  [BUGGY]  parsePaxFileHeader(currEntry.getName());  [CE]  <identifier>  expected  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxFileHeader(currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxFileHeader(currEntry.getName());	  parsePaxFileHeaders();    	non-compiled	[CE]  <identifier>  expected	89	None	replace
238	[BUG]  [BUGGY]  parsePaxFileHeader(currEntry.getPax());  [CE]  <identifier>  expected  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxFileHeader(currEntry.getPax());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxFileHeader(currEntry.getPax());	  parsePaxFileHeaders();    	non-compiled	[CE]  <identifier>  expected	89	None	replace
239	[BUG]  [BUGGY]  parsePaxFileHeaders(currEntry);  [CE]  <identifier>  expected  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxFileHeaders(currEntry);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxFileHeaders(currEntry);	  parsePaxFileHeaders();    	non-compiled	[CE]  <identifier>  expected	89	None	replace
240	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE,  headers);  [CE]  <identifier>  expected  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE,  headers);	  wrapPaxHeader(currEntry.getName(),    Long.MAX_VALUE);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
241	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE,  longNameData);  [CE]  <identifier>  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE,  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE,  longNameData);	  wrapPaxHeader(currEntry.getName(),    Long.MAX_VALUE);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
242	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE,  longNameData.length);  [CE]  <identifier>  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE,  longNameData.length);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE,  longNameData.length);	  wrapPaxHeader(currEntry.getName(),    Long.MAX_VALUE);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
243	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE,  true);  [CE]  <identifier>  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE,  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE,  true);	  wrapPaxHeader(currEntry.getName(),    Long.MAX_VALUE);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
244	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  Long.MIN_VALUE);  [CE]  <identifier>  expected  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  Long.MIN_VALUE);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  Long.MIN_VALUE);	  wrapPaxHeader(currEntry.getName(),    Long.MAX_VALUE);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
245	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  Short.MAX_VALUE);  [CE]  <identifier>  expected  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  Short.MAX_VALUE);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  Short.MAX_VALUE);	  wrapPaxHeader(currEntry.getName(),    Long.MAX_VALUE);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
246	[BUG]  [BUGGY]  parsePaxHeaders(currEntry.getName(),  headers);  [CE]  <identifier>  expected  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeaders(currEntry.getName(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeaders(currEntry.getName(),  headers);	  parsePaxHeaders(currEntry.getName());    	non-compiled	[CE]  <identifier>  expected	27	None	replace
247	[BUG]  [BUGGY]  parsePaxHeaders(currEntry.getName(),  longNameData);  [CE]  <identifier>  expected  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeaders(currEntry.getName(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeaders(currEntry.getName(),  longNameData);	  parsePaxHeaders(currEntry.getName());    	non-compiled	[CE]  <identifier>  expected	27	None	replace
248	[BUG]  [BUGGY]  parsePaxHeaders(currEntry.getName(),  this);  [CE]  <identifier>  expected  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeaders(currEntry.getName(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeaders(currEntry.getName(),  this);	  parsePaxHeaders(currEntry.getName());    	non-compiled	[CE]  <identifier>  expected	27	None	replace
249	[BUG]  [BUGGY]  parsePaxHeaders(currEntry.getName(),  true);  [CE]  illegal  start  of  expression  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeaders(currEntry.getName(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeaders(currEntry.getName(),  true);	  parsePaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
250	[BUG]  [BUGGY]  parsePaxHeaders(currEntry.getSimpleName());  [CE]  illegal  start  of  expression  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeaders(currEntry.getSimpleName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeaders(currEntry.getSimpleName());	  parsePaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
251	[BUG]  [BUGGY]  parsePaxHeaders(currEntry.getName(),  null);  [CE]  illegal  start  of  expression  [FE]                                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeaders(currEntry.getName(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeaders(currEntry.getName(),  null);	  parsePaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
252	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getPaxHeader());  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry.getPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getPaxHeader());	  traversePaxHeaders(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
253	[BUG]  [BUGGY]  traversePaxHeaders(currEntry,  headerBuf);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry,  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry,  headerBuf);	  traversePaxHeaders(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
254	[BUG]  [BUGGY]  traversePaxHeaders(currEntry,  false);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry,  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry,  false);	  traversePaxHeaders(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
255	[BUG]  [BUGGY]  traversePaxHeaders(currEntry,  true);  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry,  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry,  true);	  traversePaxHeaders(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
256	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getName(),  longNameData);  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getName(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getName(),  longNameData);	  wrapPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
257	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getName(),  true);  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getName(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getName(),  true);	  wrapPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
258	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getName(),  this);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getName(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getName(),  this);	  wrapPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
259	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getName(),  null);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getName(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getName(),  null);	  wrapPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
260	[BUG]  [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  true);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeaders(currEntry.getPaxHeader(),  true);	  scanHeaders(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
261	[BUG]  [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  false);  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeaders(currEntry.getPaxHeader(),  false);	  scanHeaders(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
262	[BUG]  [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  null);  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeaders(currEntry.getPaxHeader(),  null);	  scanHeaders(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
263	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getPax(),  headers);  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getPax(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getPax(),  headers);	  scanPaxHeader(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
264	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getPax(),  true);  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getPax(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getPax(),  true);	  scanPaxHeader(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
265	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getPax(),  longNameData);  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getPax(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getPax(),  longNameData);	  scanPaxHeader(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
266	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getPax()  +  1);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getPax()  +  1);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getPax()  +  1);	  scanPaxHeader(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
267	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getPax(),  false);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getPax(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getPax(),  false);	  scanPaxHeader(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
268	[BUG]  [BUGGY]  rehashPaxHeaders(currEntry.getName(),  headers);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeaders(currEntry.getName(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeaders(currEntry.getName(),  headers);	  rehashPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
269	[BUG]  [BUGGY]  rehashPaxHeaders(currEntry.getName(),  longNameData);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeaders(currEntry.getName(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeaders(currEntry.getName(),  longNameData);	  rehashPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
270	[BUG]  [BUGGY]  rehashPaxHeaders(currEntry.getName(),  true);  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeaders(currEntry.getName(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeaders(currEntry.getName(),  true);	  rehashPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
271	[BUG]  [BUGGY]  rehashPaxHeaders(currEntry.getName(),  null);  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeaders(currEntry.getName(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeaders(currEntry.getName(),  null);	  rehashPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
272	[BUG]  [BUGGY]  rehashPaxHeaders(currEntry.getName(),  false);  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeaders(currEntry.getName(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeaders(currEntry.getName(),  false);	  rehashPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
273	[BUG]  [BUGGY]  rehashPaxHeaders(currEntry.getName(),  this);  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeaders(currEntry.getName(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeaders(currEntry.getName(),  this);	  rehashPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
274	[BUG]  [BUGGY]  validatePaxHeaders(currEntry.getPaxHeader());  [CE]  illegal  start  of  expression  [FE]            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeaders(currEntry.getPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeaders(currEntry.getPaxHeader());	  validatePaxHeaders(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
275	[BUG]  [BUGGY]  validatePaxHeaders(currEntry,  headers);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeaders(currEntry,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeaders(currEntry,  headers);	  validatePaxHeaders(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
276	[BUG]  [BUGGY]  validatePaxHeaders(currEntry,  headerBuf);  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeaders(currEntry,  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeaders(currEntry,  headerBuf);	  validatePaxHeaders(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
277	[BUG]  [BUGGY]  validatePaxHeaders(currEntry.getMethod());  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeaders(currEntry.getMethod());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeaders(currEntry.getMethod());	  validatePaxHeaders(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
278	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPax());  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPax());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPax());	  wrapPaxHeader(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
279	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getSize()  -  1);  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getSize()  -  1);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getSize()  -  1);	  wrapPaxHeader(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
280	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getSize()  +  1);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getSize()  +  1);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getSize()  +  1);	  wrapPaxHeader(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
281	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getString());  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getString());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getString());	  wrapPaxHeader(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
282	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getLastChild());  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getLastChild());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getLastChild());	  wrapPaxHeader(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
283	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getNextTarHeader());  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getNextTarHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getNextTarHeader());	  rehashPaxHeader(currEntry.getTarHeader());    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
284	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getTarHeader(),  true);  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getTarHeader(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getTarHeader(),  true);	  rehashPaxHeader(currEntry.getTarHeader());    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
285	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getTarHeader(),  longNameData);  [CE]  not  a  statement  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getTarHeader(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getTarHeader(),  longNameData);	  rehashPaxHeader(currEntry.getTarHeader());    	non-compiled	[CE]  not  a  statement	116	None	replace
286	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getTarHeader(),  headers);  [CE]  not  a  statement  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getTarHeader(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getTarHeader(),  headers);	  rehashPaxHeader(currEntry.getTarHeader());    	non-compiled	[CE]  not  a  statement	116	None	replace
287	[BUG]  [BUGGY]  byte[]  longLinkData  =  currEntry.getHeaders();  [CE]  not  a  statement  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  longLinkData  =  currEntry.getHeaders();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  longLinkData  =  currEntry.getHeaders();	  byte[]    longLinkData    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  not  a  statement	64	None	replace
288	[BUG]  [BUGGY]  byte[]  longLinkData  =  currEntry.getPaxHeaders()  +  1;  [CE]  not  a  statement  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  longLinkData  =  currEntry.getPaxHeaders()  +  1;  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  longLinkData  =  currEntry.getPaxHeaders()  +  1;	  byte[]    longLinkData    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  not  a  statement	64	None	replace
289	[BUG]  [BUGGY]  byte[]  longLinkData  =  currEntry.getName();  [CE]  not  a  statement  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  longLinkData  =  currEntry.getName();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  longLinkData  =  currEntry.getName();	  byte[]    longLinkData    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  not  a  statement	64	None	replace
290	[BUG]  [BUGGY]  byte[]  longLinkData  =  currEntry.getPaxHeaders(null);  [CE]  illegal  start  of  expression  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  longLinkData  =  currEntry.getPaxHeaders(null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  longLinkData  =  currEntry.getPaxHeaders(null);	  byte[]    longLinkData    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
291	[BUG]  [BUGGY]  byte[]  longLinkData  =  currEntry.getURL();  [CE]  not  a  statement  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  longLinkData  =  currEntry.getURL();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  longLinkData  =  currEntry.getURL();	  byte[]    longLinkData    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  not  a  statement	64	None	replace
292	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(headerPax);  [CE]  not  a  statement  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(headerPax);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(headerPax);	  ((    TarArchiveEntry)currEntry).setPaxHeader(headerBuf);    	non-compiled	[CE]  not  a  statement	86	None	replace
293	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(headerBuf,  headers);  [CE]  not  a  statement  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(headerBuf,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(headerBuf,  headers);	  ((    TarArchiveEntry)currEntry).setPaxHeader(headerBuf);    	non-compiled	[CE]  not  a  statement	86	None	replace
294	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(headerData);  [CE]  not  a  statement  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(headerData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(headerData);	  ((    TarArchiveEntry)currEntry).setPaxHeader(headerBuf);    	non-compiled	[CE]  not  a  statement	86	None	replace
295	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(header);  [CE]  not  a  statement  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(header);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(header);	  ((    TarArchiveEntry)currEntry).setPaxHeader(headerBuf);    	non-compiled	[CE]  not  a  statement	86	None	replace
296	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getSize()  -  1);  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getSize()  -  1);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getSize()  -  1);	  wrapPaxHeaders(currEntry.getPaxHeader(),    currEntry.getSize());    	non-compiled	[CE]  not  a  statement	109	None	replace
297	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getSize()  +  1);  [CE]  not  a  statement  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getSize()  +  1);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getSize()  +  1);	  wrapPaxHeaders(currEntry.getPaxHeader(),    currEntry.getSize());    	non-compiled	[CE]  not  a  statement	109	None	replace
298	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getLength());  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getLength());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getLength());	  wrapPaxHeaders(currEntry.getPaxHeader(),    currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
299	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getLastChild());  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getLastChild());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getLastChild());	  wrapPaxHeaders(currEntry.getPaxHeader(),    currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
300	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData.getSize());  [CE]  not  a  statement  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData.getSize());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData.getSize());	  wrapPaxHeaders(currEntry.getPaxHeader(),    currEntry.getSize());    	non-compiled	[CE]  not  a  statement	109	None	replace
301	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getLowerCase());  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getLowerCase());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getLowerCase());	  wrapPaxHeaders(currEntry.getPaxHeader(),    currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
302	[BUG]  [BUGGY]  byte[]  longLinkData  =  currEntry.getHeader();  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  longLinkData  =  currEntry.getHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  longLinkData  =  currEntry.getHeader();	  byte[]    longLinkData    =    currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
303	[BUG]  [BUGGY]  byte[]  longLinkData  =  currEntry.getLongLinkData();  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  longLinkData  =  currEntry.getLongLinkData();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  longLinkData  =  currEntry.getLongLinkData();	  byte[]    longLinkData    =    currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
304	[BUG]  [BUGGY]  byte[]  longLinkData  =  currEntry.getPaxBase();  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  longLinkData  =  currEntry.getPaxBase();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  longLinkData  =  currEntry.getPaxBase();	  byte[]    longLinkData    =    currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
305	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getNextTarHeader());  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getNextTarHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getNextTarHeader());	  wrapPaxHeaders(currEntry.getTarHeader());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
306	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getTarHeader(),  longNameData);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getTarHeader(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getTarHeader(),  longNameData);	  wrapPaxHeaders(currEntry.getTarHeader());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
307	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getTarHeader(),  true);  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getTarHeader(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getTarHeader(),  true);	  wrapPaxHeaders(currEntry.getTarHeader());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
308	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getTarHeader(),  false);  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getTarHeader(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getTarHeader(),  false);	  wrapPaxHeaders(currEntry.getTarHeader());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
309	[BUG]  [BUGGY]  scanHeader(currEntry.getPaxHeader(),  headers,  hasHitEOF);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeader(currEntry.getPaxHeader(),  headers,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeader(currEntry.getPaxHeader(),  headers,  hasHitEOF);	  scanHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  not  a  statement	124	None	replace
310	[BUG]  [BUGGY]  scanHeader(currEntry.getPaxHeader(),  longNameData);  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeader(currEntry.getPaxHeader(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeader(currEntry.getPaxHeader(),  longNameData);	  scanHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  not  a  statement	124	None	replace
311	[BUG]  [BUGGY]  scanHeader(currEntry.getPaxHeader(),  headers,  true);  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeader(currEntry.getPaxHeader(),  headers,  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeader(currEntry.getPaxHeader(),  headers,  true);	  scanHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  not  a  statement	124	None	replace
312	[BUG]  [BUGGY]  scanHeader(currEntry.getPaxHeader(),  headers,  false);  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeader(currEntry.getPaxHeader(),  headers,  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeader(currEntry.getPaxHeader(),  headers,  false);	  scanHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  not  a  statement	124	None	replace
313	[BUG]  [BUGGY]  scanHeader(currEntry.getPaxHeader(),  this.headers);  [CE]  not  a  statement  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeader(currEntry.getPaxHeader(),  this.headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeader(currEntry.getPaxHeader(),  this.headers);	  scanHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  not  a  statement	124	None	replace
314	[BUG]  [BUGGY]  scanHeader(currEntry.getPaxHeader(),  file);  [CE]  not  a  statement  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeader(currEntry.getPaxHeader(),  file);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeader(currEntry.getPaxHeader(),  file);	  scanHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  not  a  statement	124	None	replace
315	[BUG]  [BUGGY]  scanHeader(currEntry.getPaxHeader(),  headerBuf);  [CE]  not  a  statement  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeader(currEntry.getPaxHeader(),  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeader(currEntry.getPaxHeader(),  headerBuf);	  scanHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  not  a  statement	124	None	replace
316	[BUG]  [BUGGY]  byte[]  headerBuf  =  currEntry.getHeader();  [CE]  not  a  statement  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  headerBuf  =  currEntry.getHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  headerBuf  =  currEntry.getHeader();	  byte[]    headerBuf    =    currEntry.getPaxHeader();    	non-compiled	[CE]  not  a  statement	66	None	replace
317	[BUG]  [BUGGY]  byte[]  headerBuf  =  currEntry.getHeaderBytes();  [CE]  not  a  statement  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  headerBuf  =  currEntry.getHeaderBytes();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  headerBuf  =  currEntry.getHeaderBytes();	  byte[]    headerBuf    =    currEntry.getPaxHeader();    	non-compiled	[CE]  not  a  statement	66	None	replace
318	[BUG]  [BUGGY]  byte[]  headerBuf  =  currEntry.getHeaderSize();  [CE]  not  a  statement  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  headerBuf  =  currEntry.getHeaderSize();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  headerBuf  =  currEntry.getHeaderSize();	  byte[]    headerBuf    =    currEntry.getPaxHeader();    	non-compiled	[CE]  not  a  statement	66	None	replace
319	[BUG]  [BUGGY]  byte[]  headerBuf  =  currEntry.getName();  [CE]  not  a  statement  [FE]                                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  headerBuf  =  currEntry.getName();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  headerBuf  =  currEntry.getName();	  byte[]    headerBuf    =    currEntry.getPaxHeader();    	non-compiled	[CE]  not  a  statement	66	None	replace
320	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getName(),  longNameData);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getName(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getName(),  longNameData);	  validatePaxHeader(currEntry.getName());    	non-compiled	[CE]  not  a  statement	74	None	replace
321	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getName(),  true);  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getName(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getName(),  true);	  validatePaxHeader(currEntry.getName());    	non-compiled	[CE]  not  a  statement	74	None	replace
322	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getName(),  headers);  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getName(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getName(),  headers);	  validatePaxHeader(currEntry.getName());    	non-compiled	[CE]  not  a  statement	74	None	replace
323	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getName(),  null);  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getName(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getName(),  null);	  validatePaxHeader(currEntry.getName());    	non-compiled	[CE]  not  a  statement	74	None	replace
324	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getName(),  false);  [CE]  not  a  statement  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getName(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getName(),  false);	  validatePaxHeader(currEntry.getName());    	non-compiled	[CE]  not  a  statement	74	None	replace
325	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  Long.MAX_VALUE,  longNameData);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  Long.MAX_VALUE,  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  Long.MAX_VALUE,  longNameData);	  wrapPaxHeaders(currEntry.getPaxHeader(),    Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
326	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  0,  Long.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  0,  Long.MAX_VALUE);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  0,  Long.MAX_VALUE);	  wrapPaxHeaders(currEntry.getPaxHeader(),    Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
327	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  Long.MAX_VALUE,  headers);  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  Long.MAX_VALUE,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  Long.MAX_VALUE,  headers);	  wrapPaxHeaders(currEntry.getPaxHeader(),    Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
328	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  4);  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  4);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  4);	  wrapPaxHeaders(currEntry.getPaxHeader(),    Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
329	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  Long.MAX_VALUE,  true);  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  Long.MAX_VALUE,  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  Long.MAX_VALUE,  true);	  wrapPaxHeaders(currEntry.getPaxHeader(),    Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
330	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerBuf,  longNameData);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerBuf,  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  headerBuf,  longNameData);	  wrapPaxHeader(currEntry.getName(),    longNameData,    headerBuf);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
331	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  headers,  longNameData);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  headers,  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  headers,  longNameData);	  wrapPaxHeader(currEntry.getName(),    longNameData,    headerBuf);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
332	[BUG]  [BUGGY]  WrapPaxHeader  currEntry  =  wrapPaxHeader(currEntry.getName(),  headerBuf,  longNameData);  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  WrapPaxHeader  currEntry  =  wrapPaxHeader(currEntry.getName(),  headerBuf,  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	WrapPaxHeader  currEntry  =  wrapPaxHeader(currEntry.getName(),  headerBuf,  longNameData);	  wrapPaxHeader(currEntry.getName(),    longNameData,    headerBuf);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
333	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerData,  longNameData);  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerData,  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  headerData,  longNameData);	  wrapPaxHeader(currEntry.getName(),    longNameData,    headerBuf);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
334	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  headerBuf,  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  headerBuf,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  headerBuf,  hasHitEOF);	  wrapPaxHeader(currEntry.getName(),    longNameData,    headerBuf);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
335	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerBuf,  shortNameData);  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerBuf,  shortNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  headerBuf,  shortNameData);	  wrapPaxHeader(currEntry.getName(),    longNameData,    headerBuf);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
336	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  headers);  [CE]  illegal  start  of  expression  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  headers);	  wrapPaxHeader(currEntry.getName(),    longNameData,    headerBuf);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
337	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  zipEncoding,  longNameData);  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  zipEncoding,  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  zipEncoding,  longNameData);	  wrapPaxHeader(currEntry.getName(),    longNameData,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
338	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  zipEncoding,  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  zipEncoding,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  zipEncoding,  hasHitEOF);	  wrapPaxHeader(currEntry.getName(),    longNameData,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
339	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  fileEncoding);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  fileEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  fileEncoding);	  wrapPaxHeader(currEntry.getName(),    longNameData,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
340	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  this.zipEncoding);  [CE]  <identifier>  expected  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  this.zipEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  this.zipEncoding);	  wrapPaxHeader(currEntry.getName(),    longNameData,    zipEncoding);    	non-compiled	[CE]  <identifier>  expected	106	None	replace
341	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  headers,  hasHitEOF);  [CE]  <identifier>  expected  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  headers,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  headers,  hasHitEOF);	  wrapPaxHeader(currEntry.getName(),    headers);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
342	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  headers,  true);  [CE]  <identifier>  expected  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  headers,  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  headers,  true);	  wrapPaxHeader(currEntry.getName(),    headers);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
343	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  headers,  false);  [CE]  <identifier>  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  headers,  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  headers,  false);	  wrapPaxHeader(currEntry.getName(),    headers);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
344	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  headers,  isHitEOF);  [CE]  <identifier>  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  headers,  isHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  headers,  isHitEOF);	  wrapPaxHeader(currEntry.getName(),    headers);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
345	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headers);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this.headers);	  wrapPaxHeader(currEntry.getName(),    headers);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
346	[BUG]  [BUGGY]  scanPaxHeaders(currEntry,  headerBuf);  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeaders(currEntry,  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry,  headerBuf);	  scanPaxHeaders(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
347	[BUG]  [BUGGY]  scanPaxHeaders(currEntry,  headers);  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeaders(currEntry,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry,  headers);	  scanPaxHeaders(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
348	[BUG]  [BUGGY]  parsePax(currEntry.getName());  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePax(currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePax(currEntry.getName());	  parsePaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
349	[BUG]  [BUGGY]  Pax  currEntry  =  getPaxHeaders(currEntry.getPax());  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  currEntry  =  getPaxHeaders(currEntry.getPax());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  currEntry  =  getPaxHeaders(currEntry.getPax());	  Pax    headers    =    getPaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
350	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getSourceName());  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getSourceName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getSourceName());	  Pax    headers    =    getPaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
351	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getURL());  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getURL());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getURL());	  Pax    headers    =    getPaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
352	[BUG]  [BUGGY]  traversePaxHeader(currEntry.getSize());  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeader(currEntry.getSize());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader(currEntry.getSize());	  traversePaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
353	[BUG]  [BUGGY]  traversePaxHeader(currEntry.getParent());  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeader(currEntry.getParent());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader(currEntry.getParent());	  traversePaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
354	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getName(),  currEntry.getPaxHeader());  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getName(),  currEntry.getPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getName(),  currEntry.getPaxHeader());	  rehashPaxHeader(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
355	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  currEntry.getName(),  headers);  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  currEntry.getName(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  currEntry.getName(),  headers);	  rehashPaxHeader(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
356	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  longNameData.getName());  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  longNameData.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  longNameData.getName());	  rehashPaxHeader(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
357	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  currEntry.getName(),  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  currEntry.getName(),  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  currEntry.getName(),  hasHitEOF);	  rehashPaxHeader(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
358	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  zipEncoding.getName());  [CE]  illegal  start  of  expression  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  zipEncoding.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  zipEncoding.getName());	  rehashPaxHeader(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
359	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  cache.getName());  [CE]  illegal  start  of  expression  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  cache.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  cache.getName());	  rehashPaxHeader(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
360	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  currEntry.getName(),  longNameData);  [CE]  not  a  statement  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  currEntry.getName(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  currEntry.getName(),  longNameData);	  rehashPaxHeader(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  not  a  statement	115	None	replace
361	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  longNameData,  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  longNameData,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  longNameData,  hasHitEOF);	  rehashPaxHeader(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
362	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  headerBuf);  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  headerBuf);	  rehashPaxHeader(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
363	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  longNameData,  headerBuf);  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  longNameData,  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  longNameData,  headerBuf);	  rehashPaxHeader(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
364	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  longNameData,  true);  [CE]  illegal  start  of  expression  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  longNameData,  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  longNameData,  true);	  rehashPaxHeader(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
365	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  longNameData,  headers);  [CE]  illegal  start  of  expression  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  longNameData,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  longNameData,  headers);	  rehashPaxHeader(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
366	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  longNameData,  false);  [CE]  illegal  start  of  expression  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  longNameData,  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  longNameData,  false);	  rehashPaxHeader(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
367	[BUG]  [BUGGY]  Pax  headers  =  getHeaders(currEntry.getPaxHeader());  [CE]  illegal  start  of  expression  [FE]            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getHeaders(currEntry.getPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getHeaders(currEntry.getPaxHeader());	  Pax    headers    =    getHeaders();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
368	[BUG]  [BUGGY]  Pax  headers  =  getHeaders(currEntry.getPax());  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getHeaders(currEntry.getPax());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getHeaders(currEntry.getPax());	  Pax    headers    =    getHeaders();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
369	[BUG]  [BUGGY]  Pax  headers  =  getHeaders(currEntry.getName());  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getHeaders(currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getHeaders(currEntry.getName());	  Pax    headers    =    getHeaders();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
370	[BUG]  [BUGGY]  Pax  headers  =  getHeaders(currEntry);  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getHeaders(currEntry);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getHeaders(currEntry);	  Pax    headers    =    getHeaders();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
371	[BUG]  [BUGGY]  traversePaxHeader(currEntry.getMethod());  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeader(currEntry.getMethod());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader(currEntry.getMethod());	  traversePaxHeader(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
372	[BUG]  [BUGGY]  traversePaxHeader(currEntry,  headers);  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeader(currEntry,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader(currEntry,  headers);	  traversePaxHeader(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
373	[BUG]  [BUGGY]  traversePaxHeader(currEntry,  true);  [CE]  unclosed  string  literal  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeader(currEntry,  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader(currEntry,  true);	  traversePaxHeader(currEntry);    	non-compiled	[CE]  unclosed  string  literal	57	None	replace
374	[BUG]  [BUGGY]  traversePaxHeader(currEntry.getPax(),  longNameData);  [CE]  unclosed  string  literal  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeader(currEntry.getPax(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader(currEntry.getPax(),  longNameData);	  traversePaxHeader(currEntry.getPax());    	non-compiled	[CE]  unclosed  string  literal	61	None	replace
375	[BUG]  [BUGGY]  traversePaxHeader(currEntry.getPax(),  true);  [CE]  unclosed  string  literal  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeader(currEntry.getPax(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader(currEntry.getPax(),  true);	  traversePaxHeader(currEntry.getPax());    	non-compiled	[CE]  unclosed  string  literal	61	None	replace
376	[BUG]  [BUGGY]  traversePaxHeader(currEntry.getPax(),  headers);  [CE]  unclosed  string  literal  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeader(currEntry.getPax(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader(currEntry.getPax(),  headers);	  traversePaxHeader(currEntry.getPax());    	non-compiled	[CE]  unclosed  string  literal	61	None	replace
377	[BUG]  [BUGGY]  traversePaxHeader(currEntry.getURL());  [CE]  unclosed  string  literal  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeader(currEntry.getURL());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader(currEntry.getURL());	  traversePaxHeader(currEntry.getPax());    	non-compiled	[CE]  unclosed  string  literal	61	None	replace
378	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getSourceName(),  longNameData);  [CE]  unclosed  string  literal  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getSourceName(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getSourceName(),  longNameData);	  parsePaxHeader(currEntry.getSourceName());    	non-compiled	[CE]  unclosed  string  literal	90	None	replace
379	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getSourceName(),  true);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getSourceName(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getSourceName(),  true);	  parsePaxHeader(currEntry.getSourceName());    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
380	[BUG]  [BUGGY]  ||  currEntry.getPaxHeader()  ==  null)  {  return  currEntry.getPaxHeader();  }  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ||  currEntry.getPaxHeader()  ==  null)  {  return  currEntry.getPaxHeader();  }  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	||  currEntry.getPaxHeader()  ==  null)  {  return  currEntry.getPaxHeader();  }	  if(currEntry.getPaxHeader()    ==    null)    {    return    currEntry.getPaxHeader();    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
381	[BUG]  [BUGGY]  currEntry.setPaxHeader(currEntry.getPaxHeader());  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  currEntry.setPaxHeader(currEntry.getPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	currEntry.setPaxHeader(currEntry.getPaxHeader());	  if(currEntry.getPaxHeader()    ==    null)    {    return    currEntry.getPaxHeader();    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
382	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getSize());  [CE]  illegal  start  of  expression  [FE]            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getSize());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getSize());	  validatePaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
383	[BUG]  [BUGGY]  ||  hasHitEOF)  {  return  currEntry.getPaxHeader();  }  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ||  hasHitEOF)  {  return  currEntry.getPaxHeader();  }  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	||  hasHitEOF)  {  return  currEntry.getPaxHeader();  }	  if(!hasHitEOF)    {    return    currEntry.getPaxHeader();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
384	[BUG]  [BUGGY]  ||!hasHitEOF)  {  return  currEntry.getPaxHeader();  }  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ||!hasHitEOF)  {  return  currEntry.getPaxHeader();  }  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	||!hasHitEOF)  {  return  currEntry.getPaxHeader();  }	  if(!hasHitEOF)    {    return    currEntry.getPaxHeader();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
385	[BUG]  [BUGGY]  while(!hasHitEOF)  {  currEntry.setPaxHeader(currEntry.getPaxHeader());  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  while(!hasHitEOF)  {  currEntry.setPaxHeader(currEntry.getPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	while(!hasHitEOF)  {  currEntry.setPaxHeader(currEntry.getPaxHeader());	  if(!hasHitEOF)    {    return    currEntry.getPaxHeader();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
386	[BUG]  [BUGGY]  if(hasHitEOF)  {  return  currEntry.getPaxHeader();  }  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  if(hasHitEOF)  {  return  currEntry.getPaxHeader();  }  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	if(hasHitEOF)  {  return  currEntry.getPaxHeader();  }	  if(!hasHitEOF)    {    return    currEntry.getPaxHeader();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
387	[BUG]  [BUGGY]  parsePaxHeaders(currEntry,  headers);  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeaders(currEntry,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeaders(currEntry,  headers);	  parsePaxHeaders(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
388	[BUG]  [BUGGY]  parsePaxHeaders(currEntry.getMethod());  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeaders(currEntry.getMethod());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeaders(currEntry.getMethod());	  parsePaxHeaders(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
389	[BUG]  [BUGGY]  parsePaxHeaders(currEntry.getPax());  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeaders(currEntry.getPax());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeaders(currEntry.getPax());	  parsePaxHeaders(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
390	[BUG]  [BUGGY]  parsePaxHeaders(currEntry,  headerBuf);  [CE]  illegal  start  of  expression  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeaders(currEntry,  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeaders(currEntry,  headerBuf);	  parsePaxHeaders(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
391	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getPax(),  longNameData);  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry.getPax(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getPax(),  longNameData);	  traversePaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
392	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getPax(),  headers);  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry.getPax(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getPax(),  headers);	  traversePaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
393	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getPax(),  true);  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry.getPax(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getPax(),  true);	  traversePaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
394	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getPax(),  false);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry.getPax(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getPax(),  false);	  traversePaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
395	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getPax(),  null);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry.getPax(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getPax(),  null);	  traversePaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
396	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader),  true);  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader),  true);	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
397	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader),  false);  [CE]  illegal  start  of  expression  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader),  false);	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
398	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader),  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader),  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader),  hasHitEOF);	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
399	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.encode(headerPaxHeader));  [CE]  illegal  start  of  expression  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.encode(headerPaxHeader));  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.encode(headerPaxHeader));	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
400	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader),  headers);  [CE]  illegal  start  of  expression  [FE]                                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader),  headers);	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
401	[BUG]  [BUGGY]  rehashPaxHeader(currEntry,  headers);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry,  headers);	  rehashPaxHeader(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
402	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue()  +  1;  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue()  +  1;	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
403	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currentEntry.getValue();  [CE]  illegal  start  of  expression  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currentEntry.getValue();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)currentEntry.getValue();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
404	[BUG]  [BUGGY]  WrapPaxHeaders  currEntry  =  wrapPaxHeaders(currEntry.getSize());  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  WrapPaxHeaders  currEntry  =  wrapPaxHeaders(currEntry.getSize());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	WrapPaxHeaders  currEntry  =  wrapPaxHeaders(currEntry.getSize());	  wrapPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
405	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPax());  [CE]  not  a  statement  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPax());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPax());	  wrapPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  not  a  statement	12	None	replace
406	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getSize()  -  1);  [CE]  not  a  statement  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getSize()  -  1);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getSize()  -  1);	  wrapPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  not  a  statement	12	None	replace
407	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getSize()  +  1);  [CE]  not  a  statement  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getSize()  +  1);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getSize()  +  1);	  wrapPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  not  a  statement	12	None	replace
408	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getSize(),  longNameData);  [CE]  not  a  statement  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getSize(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getSize(),  longNameData);	  wrapPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  not  a  statement	12	None	replace
409	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this,  headers);  [CE]  not  a  statement  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this,  headers);	  wrapPaxHeader(currEntry.getName(),    this);    	non-compiled	[CE]  not  a  statement	21	None	replace
410	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this,  hasHitEOF);  [CE]  not  a  statement  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this,  hasHitEOF);	  wrapPaxHeader(currEntry.getName(),    this);    	non-compiled	[CE]  not  a  statement	21	None	replace
411	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this,  null);  [CE]  not  a  statement  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this,  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this,  null);	  wrapPaxHeader(currEntry.getName(),    this);    	non-compiled	[CE]  not  a  statement	21	None	replace
412	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this,  true);  [CE]  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this,  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this,  true);	  wrapPaxHeader(currEntry.getName(),    this);    	non-compiled	[CE]  	21	None	replace
413	[BUG]  [BUGGY]  if(currEntry.getPaxHeader()!=  null)  {  writePaxHeader(currEntry.getPaxHeader());  }  [CE]  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  if(currEntry.getPaxHeader()!=  null)  {  writePaxHeader(currEntry.getPaxHeader());  }  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	if(currEntry.getPaxHeader()!=  null)  {  writePaxHeader(currEntry.getPaxHeader());  }	  writePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  	16	None	replace
414	[BUG]  [BUGGY]  writePaxHeader(currEntry.getName());  [CE]  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  writePaxHeader(currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	writePaxHeader(currEntry.getName());	  writePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  	16	None	replace
415	[BUG]  [BUGGY]  writePaxHeader(currEntry.getPaxHeader(),  longNameData);  [CE]  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  writePaxHeader(currEntry.getPaxHeader(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	writePaxHeader(currEntry.getPaxHeader(),  longNameData);	  writePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  	16	None	replace
416	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  currEntry.getPaxHeader();  [CE]  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  final  TarArchiveEntry  currEntry  =  currEntry.getPaxHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	final  TarArchiveEntry  currEntry  =  currEntry.getPaxHeader();	  writePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  	16	None	replace
417	[BUG]  [BUGGY]  if(currEntry.getPaxHeader()!=  null)  {  writePaxHeader(currEntry.getPaxHeader());  }  else  {  return  null;  }  [CE]  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  if(currEntry.getPaxHeader()!=  null)  {  writePaxHeader(currEntry.getPaxHeader());  }  else  {  return  null;  }  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	if(currEntry.getPaxHeader()!=  null)  {  writePaxHeader(currEntry.getPaxHeader());  }  else  {  return  null;  }	  writePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  	16	None	replace
418	[BUG]  [BUGGY]  writePaxHeader(currEntry.getPaxHeader(),  true);  [CE]  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  writePaxHeader(currEntry.getPaxHeader(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	writePaxHeader(currEntry.getPaxHeader(),  true);	  writePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  	16	None	replace
419	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getPax(),  headers);  [CE]  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeaders(currEntry.getPax(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getPax(),  headers);	  scanPaxHeaders(currEntry.getPax());    	non-compiled	[CE]  	5	None	replace
420	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getPax(),  true);  [CE]  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeaders(currEntry.getPax(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getPax(),  true);	  scanPaxHeaders(currEntry.getPax());    	non-compiled	[CE]  	5	None	replace
421	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getPax(),  longNameData);  [CE]  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeaders(currEntry.getPax(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getPax(),  longNameData);	  scanPaxHeaders(currEntry.getPax());    	non-compiled	[CE]  	5	None	replace
422	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getPax(),  false);  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeaders(currEntry.getPax(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getPax(),  false);	  scanPaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
423	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getPax()  +  1);  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeaders(currEntry.getPax()  +  1);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getPax()  +  1);	  scanPaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
424	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getPax(),  null);  [CE]  illegal  start  of  expression  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeaders(currEntry.getPax(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getPax(),  null);	  scanPaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
425	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerData));  return  currEntry;  [CE]  illegal  start  of  expression  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerData));  return  currEntry;  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerData));  return  currEntry;	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));    return    currEntry;    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
426	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.encode(longNameData));  return  currEntry;  [CE]  illegal  start  of  expression  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.encode(longNameData));  return  currEntry;  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.encode(longNameData));  return  currEntry;	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));    return    currEntry;    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
427	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData),  0);  return  currEntry;  [CE]  illegal  start  of  expression  [FE]                                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData),  0);  return  currEntry;  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData),  0);  return  currEntry;	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));    return    currEntry;    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
428	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData),  headerBuf);  return  currEntry;  [CE]  illegal  start  of  expression  [FE]                                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData),  headerBuf);  return  currEntry;  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData),  headerBuf);  return  currEntry;	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));    return    currEntry;    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
429	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData),  headers);  return  currEntry;  [CE]  illegal  start  of  expression  [FE]                                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData),  headers);  return  currEntry;  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData),  headers);  return  currEntry;	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));    return    currEntry;    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
430	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));  return  null;  [CE]  ';'  expected  [FE]                                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));  return  null;  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));  return  null;	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));    return    currEntry;    	non-compiled	[CE]  ';'  expected	105	None	replace
431	[BUG]  [BUGGY]  validatePaxHeaders(currEntry.getPax(),  headers);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeaders(currEntry.getPax(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeaders(currEntry.getPax(),  headers);	  validatePaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
432	[BUG]  [BUGGY]  validatePaxHeaders(currEntry.getPax(),  true);  [CE]  ';'  expected  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeaders(currEntry.getPax(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeaders(currEntry.getPax(),  true);	  validatePaxHeaders(currEntry.getPax());    	non-compiled	[CE]  ';'  expected	78	None	replace
433	[BUG]  [BUGGY]  validatePaxHeaders(currEntry.getPax(),  longNameData);  [CE]  ';'  expected  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeaders(currEntry.getPax(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeaders(currEntry.getPax(),  longNameData);	  validatePaxHeaders(currEntry.getPax());    	non-compiled	[CE]  ';'  expected	78	None	replace
434	[BUG]  [BUGGY]  validatePaxHeaders(currEntry.getPax(),  false);  [CE]  ';'  expected  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeaders(currEntry.getPax(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeaders(currEntry.getPax(),  false);	  validatePaxHeaders(currEntry.getPax());    	non-compiled	[CE]  ';'  expected	78	None	replace
435	[BUG]  [BUGGY]  validatePaxHeaders(currEntry.getPax(),  null);  [CE]  ';'  expected  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeaders(currEntry.getPax(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeaders(currEntry.getPax(),  null);	  validatePaxHeaders(currEntry.getPax());    	non-compiled	[CE]  ';'  expected	78	None	replace
436	[BUG]  [BUGGY]  RehashPaxHeaders();  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders();	  if(!hasHitEOF)    {    rehashPaxHeaders();    }    	non-compiled	[CE]  ';'  expected	34	None	replace
437	[BUG]  [BUGGY]  RehashPaxHeaders  rehashPaxHeaders();  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  rehashPaxHeaders();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  rehashPaxHeaders();	  if(!hasHitEOF)    {    rehashPaxHeaders();    }    	non-compiled	[CE]  ';'  expected	34	None	replace
438	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  rehashPaxHeaders();  [CE]  ';'  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =  rehashPaxHeaders();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  rehashPaxHeaders();	  if(!hasHitEOF)    {    rehashPaxHeaders();    }    	non-compiled	[CE]  ';'  expected	34	None	replace
439	[BUG]  [BUGGY]  WrapPaxHeader  currEntry  =  wrapPaxHeader(currEntry.getName(),  false);  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  WrapPaxHeader  currEntry  =  wrapPaxHeader(currEntry.getName(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	WrapPaxHeader  currEntry  =  wrapPaxHeader(currEntry.getName(),  false);	  wrapPaxHeader(currEntry.getName(),    false);    	non-compiled	[CE]  ';'  expected	20	None	replace
440	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  false,  true);  [CE]  ';'  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  false,  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  false,  true);	  wrapPaxHeader(currEntry.getName(),    false);    	non-compiled	[CE]  ';'  expected	20	None	replace
441	[BUG]  [BUGGY]  wrapPaxHeader(currEntry,  currEntry.getName(),  false);  [CE]  ';'  expected  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry,  currEntry.getName(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry,  currEntry.getName(),  false);	  wrapPaxHeader(currEntry.getName(),    false);    	non-compiled	[CE]  ';'  expected	20	None	replace
442	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  false,  hasHitEOF);  [CE]  ';'  expected  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  false,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  false,  hasHitEOF);	  wrapPaxHeader(currEntry.getName(),    false);    	non-compiled	[CE]  ';'  expected	20	None	replace
443	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getSize(),  false);  [CE]  ';'  expected  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getSize(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getSize(),  false);	  wrapPaxHeader(currEntry.getName(),    false);    	non-compiled	[CE]  ';'  expected	20	None	replace
444	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getName(),  longNameData);  [CE]  ';'  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getName(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getName(),  longNameData);	  parsePaxHeader(currEntry.getName());    	non-compiled	[CE]  ';'  expected	23	None	replace
445	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getName(),  true);  [CE]  ';'  expected  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getName(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getName(),  true);	  parsePaxHeader(currEntry.getName());    	non-compiled	[CE]  ';'  expected	23	None	replace
446	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getName(),  this);  [CE]  ';'  expected  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getName(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getName(),  this);	  parsePaxHeader(currEntry.getName());    	non-compiled	[CE]  ';'  expected	23	None	replace
447	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getName(),  null);  [CE]  ';'  expected  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getName(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getName(),  null);	  parsePaxHeader(currEntry.getName());    	non-compiled	[CE]  ';'  expected	23	None	replace
448	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getName(),  false);  [CE]  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getName(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getName(),  false);	  parsePaxHeader(currEntry.getName());    	non-compiled	[CE]  	23	None	replace
449	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerBuf,  isHitEOF);  [CE]  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerBuf,  isHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  headerBuf,  isHitEOF);	  wrapPaxHeader(currEntry.getName(),    longNameData,    isHitEOF);    	non-compiled	[CE]  	92	None	replace
450	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  isHitEOF,  hasHitEOF);  [CE]  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  isHitEOF,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  isHitEOF,  hasHitEOF);	  wrapPaxHeader(currEntry.getName(),    longNameData,    isHitEOF);    	non-compiled	[CE]  	92	None	replace
451	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  hasHitEOF);  [CE]  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  hasHitEOF);	  wrapPaxHeader(currEntry.getName(),    longNameData,    isHitEOF);    	non-compiled	[CE]  	92	None	replace
452	[BUG]  [BUGGY]  traversePaxHeader(currEntry.getName(),  longNameData);  [CE]  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeader(currEntry.getName(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader(currEntry.getName(),  longNameData);	  traversePaxHeader(currEntry.getName());    	non-compiled	[CE]  	59	None	replace
453	[BUG]  [BUGGY]  traversePaxHeader(currEntry.getName(),  true);  [CE]  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeader(currEntry.getName(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader(currEntry.getName(),  true);	  traversePaxHeader(currEntry.getName());    	non-compiled	[CE]  	59	None	replace
454	[BUG]  [BUGGY]  traversePaxHeader(currEntry.getName(),  this);  [CE]  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeader(currEntry.getName(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader(currEntry.getName(),  this);	  traversePaxHeader(currEntry.getName());    	non-compiled	[CE]  	59	None	replace
455	[BUG]  [BUGGY]  traversePaxHeader(currEntry.getName(),  false);  [CE]  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeader(currEntry.getName(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader(currEntry.getName(),  false);	  traversePaxHeader(currEntry.getName());    	non-compiled	[CE]  	59	None	replace
456	[BUG]  [BUGGY]  traversePaxHeader(currEntry.getName(),  null);  [CE]  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeader(currEntry.getName(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader(currEntry.getName(),  null);	  traversePaxHeader(currEntry.getName());    	non-compiled	[CE]  	59	None	replace
457	[BUG]  [BUGGY]  traversePaxHeader(currEntry.getName(),  headers);  [CE]  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeader(currEntry.getName(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader(currEntry.getName(),  headers);	  traversePaxHeader(currEntry.getName());    	non-compiled	[CE]  	59	None	replace
458	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  longNameData.getName());  [CE]  [FE]            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  longNameData.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  longNameData.getName());	  wrapPaxHeader(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  	126	None	replace
459	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  currEntry.getPaxHeader());  [CE]  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  currEntry.getPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  currEntry.getPaxHeader());	  wrapPaxHeader(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  	126	None	replace
460	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  cache.getName());  [CE]  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  cache.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  cache.getName());	  wrapPaxHeader(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  	126	None	replace
461	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  currEntry.getName(),  headers);  [CE]  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  currEntry.getName(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  currEntry.getName(),  headers);	  wrapPaxHeader(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  	126	None	replace
462	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  headers.getName());  [CE]  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  headers.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  headers.getName());	  wrapPaxHeader(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  	126	None	replace
463	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  currEntry.getName(),  hasHitEOF);  [CE]  ';'  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  currEntry.getName(),  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  currEntry.getName(),  hasHitEOF);	  wrapPaxHeader(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  ';'  expected	126	None	replace
464	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  true,  hasHitEOF);  [CE]  ';'  expected  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  true,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  true,  hasHitEOF);	  wrapPaxHeader(currEntry.getName(),    longNameData,    true);    	non-compiled	[CE]  ';'  expected	48	None	replace
465	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerBuf,  true);  [CE]  ';'  expected  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerBuf,  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  headerBuf,  true);	  wrapPaxHeader(currEntry.getName(),    longNameData,    true);    	non-compiled	[CE]  ';'  expected	48	None	replace
466	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf,  longNameData,  true);  [CE]  ';'  expected  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf,  longNameData,  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this.headerBuf,  longNameData,  true);	  wrapPaxHeader(currEntry.getName(),    longNameData,    true);    	non-compiled	[CE]  ';'  expected	48	None	replace
467	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.longNameData,  true);  [CE]  ';'  expected  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.longNameData,  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this.longNameData,  true);	  wrapPaxHeader(currEntry.getName(),    longNameData,    true);    	non-compiled	[CE]  ';'  expected	48	None	replace
468	[BUG]  [BUGGY]  parsePaxHeader(currEntry,  headers);  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry,  headers);	  parsePaxHeader(currEntry);    	non-compiled	[CE]  ';'  expected	22	None	replace
469	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  null);  [CE]  ';'  expected  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  null);	  wrapPaxHeader(currEntry.getName(),    longNameData,    this);    	non-compiled	[CE]  ';'  expected	50	None	replace
470	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  this,  hasHitEOF);  [CE]  ';'  expected  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  this,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  this,  hasHitEOF);	  wrapPaxHeader(currEntry.getName(),    longNameData,    this);    	non-compiled	[CE]  ';'  expected	50	None	replace
471	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  this,  headers);  [CE]  ';'  expected  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  this,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  this,  headers);	  wrapPaxHeader(currEntry.getName(),    longNameData,    this);    	non-compiled	[CE]  ';'  expected	50	None	replace
472	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this,  longNameData);  [CE]  ';'  expected  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this,  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this,  longNameData);	  wrapPaxHeader(currEntry.getName(),    longNameData,    this);    	non-compiled	[CE]  ';'  expected	50	None	replace
473	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  this,  isHitEOF);  [CE]  ';'  expected  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  this,  isHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  this,  isHitEOF);	  wrapPaxHeader(currEntry.getName(),    longNameData,    this);    	non-compiled	[CE]  ';'  expected	50	None	replace
474	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData),  headerBuf);  [CE]  ';'  expected  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData),  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData),  headerBuf);	  ((    TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData));    	non-compiled	[CE]  ';'  expected	102	None	replace
475	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData),  hasHitEOF);  [CE]  ';'  expected  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData),  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData),  hasHitEOF);	  ((    TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData));    	non-compiled	[CE]  ';'  expected	102	None	replace
476	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(headerData));  [CE]  ';'  expected  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(headerData));  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(headerData));	  ((    TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData));    	non-compiled	[CE]  ';'  expected	102	None	replace
477	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData),  0);  [CE]  ';'  expected  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData),  0);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData),  0);	  ((    TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData));    	non-compiled	[CE]  ';'  expected	102	None	replace
478	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData),  false);  [CE]  ';'  expected  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData),  false);	  ((    TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData));    	non-compiled	[CE]  ';'  expected	102	None	replace
479	[BUG]  [BUGGY]  Pax  currEntry  =  getPaxHeaders(currEntry);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  currEntry  =  getPaxHeaders(currEntry);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  currEntry  =  getPaxHeaders(currEntry);	  Pax    headers    =    getPaxHeaders(currEntry);    	non-compiled	[CE]  ';'  expected	41	None	replace
480	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(path);  [CE]  ';'  expected  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(path);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(path);	  ((    TarArchiveEntry)currEntry).setPaxHeader(null);    	non-compiled	[CE]  ';'  expected	65	None	replace
481	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(null,  null);  [CE]  ';'  expected  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(null,  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(null,  null);	  ((    TarArchiveEntry)currEntry).setPaxHeader(null);    	non-compiled	[CE]  ';'  expected	65	None	replace
482	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(null,  true);  [CE]  ';'  expected  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(null,  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(null,  true);	  ((    TarArchiveEntry)currEntry).setPaxHeader(null);    	non-compiled	[CE]  ';'  expected	65	None	replace
483	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(0);  [CE]  ';'  expected  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(0);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(0);	  ((    TarArchiveEntry)currEntry).setPaxHeader(null);    	non-compiled	[CE]  ';'  expected	65	None	replace
484	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPax(),  longNameData,  hasHitEOF);  [CE]  ';'  expected  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPax(),  longNameData,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPax(),  longNameData,  hasHitEOF);	  parsePaxHeader(currEntry.getPax(),    longNameData);    	non-compiled	[CE]  ';'  expected	72	None	replace
485	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPax(),  headerBuf);  [CE]  ';'  expected  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPax(),  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPax(),  headerBuf);	  parsePaxHeader(currEntry.getPax(),    longNameData);    	non-compiled	[CE]  ';'  expected	72	None	replace
486	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPax(),  file);  [CE]  ';'  expected  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPax(),  file);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPax(),  file);	  parsePaxHeader(currEntry.getPax(),    longNameData);    	non-compiled	[CE]  ';'  expected	72	None	replace
487	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPax(),  longNameData,  headerBuf);  [CE]  ';'  expected  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPax(),  longNameData,  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPax(),  longNameData,  headerBuf);	  parsePaxHeader(currEntry.getPax(),    longNameData);    	non-compiled	[CE]  ';'  expected	72	None	replace
488	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPax(),  longNameData,  true);  [CE]  not  a  statement  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPax(),  longNameData,  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPax(),  longNameData,  true);	  parsePaxHeader(currEntry.getPax(),    longNameData);    	non-compiled	[CE]  not  a  statement	72	None	replace
489	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPax(),  longNameData,  this);  [CE]  ';'  expected  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPax(),  longNameData,  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPax(),  longNameData,  this);	  parsePaxHeader(currEntry.getPax(),    longNameData);    	non-compiled	[CE]  ';'  expected	72	None	replace
490	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPax(),  longNameData,  false);  [CE]  ';'  expected  [FE]                                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPax(),  longNameData,  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPax(),  longNameData,  false);	  parsePaxHeader(currEntry.getPax(),    longNameData);    	non-compiled	[CE]  ';'  expected	72	None	replace
491	[BUG]  [BUGGY]  WrapPaxHeaders  currEntry  =  wrapPaxHeaders(currEntry.getPaxHeader(),  true);  [CE]  ';'  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  WrapPaxHeaders  currEntry  =  wrapPaxHeaders(currEntry.getPaxHeader(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	WrapPaxHeaders  currEntry  =  wrapPaxHeaders(currEntry.getPaxHeader(),  true);	  wrapPaxHeaders(currEntry.getPaxHeader(),    true);    	non-compiled	[CE]  ';'  expected	9	None	replace
492	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  true,  hasHitEOF);  [CE]  ';'  expected  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  true,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  true,  hasHitEOF);	  wrapPaxHeaders(currEntry.getPaxHeader(),    true);    	non-compiled	[CE]  ';'  expected	9	None	replace
493	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry,  currEntry.getPaxHeader(),  true);  [CE]  ';'  expected  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry,  currEntry.getPaxHeader(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry,  currEntry.getPaxHeader(),  true);	  wrapPaxHeaders(currEntry.getPaxHeader(),    true);    	non-compiled	[CE]  ';'  expected	9	None	replace
494	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  true,  false);  [CE]  ';'  expected  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  true,  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  true,  false);	  wrapPaxHeaders(currEntry.getPaxHeader(),    true);    	non-compiled	[CE]  ';'  expected	9	None	replace
495	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  hasHitEOF,  headers);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  hasHitEOF,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  hasHitEOF,  headers);	  wrapPaxHeader(currEntry.getName(),    longNameData,    hasHitEOF);    	non-compiled	[CE]  ';'  expected	44	None	replace
496	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  hasHitEOF,  headerBuf);  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  hasHitEOF,  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  hasHitEOF,  headerBuf);	  wrapPaxHeader(currEntry.getName(),    longNameData,    hasHitEOF);    	non-compiled	[CE]  ';'  expected	44	None	replace
497	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerBuf,  hasHitEOF);  [CE]  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerBuf,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  headerBuf,  hasHitEOF);	  wrapPaxHeader(currEntry.getName(),    longNameData,    hasHitEOF);    	non-compiled	[CE]  	44	None	replace
498	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  hasHitEOF,  skipped);  [CE]  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  hasHitEOF,  skipped);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  hasHitEOF,  skipped);	  wrapPaxHeader(currEntry.getName(),    longNameData,    hasHitEOF);    	non-compiled	[CE]  	44	None	replace
499	[BUG]  [BUGGY]  n  =  currEntry.getPax();  [CE]  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  n  =  currEntry.getPax();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	n  =  currEntry.getPax();	  n    =    currEntry.getPaxHeader();    	non-compiled	[CE]  	87	None	replace
500	[BUG]  [BUGGY]  n  =  currEntry.getNumberOfLinks();  [CE]  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  n  =  currEntry.getNumberOfLinks();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	n  =  currEntry.getNumberOfLinks();	  n    =    currEntry.getPaxHeader();    	non-compiled	[CE]  	87	None	replace
501	[BUG]  [BUGGY]  n  =  currEntry.getNumberOfLines();  [CE]  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  n  =  currEntry.getNumberOfLines();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	n  =  currEntry.getNumberOfLines();	  n    =    currEntry.getPaxHeader();    	non-compiled	[CE]  	87	None	replace
502	[BUG]  [BUGGY]  n  =  currEntry.getPaxNumber();  [CE]  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  n  =  currEntry.getPaxNumber();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	n  =  currEntry.getPaxNumber();	  n    =    currEntry.getPaxHeader();    	non-compiled	[CE]  	87	None	replace
503	[BUG]  [BUGGY]  n  =  currEntry.getPaxHeader()  +  1;  [CE]  [FE]                                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  n  =  currEntry.getPaxHeader()  +  1;  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	n  =  currEntry.getPaxHeader()  +  1;	  n    =    currEntry.getPaxHeader();    	non-compiled	[CE]  	87	None	replace
504	[BUG]  [BUGGY]  n  =  currEntry.getPaxEnd();  [CE]  [FE]                                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  n  =  currEntry.getPaxEnd();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	n  =  currEntry.getPaxEnd();	  n    =    currEntry.getPaxHeader();    	non-compiled	[CE]  	87	None	replace
505	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getName(),  longNameData);  [CE]  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getName(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getName(),  longNameData);	  rehashPaxHeader(currEntry.getName());    	non-compiled	[CE]  	35	None	replace
506	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getName(),  null);  [CE]  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getName(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getName(),  null);	  rehashPaxHeader(currEntry.getName());    	non-compiled	[CE]  	35	None	replace
507	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getName(),  this);  [CE]  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getName(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getName(),  this);	  rehashPaxHeader(currEntry.getName());    	non-compiled	[CE]  	35	None	replace
508	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getName(),  false);  [CE]  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getName(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getName(),  false);	  rehashPaxHeader(currEntry.getName());    	non-compiled	[CE]  	35	None	replace
509	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getBaseName());  [CE]  [FE]            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getBaseName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getBaseName());	  Pax    headers    =    getPaxHeaders(currEntry.getBase());    	non-compiled	[CE]  	123	None	replace
510	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getBase(),  currEntry.getName());  [CE]  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getBase(),  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getBase(),  currEntry.getName());	  Pax    headers    =    getPaxHeaders(currEntry.getBase());    	non-compiled	[CE]  	123	None	replace
511	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getBase(),  true);  [CE]  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getBase(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getBase(),  true);	  Pax    headers    =    getPaxHeaders(currEntry.getBase());    	non-compiled	[CE]  	123	None	replace
512	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getMethod());  [CE]  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getMethod());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getMethod());	  Pax    headers    =    getPaxHeaders(currEntry.getBase());    	non-compiled	[CE]  	123	None	replace
513	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  false);  [CE]  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  false);	  wrapPaxHeader(currEntry.getPaxHeader(),    true);    	non-compiled	[CE]  	29	None	replace
514	[BUG]  [BUGGY]  WrapPaxHeader  currEntry  =  wrapPaxHeader(currEntry.getPaxHeader(),  true);  [CE]  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  WrapPaxHeader  currEntry  =  wrapPaxHeader(currEntry.getPaxHeader(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	WrapPaxHeader  currEntry  =  wrapPaxHeader(currEntry.getPaxHeader(),  true);	  wrapPaxHeader(currEntry.getPaxHeader(),    true);    	non-compiled	[CE]  	29	None	replace
515	[BUG]  [BUGGY]  WrapPaxHeader  currEntry  =  wrapPaxHeader(currEntry.getPaxHeader(),  false);  [CE]  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  WrapPaxHeader  currEntry  =  wrapPaxHeader(currEntry.getPaxHeader(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	WrapPaxHeader  currEntry  =  wrapPaxHeader(currEntry.getPaxHeader(),  false);	  wrapPaxHeader(currEntry.getPaxHeader(),    true);    	non-compiled	[CE]  	29	None	replace
516	[BUG]  [BUGGY]  WrapPaxHeader(currEntry.getPaxHeader(),  false);  [CE]  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  WrapPaxHeader(currEntry.getPaxHeader(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	WrapPaxHeader(currEntry.getPaxHeader(),  false);	  wrapPaxHeader(currEntry.getPaxHeader(),    true);    	non-compiled	[CE]  	29	None	replace
517	[BUG]  [BUGGY]  WrapPaxHeader  currEntry  =  currEntry.getPaxHeader();  [CE]  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  WrapPaxHeader  currEntry  =  currEntry.getPaxHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	WrapPaxHeader  currEntry  =  currEntry.getPaxHeader();	  wrapPaxHeader(currEntry.getPaxHeader(),    true);    	non-compiled	[CE]  	29	None	replace
518	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  true,  hasHitEOF);  [CE]  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  true,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  true,  hasHitEOF);	  wrapPaxHeader(currEntry.getPaxHeader(),    true);    	non-compiled	[CE]  	29	None	replace
519	[BUG]  [BUGGY]  WrapPaxHeader  currEntry  =  wrapPaxHeader(currEntry.getName(),  true);  [CE]  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  WrapPaxHeader  currEntry  =  wrapPaxHeader(currEntry.getName(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	WrapPaxHeader  currEntry  =  wrapPaxHeader(currEntry.getName(),  true);	  wrapPaxHeader(currEntry.getName(),    true);    	non-compiled	[CE]  	17	None	replace
520	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  true,  hasHitEOF);  [CE]  <identifier>  expected  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  true,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  true,  hasHitEOF);	  wrapPaxHeader(currEntry.getName(),    true);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
521	[BUG]  [BUGGY]  wrapPaxHeader(currEntry,  currEntry.getName(),  true);  [CE]  <identifier>  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry,  currEntry.getName(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry,  currEntry.getName(),  true);	  wrapPaxHeader(currEntry.getName(),    true);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
522	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  true,  false);  [CE]  <identifier>  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  true,  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  true,  false);	  wrapPaxHeader(currEntry.getName(),    true);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
523	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getSize(),  true);  [CE]  <identifier>  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getSize(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getSize(),  true);	  wrapPaxHeader(currEntry.getName(),    true);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
524	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  true,  isHitEOF);  [CE]  <identifier>  expected  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  true,  isHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  true,  isHitEOF);	  wrapPaxHeader(currEntry.getName(),    true);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
525	[BUG]  [BUGGY]  repaintPaxHeader(currEntry.getPaxHeader());  [CE]  <identifier>  expected  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  repaintPaxHeader(currEntry.getPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	repaintPaxHeader(currEntry.getPaxHeader());	  rehashPaxHeader(currEntry.getPaxHeader()    +    1);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
526	[BUG]  [BUGGY]  resetPaxHeader(currEntry.getPaxHeader());  [CE]  <identifier>  expected  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  resetPaxHeader(currEntry.getPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	resetPaxHeader(currEntry.getPaxHeader());	  rehashPaxHeader(currEntry.getPaxHeader()    +    1);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
527	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerData));  [CE]  <identifier>  expected  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerData));  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerData));	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));    	non-compiled	[CE]  <identifier>  expected	101	None	replace
528	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData),  headerBuf);  [CE]  <identifier>  expected  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData),  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData),  headerBuf);	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));    	non-compiled	[CE]  <identifier>  expected	101	None	replace
529	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData),  headers);  [CE]  <identifier>  expected  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData),  headers);	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));    	non-compiled	[CE]  <identifier>  expected	101	None	replace
530	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData),  0);  [CE]  <identifier>  expected  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData),  0);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData),  0);	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));    	non-compiled	[CE]  <identifier>  expected	101	None	replace
531	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData),  hasHitEOF);  [CE]  <identifier>  expected  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData),  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData),  hasHitEOF);	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));    	non-compiled	[CE]  <identifier>  expected	101	None	replace
532	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headers));  [CE]  <identifier>  expected  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headers));  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headers));	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));    	non-compiled	[CE]  <identifier>  expected	101	None	replace
533	[BUG]  [BUGGY]  recvHeader(currEntry.getPaxHeader());  [CE]  <identifier>  expected  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  recvHeader(currEntry.getPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	recvHeader(currEntry.getPaxHeader());	  if(currEntry.getPaxHeader()!=    null)    {    rehashPaxHeader(currEntry.getPaxHeader());    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
534	[BUG]  [BUGGY]  RehashPaxHeader(rehashEntry.getPaxHeader());  [CE]  <identifier>  expected  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeader(rehashEntry.getPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeader(rehashEntry.getPaxHeader());	  if(currEntry.getPaxHeader()!=    null)    {    rehashPaxHeader(currEntry.getPaxHeader());    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
535	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getMethod(),  longNameData);  [CE]  <identifier>  expected  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry.getMethod(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getMethod(),  longNameData);	  traversePaxHeaders(currEntry.getMethod());    	non-compiled	[CE]  <identifier>  expected	107	None	replace
536	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getMethod(),  true);  [CE]  <identifier>  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry.getMethod(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getMethod(),  true);	  traversePaxHeaders(currEntry.getMethod());    	non-compiled	[CE]  <identifier>  expected	107	None	replace
537	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getMethod(),  false);  [CE]  <identifier>  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry.getMethod(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getMethod(),  false);	  traversePaxHeaders(currEntry.getMethod());    	non-compiled	[CE]  <identifier>  expected	107	None	replace
538	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getMethod(),  this);  [CE]  <identifier>  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry.getMethod(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getMethod(),  this);	  traversePaxHeaders(currEntry.getMethod());    	non-compiled	[CE]  <identifier>  expected	107	None	replace
539	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerData);  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  headerData);	  wrapPaxHeader(currEntry.getName(),    headerBuf);    	non-compiled	[CE]  ';'  expected	45	None	replace
540	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerSize);  [CE]  ';'  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerSize);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  headerSize);	  wrapPaxHeader(currEntry.getName(),    headerBuf);    	non-compiled	[CE]  ';'  expected	45	None	replace
541	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  header);  [CE]  <identifier>  expected  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  header);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  header);	  wrapPaxHeader(currEntry.getName(),    headerBuf);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
542	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader());  return  null;  [CE]  <identifier>  expected  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader());  return  null;  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader());  return  null;	  if(currEntry.getPaxHeader()!=    null)    {    rehashPaxHeader(currEntry.getPaxHeader());    }    else    {    return    null;    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
543	[BUG]  [BUGGY]  resetPaxHeaders();  [CE]  <identifier>  expected  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  resetPaxHeaders();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	resetPaxHeaders();	  if(currEntry.isPaxHeader())    {    rehashPaxHeaders();    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
544	[BUG]  [BUGGY]  RectangleEdge  currEntry  =  currEntry.getRect();  [CE]  <identifier>  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RectangleEdge  currEntry  =  currEntry.getRect();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RectangleEdge  currEntry  =  currEntry.getRect();	  if(currEntry.isPaxHeader())    {    rehashPaxHeaders();    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
545	[BUG]  [BUGGY]  RectangleEdge  currEntry  =  getNextTarEntry();  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RectangleEdge  currEntry  =  getNextTarEntry();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RectangleEdge  currEntry  =  getNextTarEntry();	  if(currEntry.isPaxHeader())    {    rehashPaxHeaders();    }    	non-compiled	[CE]  ';'  expected	33	None	replace
546	[BUG]  [BUGGY]  scanHeader(currEntry.getPaxHeader(),  true);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeader(currEntry.getPaxHeader(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeader(currEntry.getPaxHeader(),  true);	  scanHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  ';'  expected	15	None	replace
547	[BUG]  [BUGGY]  scanHeader(currEntry.getPaxHeader(),  false);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeader(currEntry.getPaxHeader(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeader(currEntry.getPaxHeader(),  false);	  scanHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  ';'  expected	15	None	replace
548	[BUG]  [BUGGY]  scanHeader(currEntry.getName());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeader(currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeader(currEntry.getName());	  scanHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
549	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getURL());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry.getURL());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getURL());	  traversePaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
550	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getPax(),  this);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry.getPax(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getPax(),  this);	  traversePaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
551	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getURL());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getURL());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getURL());	  scanPaxHeader(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
552	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE  +  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE  +  1);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE  +  1);	  wrapPaxHeader(currEntry.getName(),    Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
553	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData.length);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData.length);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData.length);	  wrapPaxHeader(currEntry.getName(),    Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
554	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getSimpleName(),  true);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getSimpleName(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getSimpleName(),  true);	  wrapPaxHeader(currEntry.getName(),    true);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
555	[BUG]  [BUGGY]  traversePaxHeader(currEntry,  headerBuf);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeader(currEntry,  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader(currEntry,  headerBuf);	  traversePaxHeader(currEntry);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
556	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getAbsolutePath());  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getAbsolutePath());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getAbsolutePath());	  validatePaxHeader(currEntry.getName());    	non-compiled	[CE]  ';'  expected	74	None	replace
557	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getName(),  this);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getName(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getName(),  this);	  validatePaxHeader(currEntry.getName());    	non-compiled	[CE]  ';'  expected	74	None	replace
558	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  Long.MAX_VALUE  +  1);  [CE]  ';'  expected  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  Long.MAX_VALUE  +  1);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  Long.MAX_VALUE  +  1);	  wrapPaxHeaders(currEntry.getPaxHeader(),    Long.MAX_VALUE);    	non-compiled	[CE]  ';'  expected	10	None	replace
559	[BUG]  [BUGGY]  validatePaxHeaders(currEntry.getPax(),  currEntry.getName());  [CE]  ';'  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeaders(currEntry.getPax(),  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeaders(currEntry.getPax(),  currEntry.getName());	  validatePaxHeaders(currEntry.getPax());    	non-compiled	[CE]  ';'  expected	78	None	replace
560	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getMethod(),  headers);  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getMethod(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getMethod(),  headers);	  parsePaxHeader(currEntry.getMethod());    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
561	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf,  this.length);  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf,  this.length);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this.headerBuf,  this.length);	  wrapPaxHeader(currEntry.getName(),    this.headerBuf);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
562	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf,  this.sourceEnd);  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf,  this.sourceEnd);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this.headerBuf,  this.sourceEnd);	  wrapPaxHeader(currEntry.getName(),    this.headerBuf);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
563	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf,  this.currentSize);  [CE]  ';'  expected  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf,  this.currentSize);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this.headerBuf,  this.currentSize);	  wrapPaxHeader(currEntry.getName(),    this.headerBuf);    	non-compiled	[CE]  ';'  expected	49	None	replace
564	[BUG]  [BUGGY]  parsePaxFileHeaders(currEntry.getName());  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxFileHeaders(currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxFileHeaders(currEntry.getName());	  parsePaxFileHeaders();    	non-compiled	[CE]  ';'  expected	89	None	replace
565	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPax(),  longNameData,  isHitEOF);  [CE]  ';'  expected  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPax(),  longNameData,  isHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPax(),  longNameData,  isHitEOF);	  parsePaxHeader(currEntry.getPax(),    longNameData);    	non-compiled	[CE]  ';'  expected	72	None	replace
566	[BUG]  [BUGGY]  parsePaxDecoder();  [CE]  ';'  expected  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxDecoder();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxDecoder();	  parsePaxHeader();    	non-compiled	[CE]  ';'  expected	24	None	replace
567	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  0,  zipEncoding);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  0,  zipEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  0,  zipEncoding);	  wrapPaxHeader(currEntry.getName(),    longNameData,    zipEncoding);    	non-compiled	[CE]  ';'  expected	106	None	replace
568	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  buffer);  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  buffer);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  buffer);	  wrapPaxHeader(currEntry.getName(),    longNameData,    zipEncoding);    	non-compiled	[CE]  ';'  expected	106	None	replace
569	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getName(),  headerBuf);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getName(),  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getName(),  headerBuf);	  wrapPaxHeaders(currEntry.getName());    	non-compiled	[CE]  ';'  expected	7	None	replace
570	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(headerBuf,  headerSize);  [CE]  ';'  expected  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(headerBuf,  headerSize);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(headerBuf,  headerSize);	  ((    TarArchiveEntry)currEntry).setPaxHeader(headerBuf);    	non-compiled	[CE]  ';'  expected	86	None	replace
571	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  false,  currEntry.getName());  [CE]  ';'  expected  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  false,  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  false,  currEntry.getName());	  wrapPaxHeaders(currEntry.getPaxHeader(),    false);    	non-compiled	[CE]  ';'  expected	11	None	replace
572	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getKey());  [CE]  ';'  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getKey());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getKey());	  parsePaxHeader(currEntry.getString());    	non-compiled	[CE]  ';'  expected	69	None	replace
573	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getString(),  longNameData);  [CE]  ';'  expected  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getString(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getString(),  longNameData);	  parsePaxHeader(currEntry.getString());    	non-compiled	[CE]  ';'  expected	69	None	replace
574	[BUG]  [BUGGY]  RehashPaxHeader  currEntry  =  getPaxHeader();  [CE]  ';'  expected  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeader  currEntry  =  getPaxHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeader  currEntry  =  getPaxHeader();	  if(!hasHitEOF)    {    rehashPaxHeader(currEntry.getPaxHeader());    }    	non-compiled	[CE]  ';'  expected	114	None	replace
575	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  getNextPaxHeaders(currEntry.getPax());  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =  getNextPaxHeaders(currEntry.getPax());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  getNextPaxHeaders(currEntry.getPax());	  RehashPaxHeaders    currEntry    =    getNextPaxHeaders();    	non-compiled	[CE]  ';'  expected	113	None	replace
576	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  getNextPaxHeaders(currEntry);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =  getNextPaxHeaders(currEntry);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  getNextPaxHeaders(currEntry);	  RehashPaxHeaders    currEntry    =    getNextPaxHeaders();    	non-compiled	[CE]  ';'  expected	113	None	replace
577	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  getNextPaxHeaders(currEntry.getSize());  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =  getNextPaxHeaders(currEntry.getSize());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  getNextPaxHeaders(currEntry.getSize());	  RehashPaxHeaders    currEntry    =    getNextPaxHeaders();    	non-compiled	[CE]  ';'  expected	113	None	replace
578	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  headers.getName());  [CE]  ';'  expected  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  headers.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  headers.getName());	  rehashPaxHeader(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  ';'  expected	115	None	replace
579	[BUG]  [BUGGY]  rehashPax();  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPax();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPax();	  rehashPaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
580	[BUG]  [BUGGY]  RehashPaxHeader  currEntry  =  headers.rehashPaxHeader();  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeader  currEntry  =  headers.rehashPaxHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeader  currEntry  =  headers.rehashPaxHeader();	  if(currEntry.getPaxHeader()!=    null)    {    rehashPaxHeader(currEntry.getPaxHeader());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
581	[BUG]  [BUGGY]  RehashPaxHeader  currEntry  =  headers.getRehashPaxHeader();  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeader  currEntry  =  headers.getRehashPaxHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeader  currEntry  =  headers.getRehashPaxHeader();	  if(currEntry.getPaxHeader()!=    null)    {    rehashPaxHeader(currEntry.getPaxHeader());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
582	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(headers));  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(headers));  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(headers));	  ((    TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
583	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(zipEncoding.encode(longNameData));  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(zipEncoding.encode(longNameData));  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setHeader(zipEncoding.encode(longNameData));	  ((    TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
584	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(headerBuf,  longNameData));  [CE]  illegal  start  of  expression  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(headerBuf,  longNameData));  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(headerBuf,  longNameData));	  ((    TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
585	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(headerBuf));  [CE]  illegal  start  of  expression  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(headerBuf));  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(headerBuf));	  ((    TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
586	[BUG]  [BUGGY]  byte[]  headerBuf  =  currEntry.getHeaderBytes( "UTF-8 ");  [CE]  illegal  start  of  expression  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  headerBuf  =  currEntry.getHeaderBytes( "UTF-8 ");  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  headerBuf  =  currEntry.getHeaderBytes( "UTF-8 ");	  byte[]    headerBuf    =    currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
587	[BUG]  [BUGGY]  byte[]  headerBuf  =  currEntry.getHeaderSegment();  [CE]  illegal  start  of  expression  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  headerBuf  =  currEntry.getHeaderSegment();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  headerBuf  =  currEntry.getHeaderSegment();	  byte[]    headerBuf    =    currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
588	[BUG]  [BUGGY]  byte[]  headerBuf  =  currEntry.getHeaderBuffer();  [CE]  illegal  start  of  expression  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  headerBuf  =  currEntry.getHeaderBuffer();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  headerBuf  =  currEntry.getHeaderBuffer();	  byte[]    headerBuf    =    currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
589	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getMethod(),  headers);  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry.getMethod(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getMethod(),  headers);	  traversePaxHeaders(currEntry.getMethod());    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
590	[BUG]  [BUGGY]  n  =  currEntry.getName();  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  n  =  currEntry.getName();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	n  =  currEntry.getName();	  n    =    currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
591	[BUG]  [BUGGY]  n  =  currEntry.getHeader();  [CE]  illegal  start  of  expression  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  n  =  currEntry.getHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	n  =  currEntry.getHeader();	  n    =    currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
592	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getName(),  headers);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeaders(currEntry.getName(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getName(),  headers);	  scanPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
593	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getCharset());  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getCharset());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getCharset());	  wrapPaxHeaders(currEntry.getPaxHeader(),    currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
594	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getUpperBound());  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getUpperBound());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getUpperBound());	  wrapPaxHeaders(currEntry.getPaxHeader(),    currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
595	[BUG]  [BUGGY]  scanHeaders(currEntry.getName());  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeaders(currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeaders(currEntry.getName());	  scanHeaders(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
596	[BUG]  [BUGGY]  RectangleEdge.this.rehashPaxHeaders();  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RectangleEdge.this.rehashPaxHeaders();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RectangleEdge.this.rehashPaxHeaders();	  if(!hasHitEOF)    {    rehashPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
597	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  this.headers);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  this.headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  this.headers);	  rehashPaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
598	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  shortNameData);  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  shortNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  shortNameData);	  rehashPaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
599	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  fullNameData);  [CE]  ';'  expected  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  fullNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  fullNameData);	  rehashPaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  ';'  expected	94	None	replace
600	[BUG]  [BUGGY]  scanHeader(currEntry.getPaxHeader(),  null);  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeader(currEntry.getPaxHeader(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeader(currEntry.getPaxHeader(),  null);	  scanHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
601	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry.getPaxHeader()!=  null)  {  return  currEntry.getPaxHeader();  }  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  if(!hasHitEOF  &&  currEntry.getPaxHeader()!=  null)  {  return  currEntry.getPaxHeader();  }  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	if(!hasHitEOF  &&  currEntry.getPaxHeader()!=  null)  {  return  currEntry.getPaxHeader();  }	  if(!hasHitEOF)    {    return    currEntry.getPaxHeader();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
602	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry.getPaxHeader()  ==  null)  {  return  currEntry.getPaxHeader();  }  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  if(!hasHitEOF  &&  currEntry.getPaxHeader()  ==  null)  {  return  currEntry.getPaxHeader();  }  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	if(!hasHitEOF  &&  currEntry.getPaxHeader()  ==  null)  {  return  currEntry.getPaxHeader();  }	  if(!hasHitEOF)    {    return    currEntry.getPaxHeader();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
603	[BUG]  [BUGGY]  pending  ||  currEntry.getPaxHeader()!=  null)  {  return  currEntry.getPaxHeader();  }  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  pending  ||  currEntry.getPaxHeader()!=  null)  {  return  currEntry.getPaxHeader();  }  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	pending  ||  currEntry.getPaxHeader()!=  null)  {  return  currEntry.getPaxHeader();  }	  if(!hasHitEOF)    {    return    currEntry.getPaxHeader();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
604	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getMethod(),  this);  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getMethod(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getMethod(),  this);	  rehashPaxHeader(currEntry.getMethod());    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
605	[BUG]  [BUGGY]  WrapPaxHeader  currEntry  =  wrapPaxHeader(currEntry.getPaxHeader(),  headers);  [CE]  illegal  start  of  expression  [FE]            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  WrapPaxHeader  currEntry  =  wrapPaxHeader(currEntry.getPaxHeader(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	WrapPaxHeader  currEntry  =  wrapPaxHeader(currEntry.getPaxHeader(),  headers);	  wrapPaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
606	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getTarHeader(),  this);  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getTarHeader(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getTarHeader(),  this);	  parsePaxHeader(currEntry.getTarHeader());    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
607	[BUG]  [BUGGY]  scanHeaders(currEntry.getName(),  headers);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeaders(currEntry.getName(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeaders(currEntry.getName(),  headers);	  scanHeaders(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
608	[BUG]  [BUGGY]  WrapPaxHeader  currEntry  =  wrapPaxHeader(currEntry.getName(),  headers);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  WrapPaxHeader  currEntry  =  wrapPaxHeader(currEntry.getName(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	WrapPaxHeader  currEntry  =  wrapPaxHeader(currEntry.getName(),  headers);	  wrapPaxHeader(currEntry.getName(),    headers);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
609	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.encode(longNameData));  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.encode(longNameData));  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.encode(longNameData));	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
610	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getName()  +  1);  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getName()  +  1);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getName()  +  1);	  Pax    headers    =    getPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
611	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  isEOF);  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  isEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  isEOF);	  wrapPaxHeader(currEntry.getName(),    longNameData,    isHitEOF);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
612	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  this.headerBuf);  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  this.headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  this.headerBuf);	  wrapPaxHeader(currEntry.getName(),    longNameData,    isHitEOF);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
613	[BUG]  [BUGGY]  parsePaxHeaders(currEntry.getName(),  headerBuf);  [CE]  not  a  statement  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeaders(currEntry.getName(),  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeaders(currEntry.getName(),  headerBuf);	  parsePaxHeaders(currEntry.getName());    	non-compiled	[CE]  not  a  statement	27	None	replace
614	[BUG]  [BUGGY]  parsePaxHeaders(currEntry.getName(),  headerData);  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeaders(currEntry.getName(),  headerData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeaders(currEntry.getName(),  headerData);	  parsePaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
615	[BUG]  [BUGGY]  RehashPaxHeader  currEntry  =  currEntry.getNextPaxHeader();  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeader  currEntry  =  currEntry.getNextPaxHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeader  currEntry  =  currEntry.getNextPaxHeader();	  RehashPaxHeader    currEntry    =    currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
616	[BUG]  [BUGGY]  RehashPaxHeader  currEntry  =  new  RehashPaxHeader(currEntry.getName());  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeader  currEntry  =  new  RehashPaxHeader(currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeader  currEntry  =  new  RehashPaxHeader(currEntry.getName());	  RehashPaxHeader    currEntry    =    currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
617	[BUG]  [BUGGY]  RehashPaxHeader  currEntry  =  new  RehashPaxHeader(currEntry.getPaxHeader());  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeader  currEntry  =  new  RehashPaxHeader(currEntry.getPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeader  currEntry  =  new  RehashPaxHeader(currEntry.getPaxHeader());	  RehashPaxHeader    currEntry    =    currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
618	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getPax(),  currEntry.getName());  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeaders(currEntry.getPax(),  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getPax(),  currEntry.getName());	  scanPaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
619	[BUG]  [BUGGY]  rehashPaxHeaders(currEntry.getName(),  headerBuf);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeaders(currEntry.getName(),  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeaders(currEntry.getName(),  headerBuf);	  rehashPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
620	[BUG]  [BUGGY]  scanHeaders(currEntry.getPaxHeaderSize(),  headers);  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeaders(currEntry.getPaxHeaderSize(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeaders(currEntry.getPaxHeaderSize(),  headers);	  scanHeaders(currEntry.getPaxHeaderSize());    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
621	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getMethod());  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getMethod());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getMethod());	  wrapPaxHeader(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
622	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getAbsolutePath());  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getAbsolutePath());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getAbsolutePath());	  parsePaxHeader(currEntry.getURL());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
623	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getURL(),  headers);  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getURL(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getURL(),  headers);	  parsePaxHeader(currEntry.getURL());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
624	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getURL(),  headerBuf);  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getURL(),  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getURL(),  headerBuf);	  parsePaxHeader(currEntry.getURL());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
625	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getNextPaxHeader();  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getNextPaxHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getNextPaxHeader();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
626	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getNextPax();  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getNextPax();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getNextPax();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
627	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  currEntry.getPaxHeader();  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =  currEntry.getPaxHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  currEntry.getPaxHeader();	  if(currEntry.getPaxHeader()!=    null)    {    rehashPaxHeader(currEntry.getPaxHeader());    }    else    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
628	[BUG]  [BUGGY]  WrapPaxHeaders  currEntry  =  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getName());  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  WrapPaxHeaders  currEntry  =  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	WrapPaxHeaders  currEntry  =  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getName());	  wrapPaxHeaders(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
629	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getName(),  hasHitEOF);  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getName(),  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getName(),  hasHitEOF);	  wrapPaxHeaders(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  ';'  expected	108	None	replace
630	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getName(),  headers);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getName(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getName(),  headers);	  wrapPaxHeaders(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
631	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getName(),  headers);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry.getName(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getName(),  headers);	  traversePaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
632	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getSimpleName(),  false);  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getSimpleName(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getSimpleName(),  false);	  wrapPaxHeader(currEntry.getName(),    false);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
633	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getPaxHeader(),  currEntry.getName());  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getPaxHeader(),  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getPaxHeader(),  currEntry.getName());	  scanPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
634	[BUG]  [BUGGY]  byte[]  headerBuf  =  currEntry.getPaxHeaders(headers);  [CE]  illegal  start  of  expression  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  headerBuf  =  currEntry.getPaxHeaders(headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  headerBuf  =  currEntry.getPaxHeaders(headers);	  byte[]    headerBuf    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
635	[BUG]  [BUGGY]  byte[]  headerBuf  =  currEntry.getPaxHeaders(headerData);  [CE]  illegal  start  of  expression  [FE]                                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  headerBuf  =  currEntry.getPaxHeaders(headerData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  headerBuf  =  currEntry.getPaxHeaders(headerData);	  byte[]    headerBuf    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
636	[BUG]  [BUGGY]  byte[]  headerBuf  =  currEntry.getPaxHeaders(-1);  [CE]  illegal  start  of  expression  [FE]                                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  headerBuf  =  currEntry.getPaxHeaders(-1);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  headerBuf  =  currEntry.getPaxHeaders(-1);	  byte[]    headerBuf    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
637	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getName(),  headerBuf);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getName(),  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getName(),  headerBuf);	  parsePaxHeader(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
638	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf,  this.available);  [CE]  illegal  start  of  expression  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf,  this.available);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf,  this.available);	  ((    TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
639	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(this.headerData);  [CE]  illegal  start  of  expression  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(this.headerData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setHeader(this.headerData);	  ((    TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
640	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this,  headerBuf);  [CE]  unclosed  string  literal  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this,  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this,  headerBuf);	  wrapPaxHeader(currEntry.getName(),    this);    	non-compiled	[CE]  unclosed  string  literal	21	None	replace
641	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this,  skipped);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this,  skipped);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this,  skipped);	  wrapPaxHeader(currEntry.getName(),    this);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
642	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  true);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPaxHeader(),  true);	  wrapPaxHeader(currEntry.getPaxHeader(),    true);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
643	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getNameHeader(),  true);  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getNameHeader(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getNameHeader(),  true);	  wrapPaxHeader(currEntry.getPaxHeader(),    true);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
644	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getString(),  true);  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getString(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getString(),  true);	  wrapPaxHeader(currEntry.getPaxHeader(),    true);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
645	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getScope());  [CE]  illegal  start  of  expression  [FE]            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getScope());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getScope());	  Pax    headers    =    getPaxHeaders(currEntry.getBase());    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
646	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getBase(),  headers);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getBase(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getBase(),  headers);	  Pax    headers    =    getPaxHeaders(currEntry.getBase());    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
647	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getPaxHeader(),  currEntry.getName());  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getPaxHeader(),  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getPaxHeader(),  currEntry.getName());	  validatePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
648	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getSource();  [CE]  not  a  statement  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getSource();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getSource();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    	non-compiled	[CE]  not  a  statement	67	None	replace
649	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getParent());  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getParent());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getParent());	  rehashPaxHeader(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
650	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeaderSize());  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeaderSize());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeaderSize());	  wrapPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
651	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getMethod());  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getMethod());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getMethod());	  wrapPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
652	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getString());  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getString());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getString());	  wrapPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
653	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  getPaxHeaders();  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =  getPaxHeaders();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  getPaxHeaders();	  if(currEntry.isPaxHeader())    {    rehashPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
654	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  headers();  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =  headers();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  headers();	  if(currEntry.isPaxHeader())    {    rehashPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
655	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  headers.remove(currEntry.getName());  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =  headers.remove(currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  headers.remove(currEntry.getName());	  if(currEntry.isPaxHeader())    {    rehashPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
656	[BUG]  [BUGGY]  traversePaxHeaders(currEntry,  headers);  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry,  headers);	  traversePaxHeaders(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
657	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf,  false);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf,  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this.headerBuf,  false);	  wrapPaxHeader(currEntry.getName(),    longNameData,    false);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
658	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getPax(),  currEntry.getName());  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getPax(),  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getPax(),  currEntry.getName());	  Pax    headers    =    getPaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
659	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData,  headers);  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData,  headers);	  wrapPaxHeaders(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
660	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getPath());  [CE]  illegal  start  of  expression  [FE]            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getPath());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getPath());	  validatePaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
661	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  longNameData,  isHitEOF);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  longNameData,  isHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPaxHeader(),  longNameData,  isHitEOF);	  parsePaxHeader(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
662	[BUG]  [BUGGY]  RehashPaxHeader  currEntry.getPaxHeader();  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeader  currEntry.getPaxHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeader  currEntry.getPaxHeader();	  rehashPaxHeader(currEntry.getPaxHeader()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
663	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getURL(),  headers);  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getURL(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getURL(),  headers);	  rehashPaxHeader(currEntry.getURL());    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
664	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getURL(),  true);  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getURL(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getURL(),  true);	  rehashPaxHeader(currEntry.getURL());    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
665	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(this,  headers);  [CE]  ';'  expected  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(this,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(this,  headers);	  ((    TarArchiveEntry)currEntry).setPaxHeader(this);    	non-compiled	[CE]  ';'  expected	104	None	replace
666	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(this);  [CE]  ';'  expected  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setHeader(this);	  ((    TarArchiveEntry)currEntry).setPaxHeader(this);    	non-compiled	[CE]  ';'  expected	104	None	replace
667	[BUG]  [BUGGY]  rehashPaxHeaders(currEntry,  headers);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeaders(currEntry,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeaders(currEntry,  headers);	  rehashPaxHeaders(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
668	[BUG]  [BUGGY]  parsePaxHeader(currEntry,  encoding);  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry,  encoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry,  encoding);	  parsePaxHeader(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
669	[BUG]  [BUGGY]  parsePaxHeader(currEntry,  headerBuf);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry,  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry,  headerBuf);	  parsePaxHeader(currEntry);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
670	[BUG]  [BUGGY]  WrapPaxHeaders  currEntry  =  wrapPaxHeaders(currEntry.getPaxHeader(),  headers);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  WrapPaxHeaders  currEntry  =  wrapPaxHeaders(currEntry.getPaxHeader(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	WrapPaxHeaders  currEntry  =  wrapPaxHeaders(currEntry.getPaxHeader(),  headers);	  wrapPaxHeaders(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  ';'  expected	93	None	replace
671	[BUG]  [BUGGY]  scanPaxHeader(currEntry,  headers);  [CE]  ';'  expected  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry,  headers);	  scanPaxHeader(currEntry);    	non-compiled	[CE]  ';'  expected	6	None	replace
672	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getScope());  [CE]  ';'  expected  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getScope());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getScope());	  scanPaxHeader(currEntry);    	non-compiled	[CE]  ';'  expected	6	None	replace
673	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  longNameData,  this);  [CE]  ';'  expected  [FE]            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  longNameData,  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  longNameData,  this);	  wrapPaxHeader(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  ';'  expected	28	None	replace
674	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getPax(),  currEntry.getName());  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getPax(),  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getPax(),  currEntry.getName());	  validatePaxHeader(currEntry.getPax());    	non-compiled	[CE]  ';'  expected	75	None	replace
675	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getPax(),  currEntry.getName());  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getPax(),  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getPax(),  currEntry.getName());	  scanPaxHeader(currEntry.getPax());    	non-compiled	[CE]  ';'  expected	1	None	replace
676	[BUG]  [BUGGY]  validatePaxHeaders(currEntry.getName(),  headers);  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeaders(currEntry.getName(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeaders(currEntry.getName(),  headers);	  validatePaxHeaders(currEntry.getName());    	non-compiled	[CE]  ';'  expected	77	None	replace
677	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getTarHeader(),  headers);  [CE]  ';'  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getTarHeader(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getTarHeader(),  headers);	  wrapPaxHeaders(currEntry.getTarHeader());    	non-compiled	[CE]  ';'  expected	110	None	replace
678	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getNextPaxHeader());  [CE]  ';'  expected  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getNextPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getNextPaxHeader());	  wrapPaxHeaders(currEntry.getTarHeader());    	non-compiled	[CE]  ';'  expected	110	None	replace
679	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getHeaderSize());  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getHeaderSize());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getHeaderSize());	  Pax    headers    =    getPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  ';'  expected	42	None	replace
680	[BUG]  [BUGGY]  writePaxHeader(currEntry.getPaxHeader(),  headers);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  writePaxHeader(currEntry.getPaxHeader(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	writePaxHeader(currEntry.getPaxHeader(),  headers);	  writePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  ';'  expected	16	None	replace
681	[BUG]  [BUGGY]  writePaxHeader(currEntry.getPaxHeader()  +  1);  [CE]  ';'  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  writePaxHeader(currEntry.getPaxHeader()  +  1);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	writePaxHeader(currEntry.getPaxHeader()  +  1);	  writePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  ';'  expected	16	None	replace
682	[BUG]  [BUGGY]  writePaxHeader(currEntry.getPaxHeader(),  currEntry.getName());  [CE]  ';'  expected  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  writePaxHeader(currEntry.getPaxHeader(),  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	writePaxHeader(currEntry.getPaxHeader(),  currEntry.getName());	  writePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  ';'  expected	16	None	replace
683	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getString(),  true);  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getString(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getString(),  true);	  rehashPaxHeader(currEntry.getPaxHeader(),    true);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
684	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getSegmentHeader(),  true);  [CE]  ';'  expected  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getSegmentHeader(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getSegmentHeader(),  true);	  rehashPaxHeader(currEntry.getPaxHeader(),    true);    	non-compiled	[CE]  ';'  expected	55	None	replace
685	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding);  [CE]  ';'  expected  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding);	  ((    TarArchiveEntry)currEntry).setPaxHeader(null);    	non-compiled	[CE]  ';'  expected	65	None	replace
686	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(null,  headers);  [CE]  ';'  expected  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(null,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(null,  headers);	  ((    TarArchiveEntry)currEntry).setPaxHeader(null);    	non-compiled	[CE]  ';'  expected	65	None	replace
687	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(mapEncoding);  [CE]  ';'  expected  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(mapEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(mapEncoding);	  ((    TarArchiveEntry)currEntry).setPaxHeader(null);    	non-compiled	[CE]  ';'  expected	65	None	replace
688	[BUG]  [BUGGY]  Pax  currEntry  =  getPaxHeaders(header);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  currEntry  =  getPaxHeaders(header);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  currEntry  =  getPaxHeaders(header);	  Pax    headers    =    getPaxHeaders(currEntry);    	non-compiled	[CE]  ';'  expected	41	None	replace
689	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  0);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  0);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  0);	  wrapPaxHeader(currEntry.getName(),    longNameData,    hasHitEOF);    	non-compiled	[CE]  ';'  expected	44	None	replace
690	[BUG]  [BUGGY]  if(currEntry.getName()  ==  null)  {  return  currEntry.getPaxHeader();  }  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  if(currEntry.getName()  ==  null)  {  return  currEntry.getPaxHeader();  }  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	if(currEntry.getName()  ==  null)  {  return  currEntry.getPaxHeader();  }	  if(currEntry.getPaxHeader()    ==    null)    {    return    currEntry.getPaxHeader();    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
691	[BUG]  [BUGGY]  if(currEntry.getPaxHeader()!=  null)  {  currEntry.setPaxHeader(null);  }  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  if(currEntry.getPaxHeader()!=  null)  {  currEntry.setPaxHeader(null);  }  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	if(currEntry.getPaxHeader()!=  null)  {  currEntry.setPaxHeader(null);  }	  if(currEntry.getPaxHeader()    ==    null)    {    return    currEntry.getPaxHeader();    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
692	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  headers,  headerBuf);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  headers,  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  headers,  headerBuf);	  wrapPaxHeader(currEntry.getName(),    longNameData,    headerBuf);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
693	[BUG]  [BUGGY]  scanHeader(currEntry.getPaxHeader(),  headers,  isHitEOF);  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeader(currEntry.getPaxHeader(),  headers,  isHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeader(currEntry.getPaxHeader(),  headers,  isHitEOF);	  scanHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  ';'  expected	124	None	replace
694	[BUG]  [BUGGY]  scanHeader(currEntry.getName(),  headers);  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeader(currEntry.getName(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeader(currEntry.getName(),  headers);	  scanHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  ';'  expected	124	None	replace
695	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(currEntry.getPax());  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(currEntry.getPax());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(currEntry.getPax());	  RehashPaxHeaders    currEntry    =    new    RehashPaxHeaders();    	non-compiled	[CE]  ';'  expected	112	None	replace
696	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(currEntry.getName());  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(currEntry.getName());	  RehashPaxHeaders    currEntry    =    new    RehashPaxHeaders();    	non-compiled	[CE]  ';'  expected	112	None	replace
697	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(0);  [CE]  ';'  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(0);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(0);	  RehashPaxHeaders    currEntry    =    new    RehashPaxHeaders();    	non-compiled	[CE]  ';'  expected	112	None	replace
698	[BUG]  [BUGGY]  Pax  headers  =  currEntry.getPaxHeaders(null);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  currEntry.getPaxHeaders(null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  currEntry.getPaxHeaders(null);	  Pax    headers    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
699	[BUG]  [BUGGY]  Pax  headers  =  currEntry.getTarHeaders();  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  currEntry.getTarHeaders();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  currEntry.getTarHeaders();	  Pax    headers    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
700	[BUG]  [BUGGY]  Pax  headers  =  currEntry.getPaxHeaders(true);  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  currEntry.getPaxHeaders(true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  currEntry.getPaxHeaders(true);	  Pax    headers    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
701	[BUG]  [BUGGY]  Pax  headers  =  currEntry.getPaxHeaders(false);  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  currEntry.getPaxHeaders(false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  currEntry.getPaxHeaders(false);	  Pax    headers    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
702	[BUG]  [BUGGY]  byte[]  longLinkData  =  currEntry.getLongNameData();  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  longLinkData  =  currEntry.getLongNameData();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  longLinkData  =  currEntry.getLongNameData();	  byte[]    longLinkData    =    currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
703	[BUG]  [BUGGY]  byte[]  longLinkData  =  currEntry.getLongHeader();  [CE]  not  a  statement  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  longLinkData  =  currEntry.getLongHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  longLinkData  =  currEntry.getLongHeader();	  byte[]    longLinkData    =    currEntry.getPaxHeader();    	non-compiled	[CE]  not  a  statement	63	None	replace
704	[BUG]  [BUGGY]  byte[]  longLinkData  =  currEntry.getPaxHeader()  +  1;  [CE]  not  a  statement  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  longLinkData  =  currEntry.getPaxHeader()  +  1;  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  longLinkData  =  currEntry.getPaxHeader()  +  1;	  byte[]    longLinkData    =    currEntry.getPaxHeader();    	non-compiled	[CE]  not  a  statement	63	None	replace
705	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headers));  return  currEntry;  [CE]  illegal  start  of  expression  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headers));  return  currEntry;  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headers));  return  currEntry;	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));    return    currEntry;    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
706	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setName(zipEncoding.decode(longNameData));  return  currEntry;  [CE]  illegal  start  of  expression  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setName(zipEncoding.decode(longNameData));  return  currEntry;  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setName(zipEncoding.decode(longNameData));  return  currEntry;	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));    return    currEntry;    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
707	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  null,  hasHitEOF);  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  null,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  null,  hasHitEOF);	  wrapPaxHeader(currEntry.getName(),    null);    	non-compiled	[CE]  not  a  statement	19	None	replace
708	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerPrefix);  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerPrefix);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  headerPrefix);	  wrapPaxHeader(currEntry.getName(),    headerBuf);    	non-compiled	[CE]  not  a  statement	45	None	replace
709	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  longNameData,  isHitEOF);  [CE]  not  a  statement  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  longNameData,  isHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  longNameData,  isHitEOF);	  rehashPaxHeader(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  not  a  statement	53	None	replace
710	[BUG]  [BUGGY]  byte[]  longLinkData  =  currEntry.getPaxHeaders(-1);  [CE]  not  a  statement  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  longLinkData  =  currEntry.getPaxHeaders(-1);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  longLinkData  =  currEntry.getPaxHeaders(-1);	  byte[]    longLinkData    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  not  a  statement	64	None	replace
711	[BUG]  [BUGGY]  byte[]  longLinkData  =  currEntry.getLongHeaders();  [CE]  not  a  statement  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  longLinkData  =  currEntry.getLongHeaders();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  longLinkData  =  currEntry.getLongHeaders();	  byte[]    longLinkData    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  not  a  statement	64	None	replace
712	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPax(),  currEntry.getName());  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPax(),  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPax(),  currEntry.getName());	  rehashPaxHeader(currEntry.getPax());    	non-compiled	[CE]  not  a  statement	80	None	replace
713	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  shortNameData,  true);  [CE]  not  a  statement  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  shortNameData,  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  shortNameData,  true);	  wrapPaxHeader(currEntry.getName(),    longNameData,    true);    	non-compiled	[CE]  not  a  statement	48	None	replace
714	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getMethod());  [CE]  not  a  statement  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeaders(currEntry.getMethod());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getMethod());	  scanPaxHeaders(currEntry.getPax());    	non-compiled	[CE]  not  a  statement	5	None	replace
715	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getSize());  [CE]  not  a  statement  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeaders(currEntry.getSize());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getSize());	  scanPaxHeaders(currEntry.getPax());    	non-compiled	[CE]  not  a  statement	5	None	replace
716	[BUG]  [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  headers,  isHitEOF);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  headers,  isHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeaders(currEntry.getPaxHeader(),  headers,  isHitEOF);	  scanHeaders(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  not  a  statement	98	None	replace
717	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getName(),  this);  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getName(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getName(),  this);	  wrapPaxHeaders(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  not  a  statement	108	None	replace
718	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getName(),  headerBuf);  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getName(),  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getName(),  headerBuf);	  wrapPaxHeaders(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  not  a  statement	108	None	replace
719	[BUG]  [BUGGY]  byte[]  headerBuf  =  currEntry.getHeaderBounds();  [CE]  not  a  statement  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  headerBuf  =  currEntry.getHeaderBounds();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  headerBuf  =  currEntry.getHeaderBounds();	  byte[]    headerBuf    =    currEntry.getPaxHeader();    	non-compiled	[CE]  not  a  statement	66	None	replace
720	[BUG]  [BUGGY]  byte[]  headerBuf  =  currEntry.getHeaderByName( "headers ");  [CE]  not  a  statement  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  headerBuf  =  currEntry.getHeaderByName( "headers ");  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  headerBuf  =  currEntry.getHeaderByName( "headers ");	  byte[]    headerBuf    =    currEntry.getPaxHeader();    	non-compiled	[CE]  not  a  statement	66	None	replace
721	[BUG]  [BUGGY]  Pax  headers  =  currEntry.getReasonHeaders();  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  currEntry.getReasonHeaders();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  currEntry.getReasonHeaders();	  Pax    headers    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  not  a  statement	39	None	replace
722	[BUG]  [BUGGY]  Pax  headers  =  currEntry.getPaxHeaders(currEntry.getName());  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  currEntry.getPaxHeaders(currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  currEntry.getPaxHeaders(currEntry.getName());	  Pax    headers    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  not  a  statement	39	None	replace
723	[BUG]  [BUGGY]  Pax  headers  =  currEntry.getHeaderSize();  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  currEntry.getHeaderSize();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  currEntry.getHeaderSize();	  Pax    headers    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  not  a  statement	39	None	replace
724	[BUG]  [BUGGY]  rehashPaxHeader(currEntry,  headerBuf);  [CE]  not  a  statement  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry,  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry,  headerBuf);	  rehashPaxHeader(currEntry);    	non-compiled	[CE]  not  a  statement	37	None	replace
725	[BUG]  [BUGGY]  rehashPaxHeader(entry);  [CE]  <identifier>  expected  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(entry);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(entry);	  rehashPaxHeader(currEntry);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
726	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE,  this);  [CE]  <identifier>  expected  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE,  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE,  this);	  wrapPaxHeader(currEntry.getName(),    Long.MAX_VALUE);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
727	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE,  4);  [CE]  <identifier>  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE,  4);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE,  4);	  wrapPaxHeader(currEntry.getName(),    Long.MAX_VALUE);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
728	[BUG]  [BUGGY]  scanHeaders(currEntry.getTarHeader());  [CE]  <identifier>  expected  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeaders(currEntry.getTarHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeaders(currEntry.getTarHeader());	  scanHeaders(currEntry.getPaxHeader());    	non-compiled	[CE]  <identifier>  expected	14	None	replace
729	[BUG]  [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  currEntry.getName());  [CE]  unclosed  string  literal  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeaders(currEntry.getPaxHeader(),  currEntry.getName());	  scanHeaders(currEntry.getPaxHeader());    	non-compiled	[CE]  unclosed  string  literal	14	None	replace
730	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getTarHeader(),  hasHitEOF);  [CE]  unclosed  string  literal  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getTarHeader(),  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getTarHeader(),  hasHitEOF);	  parsePaxHeader(currEntry.getTarHeader());    	non-compiled	[CE]  unclosed  string  literal	120	None	replace
731	[BUG]  [BUGGY]  parseTarHeader(currEntry.getTarHeader());  [CE]  <identifier>  expected  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parseTarHeader(currEntry.getTarHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parseTarHeader(currEntry.getTarHeader());	  parsePaxHeader(currEntry.getTarHeader());    	non-compiled	[CE]  <identifier>  expected	120	None	replace
732	[BUG]  [BUGGY]  RectangleEdge  isEOF  =  hasHitEOF?  rehashPaxHeaders()  :  null;  [CE]  <identifier>  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RectangleEdge  isEOF  =  hasHitEOF?  rehashPaxHeaders()  :  null;  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RectangleEdge  isEOF  =  hasHitEOF?  rehashPaxHeaders()  :  null;	  if(!hasHitEOF)    {    rehashPaxHeaders();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
733	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  headers.rehashPaxHeaders();  [CE]  <identifier>  expected  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =  headers.rehashPaxHeaders();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  headers.rehashPaxHeaders();	  if(!hasHitEOF)    {    rehashPaxHeaders();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
734	[BUG]  [BUGGY]  MutablePaxHeader.rehashPaxHeader(currEntry.getPaxHeader());  [CE]  <identifier>  expected  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  MutablePaxHeader.rehashPaxHeader(currEntry.getPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	MutablePaxHeader.rehashPaxHeader(currEntry.getPaxHeader());	  if(currEntry.getPaxHeader()!=    null)    {    rehashPaxHeader(currEntry.getPaxHeader());    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
735	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry,  zipEncoding.getPaxHeader(),  false);  [CE]  <identifier>  expected  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry,  zipEncoding.getPaxHeader(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry,  zipEncoding.getPaxHeader(),  false);	  wrapPaxHeaders(currEntry.getPaxHeader(),    false);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
736	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getSize(),  false);  [CE]  <identifier>  expected  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getSize(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getSize(),  false);	  wrapPaxHeaders(currEntry.getPaxHeader(),    false);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
737	[BUG]  [BUGGY]  byte[]  longLinkData  =  currEntry.getHeaderData();  [CE]  <identifier>  expected  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  longLinkData  =  currEntry.getHeaderData();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  longLinkData  =  currEntry.getHeaderData();	  byte[]    longLinkData    =    currEntry.getPaxHeader();    	non-compiled	[CE]  <identifier>  expected	63	None	replace
738	[BUG]  [BUGGY]  byte[]  longLinkData  =  headers.getPaxHeader();  [CE]  <identifier>  expected  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  longLinkData  =  headers.getPaxHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  longLinkData  =  headers.getPaxHeader();	  byte[]    longLinkData    =    currEntry.getPaxHeader();    	non-compiled	[CE]  <identifier>  expected	63	None	replace
739	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  headers,  zipEncoding);  [CE]  <identifier>  expected  [FE]            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  headers,  zipEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  headers,  zipEncoding);	  wrapPaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
740	[BUG]  [BUGGY]  n  =  currEntry.getHeaderSize();  [CE]  <identifier>  expected  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  n  =  currEntry.getHeaderSize();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	n  =  currEntry.getHeaderSize();	  n    =    currEntry.getPaxHeader();    	non-compiled	[CE]  <identifier>  expected	87	None	replace
741	[BUG]  [BUGGY]  n  =  currEntry.getPaxHeaderSize();  [CE]  illegal  start  of  expression  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  n  =  currEntry.getPaxHeaderSize();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	n  =  currEntry.getPaxHeaderSize();	  n    =    currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
742	[BUG]  [BUGGY]  n  =  currEntry.getSize();  [CE]  illegal  start  of  expression  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  n  =  currEntry.getSize();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	n  =  currEntry.getSize();	  n    =    currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
743	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getTarHeader(),  currEntry.getName());  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getTarHeader(),  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getTarHeader(),  currEntry.getName());	  wrapPaxHeaders(currEntry.getTarHeader());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
744	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  this);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPaxHeader(),  this);	  parsePaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
745	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  headers,  isHitEOF);  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  headers,  isHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPaxHeader(),  headers,  isHitEOF);	  parsePaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
746	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(null);  [CE]  not  a  statement  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setHeader(null);	  ((    TarArchiveEntry)currEntry).setPaxHeader(null);    	non-compiled	[CE]  not  a  statement	65	None	replace
747	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getBaseDesc());  [CE]  not  a  statement  [FE]            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getBaseDesc());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getBaseDesc());	  Pax    headers    =    getPaxHeaders(currEntry.getBase());    	non-compiled	[CE]  not  a  statement	123	None	replace
748	[BUG]  [BUGGY]  try  {  rehashPaxHeader(currEntry.getPaxHeader(),  true);  [CE]  not  a  statement  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  try  {  rehashPaxHeader(currEntry.getPaxHeader(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	try  {  rehashPaxHeader(currEntry.getPaxHeader(),  true);	  rehashPaxHeader(currEntry.getPaxHeader(),    true);    	non-compiled	[CE]  not  a  statement	55	None	replace
749	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getMethod(),  null);  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry.getMethod(),  null);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getMethod(),  null);	  traversePaxHeaders(currEntry.getMethod());    	non-compiled	[CE]  not  a  statement	107	None	replace
750	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getHeaderSize());  [CE]  not  a  statement  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getHeaderSize());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getHeaderSize());	  wrapPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  not  a  statement	12	None	replace
751	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getSize(),  currEntry.getName());  [CE]  not  a  statement  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getSize(),  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getSize(),  currEntry.getName());	  wrapPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  not  a  statement	12	None	replace
752	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getSize(),  headers);  [CE]  not  a  statement  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getSize(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getSize(),  headers);	  wrapPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  not  a  statement	12	None	replace
753	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(this.headerBuf,  this.zipEncoding);  [CE]  not  a  statement  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(this.headerBuf,  this.zipEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setHeader(this.headerBuf,  this.zipEncoding);	  ((    TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf);    	non-compiled	[CE]  not  a  statement	88	None	replace
754	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(this.headerBuf,  this.string);  [CE]  not  a  statement  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(this.headerBuf,  this.string);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setHeader(this.headerBuf,  this.string);	  ((    TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf);    	non-compiled	[CE]  not  a  statement	88	None	replace
755	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(this.headerBuf,  this.stringData);  [CE]  not  a  statement  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(this.headerBuf,  this.stringData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setHeader(this.headerBuf,  this.stringData);	  ((    TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf);    	non-compiled	[CE]  not  a  statement	88	None	replace
756	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(headerBuf,  headers);  [CE]  not  a  statement  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(headerBuf,  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setHeader(headerBuf,  headers);	  ((    TarArchiveEntry)currEntry).setPaxHeader(headerBuf);    	non-compiled	[CE]  not  a  statement	86	None	replace
757	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(headerBuf,  headerData.length);  [CE]  not  a  statement  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(headerBuf,  headerData.length);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(headerBuf,  headerData.length);	  ((    TarArchiveEntry)currEntry).setPaxHeader(headerBuf);    	non-compiled	[CE]  not  a  statement	86	None	replace
758	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf,  this.zipEncoding);  [CE]  <identifier>  expected  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf,  this.zipEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this.headerBuf,  this.zipEncoding);	  wrapPaxHeader(currEntry.getName(),    this.headerBuf);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
759	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf,  this.type);  [CE]  <identifier>  expected  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf,  this.type);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this.headerBuf,  this.type);	  wrapPaxHeader(currEntry.getName(),    this.headerBuf);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
760	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  longNameData,  this);  [CE]  <identifier>  expected  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  longNameData,  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  longNameData,  this);	  rehashPaxHeader(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
761	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getPaxHeader(),  currEntry.getSize());  [CE]  <identifier>  expected  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getPaxHeader(),  currEntry.getSize());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getPaxHeader(),  currEntry.getSize());	  validatePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  <identifier>  expected	30	None	replace
762	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getPaxHeader(),  this);  [CE]  <identifier>  expected  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getPaxHeader(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getPaxHeader(),  this);	  validatePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  <identifier>  expected	30	None	replace
763	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getName(),  this);  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getName(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getName(),  this);	  scanPaxHeader(currEntry.getName());    	non-compiled	[CE]  not  a  statement	2	None	replace
764	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(currEntry.getSize());  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(currEntry.getSize());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders(currEntry.getSize());	  RehashPaxHeaders    currEntry    =    new    RehashPaxHeaders();    	non-compiled	[CE]  not  a  statement	112	None	replace
765	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getPaxHeader(),  currEntry.getName());  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeaders(currEntry.getPaxHeader(),  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getPaxHeader(),  currEntry.getName());	  scanPaxHeaders(currEntry.getPaxHeader());    	non-compiled	[CE]  not  a  statement	121	None	replace
766	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getTarHeader());  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeaders(currEntry.getTarHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getTarHeader());	  scanPaxHeaders(currEntry.getPaxHeader());    	non-compiled	[CE]  not  a  statement	121	None	replace
767	[BUG]  [BUGGY]  RehashPaxHeader  currEntry  =  headers.rehashPaxHeader(currEntry.getPaxHeader());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeader  currEntry  =  headers.rehashPaxHeader(currEntry.getPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeader  currEntry  =  headers.rehashPaxHeader(currEntry.getPaxHeader());	  if(currEntry.getPaxHeader()!=    null)    {    rehashPaxHeader(currEntry.getPaxHeader());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
768	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getMethod());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getMethod());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getMethod());	  wrapPaxHeaders(currEntry.getPaxHeader(),    currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
769	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  encoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  encoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  encoding);	  wrapPaxHeader(currEntry.getName(),    longNameData,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
770	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  lineEncoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  lineEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  lineEncoding);	  wrapPaxHeader(currEntry.getName(),    longNameData,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
771	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getTarHeader(),  currEntry.getName());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getTarHeader(),  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getTarHeader(),  currEntry.getName());	  rehashPaxHeader(currEntry.getTarHeader());    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
772	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getTarHeader()  +  1);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getTarHeader()  +  1);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getTarHeader()  +  1);	  rehashPaxHeader(currEntry.getTarHeader());    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
773	[BUG]  [BUGGY]  Pax  headers  =  getHeaders(currEntry.getPaxHeaderSize());  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getHeaders(currEntry.getPaxHeaderSize());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getHeaders(currEntry.getPaxHeaderSize());	  Pax    headers    =    getHeaders();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
774	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getPax(),  currEntry.getSize());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getPax(),  currEntry.getSize());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getPax(),  currEntry.getSize());	  validatePaxHeader(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
775	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getPax(),  this);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getPax(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getPax(),  this);	  validatePaxHeader(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
776	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getPax(),  currEntry.getMethod());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getPax(),  currEntry.getMethod());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getPax(),  currEntry.getMethod());	  validatePaxHeader(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
777	[BUG]  [BUGGY]  RehashPaxHeader  currEntry  =  zipEncoding.getPaxHeader();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeader  currEntry  =  zipEncoding.getPaxHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeader  currEntry  =  zipEncoding.getPaxHeader();	  RehashPaxHeader    currEntry    =    currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
778	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData),  encoding);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData),  encoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData),  encoding);	  ((    TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
779	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longPaxHeader));  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longPaxHeader));  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longPaxHeader));	  ((    TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
780	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  longNameData,  zipEncoding);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  longNameData,  zipEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  longNameData,  zipEncoding);	  wrapPaxHeader(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
781	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPax(),  longNameData,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPax(),  longNameData,  zipEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPax(),  longNameData,  zipEncoding);	  parsePaxHeader(currEntry.getPax(),    longNameData);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
782	[BUG]  [BUGGY]  validatePaxHeaders(currEntry.getName(),  this);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeaders(currEntry.getName(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeaders(currEntry.getName(),  this);	  validatePaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
783	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  null,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  null,  zipEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  null,  zipEncoding);	  wrapPaxHeader(currEntry.getName(),    null);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
784	[BUG]  [BUGGY]  rehashPaxHeaders(currEntry.getURL());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeaders(currEntry.getURL());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeaders(currEntry.getURL());	  rehashPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
785	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this,  headerEncoding);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this,  headerEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this,  headerEncoding);	  wrapPaxHeader(currEntry.getName(),    this);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
786	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getName(),  cacheEncoding);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getName(),  cacheEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getName(),  cacheEncoding);	  parsePaxHeader(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
787	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getName(),  currEntry.getName());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getName(),  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getName(),  currEntry.getName());	  validatePaxHeader(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
788	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getName(),  headerBuf);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeader(currEntry.getName(),  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getName(),  headerBuf);	  validatePaxHeader(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
789	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getPax(),  currEntry.getSize());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getPax(),  currEntry.getSize());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getPax(),  currEntry.getSize());	  scanPaxHeader(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
790	[BUG]  [BUGGY]  parsePaxHeaders(currEntry.getMethod(),  headers);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeaders(currEntry.getMethod(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeaders(currEntry.getMethod(),  headers);	  parsePaxHeaders(currEntry);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
791	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getHeader());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getHeader());	  Pax    headers    =    getPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
792	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getHeaderLimit());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getHeaderLimit());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getHeaderLimit());	  Pax    headers    =    getPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
793	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getSize(),  currEntry.getName());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getSize(),  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getSize(),  currEntry.getName());	  Pax    headers    =    getPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
794	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getHandler());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getHandler());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getHandler());	  Pax    headers    =    getPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
795	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  this);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  this);	  rehashPaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
796	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  headers,  cacheEncoding);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  headers,  cacheEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  headers,  cacheEncoding);	  rehashPaxHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
797	[BUG]  [BUGGY]  MutablePaxHeaders.rehashPaxHeader(currEntry.getPaxHeader());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  MutablePaxHeaders.rehashPaxHeader(currEntry.getPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	MutablePaxHeaders.rehashPaxHeader(currEntry.getPaxHeader());	  if(!hasHitEOF)    {    rehashPaxHeader(currEntry.getPaxHeader());    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
798	[BUG]  [BUGGY]  MutablePaxHeader  currEntry  =  getPaxHeader(currEntry.getPaxHeader());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  MutablePaxHeader  currEntry  =  getPaxHeader(currEntry.getPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	MutablePaxHeader  currEntry  =  getPaxHeader(currEntry.getPaxHeader());	  if(!hasHitEOF)    {    rehashPaxHeader(currEntry.getPaxHeader());    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
799	[BUG]  [BUGGY]  scanHeader(currEntry.getTarHeader());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeader(currEntry.getTarHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeader(currEntry.getTarHeader());	  scanHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
800	[BUG]  [BUGGY]  scanHeader(currEntry.getPaxHeader(),  currEntry.getName());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeader(currEntry.getPaxHeader(),  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeader(currEntry.getPaxHeader(),  currEntry.getName());	  scanHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
801	[BUG]  [BUGGY]  scanHeader(currEntry.getMethod());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeader(currEntry.getMethod());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeader(currEntry.getMethod());	  scanHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
802	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  this.hashCode);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  this.hashCode);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  this.hashCode);	  wrapPaxHeader(currEntry.getName(),    longNameData,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
803	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  this.hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  this.hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  this.hasHitEOF);	  wrapPaxHeader(currEntry.getName(),    longNameData,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
804	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  this.hashEOF);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  this.hashEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  this.hashEOF);	  wrapPaxHeader(currEntry.getName(),    longNameData,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
805	[BUG]  [BUGGY]  validatePaxHeaders(currEntry.getPax(),  this);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeaders(currEntry.getPax(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeaders(currEntry.getPax(),  this);	  validatePaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
806	[BUG]  [BUGGY]  validatePaxHeaders(currEntry.getPax(),  currEntry.getSize());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeaders(currEntry.getPax(),  currEntry.getSize());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeaders(currEntry.getPax(),  currEntry.getSize());	  validatePaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
807	[BUG]  [BUGGY]  while(currEntry.getPaxHeader()!=  null)  {  currEntry.getPaxHeader();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  while(currEntry.getPaxHeader()!=  null)  {  currEntry.getPaxHeader();  }  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	while(currEntry.getPaxHeader()!=  null)  {  currEntry.getPaxHeader();  }	  if(currEntry.getPaxHeader()    ==    null)    {    return    currEntry.getPaxHeader();    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
808	[BUG]  [BUGGY]  traversePaxHeader(currEntry.getPax(),  currEntry.getName());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeader(currEntry.getPax(),  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader(currEntry.getPax(),  currEntry.getName());	  traversePaxHeader(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
809	[BUG]  [BUGGY]  traversePaxHeader(currEntry.getPax(),  this);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeader(currEntry.getPax(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader(currEntry.getPax(),  this);	  traversePaxHeader(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
810	[BUG]  [BUGGY]  if(!hasHitEOF)  {  rehashPaxHeaders(currEntry);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  if(!hasHitEOF)  {  rehashPaxHeaders(currEntry);  }  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	if(!hasHitEOF)  {  rehashPaxHeaders(currEntry);  }	  rehashPaxHeaders(currEntry);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
811	[BUG]  [BUGGY]  traversePaxHeader(currEntry.getName(),  headerBuf);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeader(currEntry.getName(),  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader(currEntry.getName(),  headerBuf);	  traversePaxHeader(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
812	[BUG]  [BUGGY]  rechashPaxHeader(currEntry.getPaxHeader());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rechashPaxHeader(currEntry.getPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rechashPaxHeader(currEntry.getPaxHeader());	  if(currEntry.getPaxHeader()!=    null)    {    rehashPaxHeader(currEntry.getPaxHeader());    }    else    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
813	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getURL(),  currEntry.getName());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getURL(),  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getURL(),  currEntry.getName());	  rehashPaxHeader(currEntry.getURL());    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
814	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getURL(),  this);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getURL(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getURL(),  this);	  rehashPaxHeader(currEntry.getURL());    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
815	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  null,  currEntry.getName());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  null,  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  null,  currEntry.getName());	  wrapPaxHeaders(currEntry.getPaxHeader(),    null);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
816	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  new  String[]  {  }  );  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  new  String[]  {  }  );  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  new  String[]  {  }  );	  wrapPaxHeaders(currEntry.getPaxHeader(),    null);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
817	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getName(),  headerBuf);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry.getName(),  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getName(),  headerBuf);	  traversePaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
818	[BUG]  [BUGGY]  scanHeader(currEntry.getPaxHeader(),  this);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanHeader(currEntry.getPaxHeader(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeader(currEntry.getPaxHeader(),  this);	  scanHeader(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
819	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.longNameData,  false);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.longNameData,  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this.longNameData,  false);	  wrapPaxHeader(currEntry.getName(),    longNameData,    false);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
820	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerData,  false);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerData,  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this.headerData,  false);	  wrapPaxHeader(currEntry.getName(),    longNameData,    false);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
821	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData,  zipEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData,  zipEncoding);	  wrapPaxHeaders(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
822	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getName();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getName();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getName();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
823	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getSize();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getSize();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getSize();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getPaxHeader();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
824	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));  return  this;  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));  return  this;  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));  return  this;	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));    return    currEntry;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
825	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));  return  headers;  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));  return  headers;  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));  return  headers;	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));    return    currEntry;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
826	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getURL(),  this);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getURL(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getURL(),  this);	  parsePaxHeader(currEntry.getURL());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
827	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader),  encoding);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader),  encoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader),  encoding);	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader));    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
828	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(paxHeader));  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(paxHeader));  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(paxHeader));	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader));    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
829	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader  +  1));  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader  +  1));  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader  +  1));	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader));    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
830	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  currEntry.getName(),  this);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  currEntry.getName(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  currEntry.getName(),  this);	  wrapPaxHeader(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
831	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  currEntry.getSize());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  currEntry.getSize());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  currEntry.getSize());	  wrapPaxHeader(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
832	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  currEntry.getName(),  longNameData);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  currEntry.getName(),  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  currEntry.getName(),  longNameData);	  wrapPaxHeader(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
833	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getHeaderSize();  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getHeaderSize();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getHeaderSize();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
834	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerBuf,  cacheEncoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerBuf,  cacheEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  headerBuf,  cacheEncoding);	  wrapPaxHeader(currEntry.getName(),    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
835	[BUG]  [BUGGY]  byte[]  longLinkData  =  headers.getPaxHeaders();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  longLinkData  =  headers.getPaxHeaders();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  longLinkData  =  headers.getPaxHeaders();	  byte[]    longLinkData    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
836	[BUG]  [BUGGY]  validatePaxHeaders(currEntry.getPaxHeader(),  headers);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  validatePaxHeaders(currEntry.getPaxHeader(),  headers);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeaders(currEntry.getPaxHeader(),  headers);	  validatePaxHeaders(currEntry);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
837	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getName(),  headerBuf);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getName(),  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getName(),  headerBuf);	  rehashPaxHeader(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
838	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerSize,  headerBuf);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerSize,  headerBuf);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  headerSize,  headerBuf);	  wrapPaxHeader(currEntry.getName(),    longNameData,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
839	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerbuf,  longNameData);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerbuf,  longNameData);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  headerbuf,  longNameData);	  wrapPaxHeader(currEntry.getName(),    longNameData,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
840	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getName(),  currEntry.getName());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getName(),  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getName(),  currEntry.getName());	  wrapPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
841	[BUG]  [BUGGY]  wrapPaxHeader(currEntry,  zipEncoding.getName(),  false);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry,  zipEncoding.getName(),  false);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry,  zipEncoding.getName(),  false);	  wrapPaxHeader(currEntry.getName(),    false);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
842	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  false,  currEntry.getMethod());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  false,  currEntry.getMethod());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  false,  currEntry.getMethod());	  wrapPaxHeader(currEntry.getName(),    false);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
843	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getTarHeader());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  scanPaxHeader(currEntry.getTarHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getTarHeader());	  scanPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
844	[BUG]  [BUGGY]  traversePaxHeader(currEntry,  this);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeader(currEntry,  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader(currEntry,  this);	  traversePaxHeader(currEntry);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
845	[BUG]  [BUGGY]  traversePaxHeader(currEntry,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeader(currEntry,  zipEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader(currEntry,  zipEncoding);	  traversePaxHeader(currEntry);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
846	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData),  encoding);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData),  encoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData),  encoding);	  ((    TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
847	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry.isPaxHeader())  {  return  currEntry.getPaxHeader();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  if(!hasHitEOF  &&  currEntry.isPaxHeader())  {  return  currEntry.getPaxHeader();  }  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	if(!hasHitEOF  &&  currEntry.isPaxHeader())  {  return  currEntry.getPaxHeader();  }	  if(!hasHitEOF)    {    return    currEntry.getPaxHeader();    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
848	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry.getPaxHeader()  >  0)  {  return  currEntry.getPaxHeader();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  if(!hasHitEOF  &&  currEntry.getPaxHeader()  >  0)  {  return  currEntry.getPaxHeader();  }  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	if(!hasHitEOF  &&  currEntry.getPaxHeader()  >  0)  {  return  currEntry.getPaxHeader();  }	  if(!hasHitEOF)    {    return    currEntry.getPaxHeader();    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
849	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry.getPaxHeader()  >=  null)  {  return  currEntry.getPaxHeader();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  if(!hasHitEOF  &&  currEntry.getPaxHeader()  >=  null)  {  return  currEntry.getPaxHeader();  }  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	if(!hasHitEOF  &&  currEntry.getPaxHeader()  >=  null)  {  return  currEntry.getPaxHeader();  }	  if(!hasHitEOF)    {    return    currEntry.getPaxHeader();    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
850	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getPax(),  currEntry.getName());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry.getPax(),  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getPax(),  currEntry.getName());	  traversePaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
851	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getSize());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry.getSize());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getSize());	  traversePaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
852	[BUG]  [BUGGY]  byte[]  headerBuf  =  currEntry.getHeadersByTag();  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  byte[]  headerBuf  =  currEntry.getHeadersByTag();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  headerBuf  =  currEntry.getHeadersByTag();	  byte[]    headerBuf    =    currEntry.getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
853	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getName(),  cacheEncoding);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getName(),  cacheEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getName(),  cacheEncoding);	  Pax    headers    =    getPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
854	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  Long.MAX_VALUE,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  Long.MAX_VALUE,  hasHitEOF);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  Long.MAX_VALUE,  hasHitEOF);	  wrapPaxHeaders(currEntry.getPaxHeader(),    Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
855	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  Short.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  Short.MAX_VALUE);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  Short.MAX_VALUE);	  wrapPaxHeaders(currEntry.getPaxHeader(),    Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
856	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  true,  zipEncoding);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  true,  zipEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  true,  zipEncoding);	  wrapPaxHeader(currEntry.getName(),    true);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
857	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  longNameData,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  longNameData,  zipEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPaxHeader(),  longNameData,  zipEncoding);	  parsePaxHeader(currEntry.getPaxHeader(),    longNameData);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
858	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getSourceName(),  this);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  parsePaxHeader(currEntry.getSourceName(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getSourceName(),  this);	  parsePaxHeader(currEntry.getSourceName());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
859	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerData,  true);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerData,  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this.headerData,  true);	  wrapPaxHeader(currEntry.getName(),    longNameData,    true);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
860	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  headers,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  headers,  zipEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  headers,  zipEncoding);	  wrapPaxHeaders(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
861	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  headers,  currEntry.getName());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  headers,  currEntry.getName());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  headers,  currEntry.getName());	  wrapPaxHeaders(currEntry.getPaxHeader(),    headers);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
862	[BUG]  [BUGGY]  try  {  rehashPaxHeader(currEntry.getPaxHeader());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  try  {  rehashPaxHeader(currEntry.getPaxHeader());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	try  {  rehashPaxHeader(currEntry.getPaxHeader());	  rehashPaxHeader(currEntry.getPaxHeader()    +    1);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
863	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPax(),  currEntry.getSize());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPax(),  currEntry.getSize());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPax(),  currEntry.getSize());	  rehashPaxHeader(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
864	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  currEntry.getName(),  this);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  currEntry.getName(),  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  currEntry.getName(),  this);	  rehashPaxHeader(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
865	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  currEntry.getSize());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  currEntry.getSize());  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  currEntry.getSize());	  rehashPaxHeader(currEntry.getPaxHeader(),    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
866	[BUG]  [BUGGY]  traversePaxHeaders(currEntry,  this);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  traversePaxHeaders(currEntry,  this);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry,  this);	  traversePaxHeaders(currEntry);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
867	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  headers.rehashPaxHeader();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  RehashPaxHeaders  currEntry  =  headers.rehashPaxHeader();  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  headers.rehashPaxHeader();	  if(currEntry.isPaxHeader())    {    rehashPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
868	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  headers,  zipEncoding);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  headers,  zipEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  headers,  zipEncoding);	  wrapPaxHeader(currEntry.getName(),    headers);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
869	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  headers,  cacheEncoding);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getName(),  headers,  cacheEncoding);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  headers,  cacheEncoding);	  wrapPaxHeader(currEntry.getName(),    headers);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
870	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getTarHeader(),  true);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  wrapPaxHeader(currEntry.getTarHeader(),  true);  [BUGGY]      }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getTarHeader(),  true);	  wrapPaxHeader(currEntry.getPaxHeader(),    true);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
