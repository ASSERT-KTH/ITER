bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getPax());  [CE]  illegal  start  of  expression  [FE]            NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  scanPaxHeader(currEntry.getPax());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getPax());	  scanPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
2	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getName());  [CE]  illegal  start  of  expression  [FE]              NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  scanPaxHeader(currEntry.getName());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getName());	  scanPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
3	[BUG]  [BUGGY]  scanPaxHeader();  [CE]  illegal  start  of  expression  [FE]                NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  scanPaxHeader();  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader();	  scanPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
4	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getName());  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  scanPaxHeaders(currEntry.getName());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getName());	  scanPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
5	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getPax());  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  scanPaxHeaders(currEntry.getPax());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getPax());	  scanPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
6	[BUG]  [BUGGY]  scanPaxHeader(currEntry);  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  scanPaxHeader(currEntry);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry);	  scanPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
7	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getName());  [CE]  not  a  statement  [FE]              NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeaders(currEntry.getName());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getName());	  wrapPaxHeaders(currEntry.getPaxHeader());    	non-compiled	[CE]  not  a  statement	4	None	replace
8	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData);  [CE]  not  a  statement  [FE]                NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  longNameData);	  wrapPaxHeaders(currEntry.getPaxHeader());    	non-compiled	[CE]  not  a  statement	4	None	replace
9	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  true);  [CE]  not  a  statement  [FE]                  NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  true);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  true);	  wrapPaxHeaders(currEntry.getPaxHeader());    	non-compiled	[CE]  not  a  statement	4	None	replace
10	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  Long.MAX_VALUE);  [CE]  not  a  statement  [FE]                    NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  Long.MAX_VALUE);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  Long.MAX_VALUE);	  wrapPaxHeaders(currEntry.getPaxHeader());    	non-compiled	[CE]  not  a  statement	4	None	replace
11	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  false);  [CE]  not  a  statement  [FE]                      NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  false);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  false);	  wrapPaxHeaders(currEntry.getPaxHeader());    	non-compiled	[CE]  not  a  statement	4	None	replace
12	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getSize());  [CE]  not  a  statement  [FE]                        NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeaders(currEntry.getSize());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getSize());	  wrapPaxHeaders(currEntry.getPaxHeader());    	non-compiled	[CE]  not  a  statement	4	None	replace
13	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  null);  [CE]  not  a  statement  [FE]                          NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  null);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  null);	  wrapPaxHeaders(currEntry.getPaxHeader());    	non-compiled	[CE]  not  a  statement	4	None	replace
14	[BUG]  [BUGGY]  scanHeaders(currEntry.getPaxHeader());  [CE]  not  a  statement  [FE]          NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  scanHeaders(currEntry.getPaxHeader());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeaders(currEntry.getPaxHeader());	  scanHeaders();    	non-compiled	[CE]  not  a  statement	10	None	replace
15	[BUG]  [BUGGY]  scanHeader(currEntry.getPaxHeader());  [CE]  not  a  statement  [FE]            NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  scanHeader(currEntry.getPaxHeader());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeader(currEntry.getPaxHeader());	  scanHeaders();    	non-compiled	[CE]  not  a  statement	10	None	replace
16	[BUG]  [BUGGY]  writePaxHeader(currEntry.getPaxHeader());  [CE]  not  a  statement  [FE]              NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  writePaxHeader(currEntry.getPaxHeader());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	writePaxHeader(currEntry.getPaxHeader());	  scanHeaders();    	non-compiled	[CE]  not  a  statement	10	None	replace
17	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  true);  [CE]  not  a  statement  [FE]          NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeader(currEntry.getName(),  true);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  true);	  wrapPaxHeader(currEntry.getName());    	non-compiled	[CE]  not  a  statement	12	None	replace
18	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE);  [CE]  not  a  statement  [FE]            NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  Long.MAX_VALUE);	  wrapPaxHeader(currEntry.getName());    	non-compiled	[CE]  not  a  statement	12	None	replace
19	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  null);  [CE]  not  a  statement  [FE]              NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeader(currEntry.getName(),  null);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  null);	  wrapPaxHeader(currEntry.getName());    	non-compiled	[CE]  not  a  statement	12	None	replace
20	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  false);  [CE]  not  a  statement  [FE]                NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeader(currEntry.getName(),  false);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  false);	  wrapPaxHeader(currEntry.getName());    	non-compiled	[CE]  not  a  statement	12	None	replace
21	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this);  [CE]  not  a  statement  [FE]                  NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeader(currEntry.getName(),  this);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this);	  wrapPaxHeader(currEntry.getName());    	non-compiled	[CE]  not  a  statement	12	None	replace
22	[BUG]  [BUGGY]  parsePaxHeader(currEntry);  [CE]  not  a  statement  [FE]                NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  parsePaxHeader(currEntry);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry);	  parsePaxHeaders();    	non-compiled	[CE]  not  a  statement	5	None	replace
23	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getName());  [CE]  not  a  statement  [FE]                  NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  parsePaxHeader(currEntry.getName());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getName());	  parsePaxHeaders();    	non-compiled	[CE]  not  a  statement	5	None	replace
24	[BUG]  [BUGGY]  parsePaxHeader();  [CE]  not  a  statement  [FE]                    NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  parsePaxHeader();  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader();	  parsePaxHeaders();    	non-compiled	[CE]  not  a  statement	5	None	replace
25	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPax());  [CE]  not  a  statement  [FE]                      NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  parsePaxHeader(currEntry.getPax());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPax());	  parsePaxHeaders();    	non-compiled	[CE]  not  a  statement	5	None	replace
26	[BUG]  [BUGGY]  parsePaxHeaders(currEntry);  [CE]  not  a  statement  [FE]                        NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  parsePaxHeaders(currEntry);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeaders(currEntry);	  parsePaxHeaders();    	non-compiled	[CE]  not  a  statement	5	None	replace
27	[BUG]  [BUGGY]  parsePaxHeaders(currEntry.getName());  [CE]  not  a  statement  [FE]                          NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  parsePaxHeaders(currEntry.getName());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeaders(currEntry.getName());	  parsePaxHeaders();    	non-compiled	[CE]  not  a  statement	5	None	replace
28	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  longNameData);  [CE]  not  a  statement  [FE]        NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  longNameData);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  longNameData);	  wrapPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  not  a  statement	11	None	replace
29	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  true);  [CE]  illegal  start  of  expression  [FE]          NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  true);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  true);	  wrapPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
30	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getPaxHeader());  [CE]  illegal  start  of  expression  [FE]            NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  validatePaxHeader(currEntry.getPaxHeader());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getPaxHeader());	  wrapPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
31	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getSize());  [CE]  illegal  start  of  expression  [FE]              NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeader(currEntry.getSize());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getSize());	  wrapPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
32	[BUG]  [BUGGY]  rehashPaxHeader();  [CE]  illegal  start  of  expression  [FE]          NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  rehashPaxHeader();  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader();	  rehashPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
33	[BUG]  [BUGGY]  if(currEntry.isPaxHeader())  {  rehashPaxHeaders();  }  [CE]  illegal  start  of  expression  [FE]            NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  if(currEntry.isPaxHeader())  {  rehashPaxHeaders();  }  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	if(currEntry.isPaxHeader())  {  rehashPaxHeaders();  }	  rehashPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
34	[BUG]  [BUGGY]  if(!hasHitEOF)  {  rehashPaxHeaders();  }  [CE]  illegal  start  of  expression  [FE]              NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  if(!hasHitEOF)  {  rehashPaxHeaders();  }  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	if(!hasHitEOF)  {  rehashPaxHeaders();  }	  rehashPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
35	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getName());  [CE]  not  a  statement  [FE]                NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  rehashPaxHeader(currEntry.getName());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getName());	  rehashPaxHeaders();    	non-compiled	[CE]  not  a  statement	2	None	replace
36	[BUG]  [BUGGY]  rehashPaxHeaders(currEntry.getName());  [CE]  not  a  statement  [FE]                  NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  rehashPaxHeaders(currEntry.getName());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeaders(currEntry.getName());	  rehashPaxHeaders();    	non-compiled	[CE]  not  a  statement	2	None	replace
37	[BUG]  [BUGGY]  rehashPaxHeader(currEntry);  [CE]  not  a  statement  [FE]                    NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  rehashPaxHeader(currEntry);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry);	  rehashPaxHeaders();    	non-compiled	[CE]  not  a  statement	2	None	replace
38	[BUG]  [BUGGY]  Pax  headers  =  getHeaders();  [CE]  not  a  statement  [FE]        NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  Pax  headers  =  getHeaders();  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getHeaders();	  Pax    headers    =    getPaxHeaders();    	non-compiled	[CE]  not  a  statement	9	None	replace
39	[BUG]  [BUGGY]  Pax  headers  =  currEntry.getPaxHeaders();  [CE]  not  a  statement  [FE]          NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  Pax  headers  =  currEntry.getPaxHeaders();  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  currEntry.getPaxHeaders();	  Pax    headers    =    getPaxHeaders();    	non-compiled	[CE]  not  a  statement	9	None	replace
40	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getName());  [CE]  not  a  statement  [FE]            NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getName());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getName());	  Pax    headers    =    getPaxHeaders();    	non-compiled	[CE]  not  a  statement	9	None	replace
41	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry);  [CE]  not  a  statement  [FE]              NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry);	  Pax    headers    =    getPaxHeaders();    	non-compiled	[CE]  not  a  statement	9	None	replace
42	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getSize());  [CE]  not  a  statement  [FE]                NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getSize());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getSize());	  Pax    headers    =    getPaxHeaders();    	non-compiled	[CE]  not  a  statement	9	None	replace
43	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getPax());  [CE]  not  a  statement  [FE]                  NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getPax());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getPax());	  Pax    headers    =    getPaxHeaders();    	non-compiled	[CE]  not  a  statement	9	None	replace
44	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  hasHitEOF);  [CE]  not  a  statement  [FE]              NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  hasHitEOF);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  hasHitEOF);	  wrapPaxHeader(currEntry.getName(),    longNameData);    	non-compiled	[CE]  not  a  statement	14	None	replace
45	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerBuf);  [CE]  not  a  statement  [FE]                NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeader(currEntry.getName(),  headerBuf);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  headerBuf);	  wrapPaxHeader(currEntry.getName(),    longNameData);    	non-compiled	[CE]  not  a  statement	14	None	replace
46	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  headerBuf);  [CE]  not  a  statement  [FE]                  NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  headerBuf);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  headerBuf);	  wrapPaxHeader(currEntry.getName(),    longNameData);    	non-compiled	[CE]  not  a  statement	14	None	replace
47	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  false);  [CE]  not  a  statement  [FE]                    NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  false);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  false);	  wrapPaxHeader(currEntry.getName(),    longNameData);    	non-compiled	[CE]  not  a  statement	14	None	replace
48	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  true);  [CE]  not  a  statement  [FE]                      NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  true);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  true);	  wrapPaxHeader(currEntry.getName(),    longNameData);    	non-compiled	[CE]  not  a  statement	14	None	replace
49	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf);  [CE]  not  a  statement  [FE]                        NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeader(currEntry.getName(),  this.headerBuf);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  this.headerBuf);	  wrapPaxHeader(currEntry.getName(),    longNameData);    	non-compiled	[CE]  not  a  statement	14	None	replace
50	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  this);  [CE]  not  a  statement  [FE]                          NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  this);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  this);	  wrapPaxHeader(currEntry.getName(),    longNameData);    	non-compiled	[CE]  not  a  statement	14	None	replace
51	[BUG]  [BUGGY]  if(currEntry.getPaxHeader()!=  null)  {  rehashPaxHeader(currEntry.getPaxHeader());  }  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  if(currEntry.getPaxHeader()!=  null)  {  rehashPaxHeader(currEntry.getPaxHeader());  }  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	if(currEntry.getPaxHeader()!=  null)  {  rehashPaxHeader(currEntry.getPaxHeader());  }	  rehashPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
52	[BUG]  [BUGGY]  if(currEntry.getPaxHeader()!=  null)  {  rehashPaxHeader(currEntry.getPaxHeader());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  if(currEntry.getPaxHeader()!=  null)  {  rehashPaxHeader(currEntry.getPaxHeader());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	if(currEntry.getPaxHeader()!=  null)  {  rehashPaxHeader(currEntry.getPaxHeader());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  rehashPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
53	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  longNameData);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  longNameData);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  longNameData);	  rehashPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
54	[BUG]  [BUGGY]  if(currEntry.getPaxHeader()!=  null)  {  rehashPaxHeader(currEntry.getPaxHeader());  }  else  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  if(currEntry.getPaxHeader()!=  null)  {  rehashPaxHeader(currEntry.getPaxHeader());  }  else  {  return  null;  }  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	if(currEntry.getPaxHeader()!=  null)  {  rehashPaxHeader(currEntry.getPaxHeader());  }  else  {  return  null;  }	  rehashPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
55	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  true);  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  true);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  true);	  rehashPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
56	[BUG]  [BUGGY]  traversePaxHeader();  [CE]  illegal  start  of  expression  [FE]            NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  traversePaxHeader();  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader();	  traversePaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
57	[BUG]  [BUGGY]  traversePaxHeader(currEntry);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  traversePaxHeader(currEntry);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader(currEntry);	  traversePaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
58	[BUG]  [BUGGY]  traversePaxHeaders(currEntry);  [CE]  illegal  start  of  expression  [FE]                NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  traversePaxHeaders(currEntry);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry);	  traversePaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
59	[BUG]  [BUGGY]  traversePaxHeader(currEntry.getName());  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  traversePaxHeader(currEntry.getName());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader(currEntry.getName());	  traversePaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
60	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getName());  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  traversePaxHeaders(currEntry.getName());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getName());	  traversePaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
61	[BUG]  [BUGGY]  traversePaxHeader(currEntry.getPax());  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  traversePaxHeader(currEntry.getPax());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeader(currEntry.getPax());	  traversePaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
62	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getPaxHeader();  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getPaxHeader();  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getPaxHeader();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
63	[BUG]  [BUGGY]  byte[]  longLinkData  =  currEntry.getPaxHeader();  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  byte[]  longLinkData  =  currEntry.getPaxHeader();  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  longLinkData  =  currEntry.getPaxHeader();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
64	[BUG]  [BUGGY]  byte[]  longLinkData  =  currEntry.getPaxHeaders();  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  byte[]  longLinkData  =  currEntry.getPaxHeaders();  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  longLinkData  =  currEntry.getPaxHeaders();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
65	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(null);  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(null);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(null);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
66	[BUG]  [BUGGY]  byte[]  headerBuf  =  currEntry.getPaxHeader();  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  byte[]  headerBuf  =  currEntry.getPaxHeader();  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  headerBuf  =  currEntry.getPaxHeader();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
67	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
68	[BUG]  [BUGGY]  byte[]  headerBuf  =  currEntry.getPaxHeaders();  [CE]  illegal  start  of  expression  [FE]                                  NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  byte[]  headerBuf  =  currEntry.getPaxHeaders();  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	byte[]  headerBuf  =  currEntry.getPaxHeaders();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
69	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getString());  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  parsePaxHeader(currEntry.getString());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getString());	  parsePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
70	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getURL());  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  parsePaxHeader(currEntry.getURL());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getURL());	  parsePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
71	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getSize());  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  parsePaxHeader(currEntry.getSize());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getSize());	  parsePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
72	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPax(),  longNameData);  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  parsePaxHeader(currEntry.getPax(),  longNameData);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPax(),  longNameData);	  parsePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
73	[BUG]  [BUGGY]  validatePaxHeader();  [CE]  illegal  start  of  expression  [FE]        NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  validatePaxHeader();  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader();	  validatePaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
74	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getName());  [CE]  illegal  start  of  expression  [FE]          NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  validatePaxHeader(currEntry.getName());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getName());	  validatePaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
75	[BUG]  [BUGGY]  validatePaxHeader(currEntry.getPax());  [CE]  illegal  start  of  expression  [FE]            NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  validatePaxHeader(currEntry.getPax());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry.getPax());	  validatePaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
76	[BUG]  [BUGGY]  validatePaxHeader(currEntry);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  validatePaxHeader(currEntry);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeader(currEntry);	  validatePaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
77	[BUG]  [BUGGY]  validatePaxHeaders(currEntry.getName());  [CE]  illegal  start  of  expression  [FE]                NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  validatePaxHeaders(currEntry.getName());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeaders(currEntry.getName());	  validatePaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
78	[BUG]  [BUGGY]  validatePaxHeaders(currEntry.getPax());  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  validatePaxHeaders(currEntry.getPax());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeaders(currEntry.getPax());	  validatePaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
79	[BUG]  [BUGGY]  rehashPaxHeaders(currEntry);  [CE]  illegal  start  of  expression  [FE]          NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  rehashPaxHeaders(currEntry);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeaders(currEntry);	  rehashPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
80	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPax());  [CE]  illegal  start  of  expression  [FE]            NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  rehashPaxHeader(currEntry.getPax());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPax());	  rehashPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
81	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  headers);  [CE]  illegal  start  of  expression  [FE]        NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  headers);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  headers);	  wrapPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
82	[BUG]  [BUGGY]  scanPaxHeader(currEntry.getPaxHeader());  [CE]  illegal  start  of  expression  [FE]          NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  scanPaxHeader(currEntry.getPaxHeader());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeader(currEntry.getPaxHeader());	  wrapPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
83	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  headers);  [CE]  illegal  start  of  expression  [FE]          NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeader(currEntry.getName(),  headers);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  headers);	  wrapPaxHeader(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
84	[BUG]  [BUGGY]  if(currEntry.getPaxHeader()!=  null)  {  return  currEntry.getPaxHeader();  }  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  if(currEntry.getPaxHeader()!=  null)  {  return  currEntry.getPaxHeader();  }  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	if(currEntry.getPaxHeader()!=  null)  {  return  currEntry.getPaxHeader();  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
85	[BUG]  [BUGGY]  if(currEntry.getPaxHeader()  ==  null)  {  return  currEntry.getPaxHeader();  }  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  if(currEntry.getPaxHeader()  ==  null)  {  return  currEntry.getPaxHeader();  }  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	if(currEntry.getPaxHeader()  ==  null)  {  return  currEntry.getPaxHeader();  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
86	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(headerBuf);  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(headerBuf);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(headerBuf);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
87	[BUG]  [BUGGY]  n  =  currEntry.getPaxHeader();  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  n  =  currEntry.getPaxHeader();  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	n  =  currEntry.getPaxHeader();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
88	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf);  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(this.headerBuf);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
89	[BUG]  [BUGGY]  parsePaxFileHeaders();  [CE]  illegal  start  of  expression  [FE]                NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  parsePaxFileHeaders();  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxFileHeaders();	  parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
90	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getSourceName());  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  parsePaxHeader(currEntry.getSourceName());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getSourceName());	  parsePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
91	[BUG]  [BUGGY]  scanPaxHeaders(currEntry);  [CE]  illegal  start  of  expression  [FE]            NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  scanPaxHeaders(currEntry);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry);	  scanPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
92	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  isHitEOF);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  isHitEOF);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  isHitEOF);	  wrapPaxHeader(currEntry.getName(),    longNameData);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
93	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  headers);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  headers);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  headers);	  wrapPaxHeaders(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
94	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  headers);  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  headers);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  headers);	  rehashPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
95	[BUG]  [BUGGY]  RehashPaxHeader  currEntry  =  currEntry.getPaxHeader();  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  RehashPaxHeader  currEntry  =  currEntry.getPaxHeader();  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeader  currEntry  =  currEntry.getPaxHeader();	  rehashPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
96	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getURL());  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  rehashPaxHeader(currEntry.getURL());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getURL());	  rehashPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
97	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader()  +  1);  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader()  +  1);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader()  +  1);	  rehashPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
98	[BUG]  [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  headers);  [CE]  illegal  start  of  expression  [FE]          NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  scanHeaders(currEntry.getPaxHeader(),  headers);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeaders(currEntry.getPaxHeader(),  headers);	  scanHeaders();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
99	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getPax());  [CE]  illegal  start  of  expression  [FE]            NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  traversePaxHeaders(currEntry.getPax());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getPax());	  traversePaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
100	[BUG]  [BUGGY]  if(!hasHitEOF)  {  return  currEntry.getPaxHeader();  }  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  if(!hasHitEOF)  {  return  currEntry.getPaxHeader();  }  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	if(!hasHitEOF)  {  return  currEntry.getPaxHeader();  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
101	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
102	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData));  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  ((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData));  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setHeader(zipEncoding.decode(longNameData));	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
103	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader));  [CE]  illegal  start  of  expression  [FE]                            NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader));  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(headerPaxHeader));	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
104	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(this);  [CE]  illegal  start  of  expression  [FE]                              NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(this);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(this);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
105	[BUG]  [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));  return  currEntry;  [CE]  illegal  start  of  expression  [FE]                                NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  ((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));  return  currEntry;  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	((  TarArchiveEntry)currEntry).setPaxHeader(zipEncoding.decode(longNameData));  return  currEntry;	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
106	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  zipEncoding);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData,  zipEncoding);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData,  zipEncoding);	  wrapPaxHeader(currEntry.getName(),    longNameData);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
107	[BUG]  [BUGGY]  traversePaxHeaders(currEntry.getMethod());  [CE]  illegal  start  of  expression  [FE]            NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  traversePaxHeaders(currEntry.getMethod());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders(currEntry.getMethod());	  traversePaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
108	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getName());  [CE]  illegal  start  of  expression  [FE]              NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getName());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getName());	  wrapPaxHeaders(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
109	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getSize());  [CE]  illegal  start  of  expression  [FE]                NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getSize());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader(),  currEntry.getSize());	  wrapPaxHeaders(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
110	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getTarHeader());  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeaders(currEntry.getTarHeader());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getTarHeader());	  wrapPaxHeaders(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
111	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getMethod());  [CE]  illegal  start  of  expression  [FE]                NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  parsePaxHeader(currEntry.getMethod());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getMethod());	  parsePaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
112	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders();  [CE]  illegal  start  of  expression  [FE]          NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders();  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  new  RehashPaxHeaders();	  rehashPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
113	[BUG]  [BUGGY]  RehashPaxHeaders  currEntry  =  getNextPaxHeaders();  [CE]  illegal  start  of  expression  [FE]            NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  RehashPaxHeaders  currEntry  =  getNextPaxHeaders();  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	RehashPaxHeaders  currEntry  =  getNextPaxHeaders();	  rehashPaxHeaders();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
114	[BUG]  [BUGGY]  if(!hasHitEOF)  {  rehashPaxHeader(currEntry.getPaxHeader());  }  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  if(!hasHitEOF)  {  rehashPaxHeader(currEntry.getPaxHeader());  }  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	if(!hasHitEOF)  {  rehashPaxHeader(currEntry.getPaxHeader());  }	  rehashPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
115	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  currEntry.getName());  [CE]  illegal  start  of  expression  [FE]                      NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader(),  currEntry.getName());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader(),  currEntry.getName());	  rehashPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
116	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getTarHeader());  [CE]  illegal  start  of  expression  [FE]                        NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  rehashPaxHeader(currEntry.getTarHeader());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getTarHeader());	  rehashPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
117	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getMethod());  [CE]  illegal  start  of  expression  [FE]                          NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  rehashPaxHeader(currEntry.getMethod());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getMethod());	  rehashPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
118	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  longNameData);  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  longNameData);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPaxHeader(),  longNameData);	  parsePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
119	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  headers);  [CE]  illegal  start  of  expression  [FE]                    NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  parsePaxHeader(currEntry.getPaxHeader(),  headers);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPaxHeader(),  headers);	  parsePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
120	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getTarHeader());  [CE]  not  a  statement  [FE]                      NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  parsePaxHeader(currEntry.getTarHeader());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getTarHeader());	  parsePaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  not  a  statement	6	None	replace
121	[BUG]  [BUGGY]  scanPaxHeaders(currEntry.getPaxHeader());  [CE]  not  a  statement  [FE]            NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  scanPaxHeaders(currEntry.getPaxHeader());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders(currEntry.getPaxHeader());	  scanPaxHeaders();    	non-compiled	[CE]  not  a  statement	3	None	replace
122	[BUG]  [BUGGY]  validatePaxHeaders(currEntry);  [CE]  not  a  statement  [FE]        NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  validatePaxHeaders(currEntry);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeaders(currEntry);	  validatePaxHeaders();    	non-compiled	[CE]  not  a  statement	1	None	replace
123	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getBase());  [CE]  not  a  statement  [FE]        NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  Pax  headers  =  getPaxHeaders(currEntry.getBase());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders(currEntry.getBase());	  Pax    headers    =    getPaxHeaders();    	non-compiled	[CE]  not  a  statement	9	None	replace
124	[BUG]  [BUGGY]  scanHeader(currEntry.getPaxHeader(),  headers);  [CE]  not  a  statement  [FE]          NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  scanHeader(currEntry.getPaxHeader(),  headers);  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeader(currEntry.getPaxHeader(),  headers);	  scanHeaders();    	non-compiled	[CE]  not  a  statement	10	None	replace
125	[BUG]  [BUGGY]  scanHeaders(currEntry.getPaxHeaderSize());  [CE]  not  a  statement  [FE]            NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  scanHeaders(currEntry.getPaxHeaderSize());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeaders(currEntry.getPaxHeaderSize());	  scanHeaders();    	non-compiled	[CE]  not  a  statement	10	None	replace
126	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  currEntry.getName());  [CE]  not  a  statement  [FE]        NumberFormatException    [CONTEXT]    if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader(),  currEntry.getName());  [BUGGY]    }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader(),  currEntry.getName());	  wrapPaxHeader(currEntry.getPaxHeader());    	non-compiled	[CE]  not  a  statement	11	None	replace
