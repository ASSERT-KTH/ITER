bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  validatePaxHeaders();  [CE]  illegal  start  of  expression  [FE]    NumberFormatException  [CONTEXT]  if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]  validatePaxHeaders();  [BUGGY]  }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	validatePaxHeaders();	paxHeaders();  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
2	[BUG]  [BUGGY]  rehashPaxHeaders();  [CE]  illegal  start  of  expression  [FE]      NumberFormatException  [CONTEXT]  if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]  rehashPaxHeaders();  [BUGGY]  }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeaders();	paxHeaders();  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
3	[BUG]  [BUGGY]  scanPaxHeaders();  [CE]  illegal  start  of  expression  [FE]        NumberFormatException  [CONTEXT]  if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]  scanPaxHeaders();  [BUGGY]  }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanPaxHeaders();	paxHeaders();  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
4	[BUG]  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader());  [CE]  illegal  start  of  expression  [FE]          NumberFormatException  [CONTEXT]  if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]  wrapPaxHeaders(currEntry.getPaxHeader());  [BUGGY]  }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeaders(currEntry.getPaxHeader());	paxHeaders();  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
5	[BUG]  [BUGGY]  parsePaxHeaders();  [CE]  <identifier>  expected  [FE]            NumberFormatException  [CONTEXT]  if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]  parsePaxHeaders();  [BUGGY]  }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeaders();	paxHeaders();  	non-compiled	[CE]  <identifier>  expected	3	None	replace
6	[BUG]  [BUGGY]  parsePaxHeader(currEntry.getPaxHeader());  [CE]  illegal  start  of  expression  [FE]              NumberFormatException  [CONTEXT]  if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]  parsePaxHeader(currEntry.getPaxHeader());  [BUGGY]  }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	parsePaxHeader(currEntry.getPaxHeader());	paxHeaders();  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
7	[BUG]  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader());  [CE]  illegal  start  of  expression  [FE]                NumberFormatException  [CONTEXT]  if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]  rehashPaxHeader(currEntry.getPaxHeader());  [BUGGY]  }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	rehashPaxHeader(currEntry.getPaxHeader());	paxHeaders();  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                  NumberFormatException  [CONTEXT]  if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]    [BUGGY]  }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	  	paxHeaders();  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
9	[BUG]  [BUGGY]  Pax  headers  =  getPaxHeaders();  [CE]  illegal  start  of  expression  [FE]    NumberFormatException  [CONTEXT]  if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]  Pax  headers  =  getPaxHeaders();  [BUGGY]  }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	Pax  headers  =  getPaxHeaders();	paxHeaders();  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
10	[BUG]  [BUGGY]  scanHeaders();  [CE]  illegal  start  of  expression  [FE]      NumberFormatException  [CONTEXT]  if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]  scanHeaders();  [BUGGY]  }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	scanHeaders();	paxHeaders();  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
11	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader());  [CE]  illegal  start  of  expression  [FE]    NumberFormatException  [CONTEXT]  if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]  wrapPaxHeader(currEntry.getPaxHeader());  [BUGGY]  }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getPaxHeader());	paxHeaders();  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
12	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName());  [CE]  illegal  start  of  expression  [FE]      NumberFormatException  [CONTEXT]  if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]  wrapPaxHeader(currEntry.getName());  [BUGGY]  }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName());	paxHeaders();  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
13	[BUG]  [BUGGY]  traversePaxHeaders();  [CE]  illegal  start  of  expression  [FE]        NumberFormatException  [CONTEXT]  if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]  traversePaxHeaders();  [BUGGY]  }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	traversePaxHeaders();	paxHeaders();  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
14	[BUG]  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData);  [CE]  illegal  start  of  expression  [FE]          NumberFormatException  [CONTEXT]  if  (longNameData  ==  null)  {    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]  wrapPaxHeader(currEntry.getName(),  longNameData);  [BUGGY]  }  if  (currEntry.isGNUSparse()){  //  Process  sparse  files  readGNUSparse();  }      [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	311	311	1	replace	wrapPaxHeader(currEntry.getName(),  longNameData);	paxHeaders();  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
